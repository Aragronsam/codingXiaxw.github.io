<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[MySQL学习笔记二之单表查询与多表查询]]></title>
      <url>http://codingxiaxw.cn/archives/2016/10/10/16-SQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h2 id="1-编码问题"><a href="#1-编码问题" class="headerlink" title="1.编码问题"></a>1.编码问题</h2><h3 id="1-1查看MySQL数据库编码"><a href="#1-1查看MySQL数据库编码" class="headerlink" title="1.1查看MySQL数据库编码"></a>1.1查看MySQL数据库编码</h3><p>在命令行中输入:<code>SHOW VARIABLES LIKE &#39;CHAR%&#39;;</code>  回车可看到如下内容:  </p>
<a id="more"></a>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%98%E5%90%97.png" alt="">  </p>
<h3 id="1-2编码解释"><a href="#1-2编码解释" class="headerlink" title="1.2编码解释"></a>1.2编码解释</h3><ul>
<li>character_set_client: mysql使用该编码来解读客户端发送过来的数据，例如该编码为utf，那么如果客户端发送过来的数据不是utf，就会出现乱码。</li>
<li>character_set_results：mysql会把数据转换成该编码后，再发送给客户端，例如该编码为utf，那么如果客户端不使用utf来解读，那么就会出现乱码，其它编码只要支持中文即可。</li>
</ul>
<h3 id="1-3控制台乱码问题"><a href="#1-3控制台乱码问题" class="headerlink" title="1.3控制台乱码问题"></a>1.3控制台乱码问题</h3><ul>
<li>插入或修改时出现乱码：因为控制台默认使用gbk，而character_set_client不是gbk的原因。</li>
<li>查询出的数据为乱码，因为character_set_results不是gbk而控制台默认使用gbk。</li>
<li>解决方法:通过在命令行中输入代码<code>set character_set_client=gbk;</code>和<code>set character_set_results=gbk;</code>来设置编码。<blockquote>
<p>注意：设置编码只对当前连接有效，当退出mysql后再次登陆mysql时又回到utf了。解决方法:window系统下是找到my.ini配置文件，在配置文件中设置<code>set default_character=gbk</code>即可；mac用户我不知道用什么办法，希望知道的人在下方评论区得以告知，谢谢。  </p>
</blockquote>
</li>
</ul>
<h2 id="2-备份数据库与恢复数据库"><a href="#2-备份数据库与恢复数据库" class="headerlink" title="2.备份数据库与恢复数据库"></a>2.备份数据库与恢复数据库</h2><h3 id="2-1备份数据库"><a href="#2-1备份数据库" class="headerlink" title="2.1备份数据库"></a>2.1备份数据库</h3><p>备份就是将数据库导出为sql脚本。在命令行中输入:<code>mysqldump -u用户名 -p密码 数据库名&gt;导出文件路径</code>  </p>
<blockquote>
<p>注意:1.末尾不要打分号。2.执行此语句前应该先退出mysql客户端。3.导出的内容不包括创建数据库的语句只包含数据库里面的内容。</p>
</blockquote>
<h3 id="2-2恢复数据库"><a href="#2-2恢复数据库" class="headerlink" title="2.2恢复数据库"></a>2.2恢复数据库</h3><p>就是将导出的sql脚本插入到数据库中。有如下两种实现方式:  </p>
<ul>
<li>第一种方式:1.登录mysql:<code>mysql -u用户名 -p密码</code>。2.创建数据库:<code>create database 数据库名</code>。3.输入命令:<code>mysql -uroot -p密码 数据库名&lt;备份的数据路径</code>并回车。</li>
<li>第二种方式:1.删除数据库:<code>drop database 数据库名</code>。2.重新创建数据库:<code>create database 数据库名</code>。3.切换到数据库:<code>use 数据库名</code>。4.输入命令:<code>source sql脚本路径</code>并回车。</li>
</ul>
<h2 id="3-约束"><a href="#3-约束" class="headerlink" title="3.约束"></a>3.约束</h2><p>约束是添加在列上用来约束列的。</p>
<h3 id="3-1主键约束-primary-key"><a href="#3-1主键约束-primary-key" class="headerlink" title="3.1主键约束(primary key)"></a>3.1主键约束(primary key)</h3><p>特点:1.非空。2.唯一。3.可被引用。当表的某一列被指定为主键后，该列的值就不能为空，也不能有重复值出现。  </p>
<ul>
<li><p>创建表时指定主键的两种方式:  </p>
<pre><code>1.create table emp(
  empno int primary key,
  ename varchar(50)
);

2.create table emp(
  empno int,
  ename varchar(50),
  primary key(empno)
 );
</code></pre></li>
<li><p>修改表时指定主键的方式:</p>
<pre><code>alter table emp
add primary key(empno);
</code></pre></li>
<li><p>修改表时删除主键的方式:</p>
<pre><code>alter table emp
drop primary key;
</code></pre></li>
</ul>
<h3 id="3-2主键自增长-auto-increment"><a href="#3-2主键自增长-auto-increment" class="headerlink" title="3.2主键自增长(auto_increment)"></a>3.2主键自增长(auto_increment)</h3><pre><code>create table student(
id int primary key auto_increment,
name varchar(50)
);
</code></pre><p>注意:auto_increment必须添加在int类型后，指定主键自增长后，插入数据时便可以给该主键设置null值。  </p>
<p>限制:主键自增长在群集环境下不好使，所以大部分情况下我们使用UUID来作主键。  </p>
<h3 id="3-3非空约束-not-null"><a href="#3-3非空约束-not-null" class="headerlink" title="3.3非空约束(not null)"></a>3.3非空约束(not null)</h3><p>因为某些列不能设置为null值，所以可以对列添加非空约束。  </p>
<pre><code>create table student(
id int primary key auto_increment,
name varchar(50) not null
);
</code></pre><h3 id="3-4唯一约束-unique"><a href="#3-4唯一约束-unique" class="headerlink" title="3.4唯一约束(unique)"></a>3.4唯一约束(unique)</h3><p>数据库中某些列不能设置重复的值，所以可以对列添加唯一约束。</p>
<pre><code>create table student(
id int primary key auto_increment,
name varchar(50) not null unique
);
</code></pre><h3 id="3-5概念模型"><a href="#3-5概念模型" class="headerlink" title="3.5概念模型"></a>3.5概念模型</h3><ul>
<li>在java中表现为对象模型：在java中是domain。例如：User、Student。</li>
<li>在数据库中表现为关系模型：在数据库中表现为 表。  </li>
</ul>
<p>当我们要完成一个软件系统时，需要把系统中的实体抽取出来，形成概念模型。例如部门、员工都是系统中的实体。概念模型中的实体最终会成为java中的类、数据库中的表。实体之间还存在着关系，关系有三种:</p>
<ul>
<li>1对多:例如员工和部门的关系</li>
<li>1对1:例如老公和老婆的关系</li>
<li>多对1:例如老师与学生的关系</li>
</ul>
<p>对象模型：可以双向关联，而且引用的是对象，而不是一个主键。  </p>
<p>关系模型：只能多方引用一方，而且引用的是主键，而不是一整行记录。</p>
<h3 id="3-6外键约束"><a href="#3-6外键约束" class="headerlink" title="3.6外键约束"></a>3.6外键约束</h3><ul>
<li>1.外键必须是另一表(或自己表)的主键的值(即外键要引用主键的值)。</li>
<li>2.外键可以为空。</li>
<li>3.外键可重复。</li>
<li><p>4.一张表可以有多个外键。</p>
<pre><code>create table dept(
deptno int primary key auto_increment,
name varchar(50)
);

create table emp(
empno int primary key auto_increment,
name varchar(50), 
dno int,
constraint fk_emp_dept  foreign key(dno)  references dept (deptno)
);
</code></pre></li>
</ul>
<p>最后一行就是给emp表添加外键约束，添加外键约束后，在emp表中对dno列进行赋值时就应该考虑外键约束的三个条件了。(上图创建的两张表演示的也是数据库中1对多的关系。)</p>
<h3 id="3-7数据库中1对1的关系"><a href="#3-7数据库中1对1的关系" class="headerlink" title="3.7数据库中1对1的关系"></a>3.7数据库中1对1的关系</h3><pre><code>create table husband (
hid int primary key auto_increment,
hname varchar(50)
);

insert into husband values(null,’刘备’);
insert into husband values(null,’张飞’);
insert into husband values(null,’关羽’);

create table wife(
wid int primary key auto_increment,
wname varchar(50),
constraint fk_wife_husband foreign key (wid)  references husband(hid)
);
</code></pre><p>特点:外键引用自身表的主键。</p>
<h3 id="3-8数据库中多对多的关系"><a href="#3-8数据库中多对多的关系" class="headerlink" title="3.8数据库中多对多的关系"></a>3.8数据库中多对多的关系</h3><p>在表中建立多对多关系需要使用中间表(关联表)，即需要三张表，在中间表中使用两个外键，分别引用其它两个表的主键。</p>
<pre><code>create table student(
sid int primary key auto_increment,
sname varchar(50)
);

create table teacher (
tid int primary key auto_increment,
name varchar(50)
);

create table stu_tea(
sid int,
tid int,
constraint fk_student foreign key(sid) references student(sid),
constraint fk_teacher foreign key(tid) references student(tid)
);

insert into student values(null,’刘德华’);
insert into student values(null,’梁朝伟);
insert into student values(null,’黄日华’);
insert into student values(null,’苗侨伟’);
insert into student values(null,’汤镇业’);

insert into teacher values(null,’崔老师’);
insert into teacher values(null,’刘老师’);
insert into teacher values(null,’石老师’);

insert into stu_tea values(1,1);
insert into stu_tea values(2,1);
insert into stu_tea values(3,1);
insert into stu_tea values(4,1);
insert into stu_tea values(5,1);
insert into stu_tea values(1,2);
insert into stu_tea values(2,2);
insert into stu_tea values(3,2);
insert into stu_tea values(3,3);
insert into stu_tea values(4,3);
insert into stu_tea values(5,3);

select * from stu_tea;
</code></pre><h2 id="4-多表查询"><a href="#4-多表查询" class="headerlink" title="4.多表查询"></a>4.多表查询</h2><h3 id="4-1分类"><a href="#4-1分类" class="headerlink" title="4.1分类"></a>4.1分类</h3><ul>
<li>合并结果集(了解)</li>
<li>连接查询</li>
<li>子查询</li>
</ul>
<h3 id="4-2合并结果集"><a href="#4-2合并结果集" class="headerlink" title="4.2合并结果集"></a>4.2合并结果集</h3><p>要求两个结果集(注意这里强调的是结果集，而不是两张表)的列数、列类型完全相同。关键字union:去除重复行;关键字union all:不去除重复行。</p>
<pre><code>create table ab(
a int, 
b,varchar(50)
);

insert into ab values(1,’1’);
insert into ab values(2,’2’);
insert into ab values(3,’3’);

create table cd(
c int,
d varchar(50)
);

insert into cd values (3,’3’);
insert into cd values (5,’5’);
insert into cd values (5,’5’);
</code></pre><p>合并操作为:</p>
<pre><code>select * from ab
union (all)
select * from cd;
</code></pre><h3 id="4-3连接查询"><a href="#4-3连接查询" class="headerlink" title="4.3连接查询"></a>4.3连接查询</h3><ul>
<li>内连接</li>
<li>外连接  <blockquote>
<p>外连接又包括左外连接、右外连接、全外连接(mysql不支持这个)</p>
</blockquote>
</li>
</ul>
<h4 id="4-3-1内连接"><a href="#4-3-1内连接" class="headerlink" title="4.3.1内连接"></a>4.3.1内连接</h4><p>方言语法:<code>select * from 表1 别名1，表2 别名2 where 别名1.xx＝别名2.xx;</code>例如:<code>select * from emp,dept  where emp.deptno=dept.deptno;</code>去除无用行后的笛卡尔积，where后的条件是主外键。  </p>
<p>标准语法:<code>select * from 表1 别名1 inner join 表2 别名2，on 别名1.xx＝别名2.xx;</code>例如:<code>:select * from emp inner join dept on emp.deptno=dept.deptno;</code>  就是把方言版的逗号改为inner join ，把where改为on了。</p>
<p>自然连接语法:<code>select * from 表1 别名1 natural  join 表2 别名2;</code>自然连接特有的特点就是它能够自己找到两个表中相同的列 即自己填全where条件。</p>
<p>内连接的特点:内连接查询出的所有记录都是满足条件的记录，不满足条件的记录不显示出来。</p>
<h4 id="4-3-2外连接"><a href="#4-3-2外连接" class="headerlink" title="4.3.2外连接"></a>4.3.2外连接</h4><p>特点:外连接有一主一次。</p>
<ul>
<li>左外连接左表为主，那么左表中所有的记录无论满足不满足条件，都打印出来。不满足条件的值用null填补。语法为:<code>select * from emp left outer join dept on emp.deptno=dept.deptno;</code></li>
<li>右外连接右表为主，那么右表中所有的记录无论满足不满足条件，都打印出来。不满足条件的值用null填补。语法为:<code>:select * from amp right join dept on emp.deptno=dept.deptno;</code></li>
<li>全外连接：左右表都为主，左表和右表中的记录都要打印出来，不满足条件的值用null填补。使用union将左外连接和右外连接的结果集合并起来就是全外连接。  </li>
</ul>
<h3 id="4-4子查询"><a href="#4-4子查询" class="headerlink" title="4.4子查询"></a>4.4子查询</h3><p>子查询通俗来讲，就是查询中有查询。  </p>
<p>见例子:</p>
<pre><code>/*查询本公司工资最高的员工的详细信息*/

select * 
from amp
where sal=max(sal);

此种写法错误，因为where条件中不能有聚合函数。所以想到要用字查询。

思路:首先查出最高工资:select max(sal) from amp;然后查询该工资的员工:select * from amp where sal=刚刚的查询结果。所以合并起来为：select * from amp where sal=(select max(sal) from amp);
</code></pre><h4 id="4-4-1子查询能出现的位置"><a href="#4-4-1子查询能出现的位置" class="headerlink" title="4.4.1子查询能出现的位置"></a>4.4.1子查询能出现的位置</h4><ul>
<li>where后作为条件(上述例子)</li>
<li>from后作为二次查询(下面例子)<blockquote>
<p><code>select e.empno,e.ename from (select * from amp where deptno=30) as e where 条件;</code></p>
</blockquote>
</li>
</ul>
<h4 id="4-4-2子查询的结果集"><a href="#4-4-2子查询的结果集" class="headerlink" title="4.4.2子查询的结果集"></a>4.4.2子查询的结果集</h4><ul>
<li>单行单列:<code>select * from 表1 where 列1 [=、&gt;、&lt;、&gt;=、&lt;=、!=] （select 列 from 表2  where 条件);</code></li>
<li>多行单列:<code>:select * from 表1 where 列1 [=、&gt;、&lt;、&gt;=、&lt;=、!=] ［any、all、in］（select 列 from 表2  where 条件;</code></li>
<li>单行多列:<code>select * from 表1 where （列1，列2） in (select 列1，列2 from 表2 where 条件);</code></li>
<li>多行多列:该结果集用在from后作为二次查询。<code>select * from 表1,(select …) 别名 where 条件;</code></li>
</ul>
<h2 id="5-联系"><a href="#5-联系" class="headerlink" title="5.联系"></a>5.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">博客:codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">微博@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">知乎@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a> </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL学习笔记一之MySQL语法]]></title>
      <url>http://codingxiaxw.cn/archives/2016/10/09/15-SQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      <content type="html"><![CDATA[<h2 id="1-SQL语句分类"><a href="#1-SQL语句分类" class="headerlink" title="1.SQL语句分类"></a>1.SQL语句分类</h2><ul>
<li>1.DDL(Data Definition Language):数据定义语言，用来定义数据库对象：库、表、列等。功能：创建、删除、修改库和表结构。</li>
<li>2.DML(Data Manipulation Language):数据操作语言，用来定义数据库记录:增、删、改表记录。</li>
<li>3.DCL(Data Control Language):数据控制语言，用来定义访问权限和安全级别。</li>
<li>4.DQL(Data Query Language):数据查询语言，用来查询记录。也是本章学习的重点。  </li>
</ul>
<a id="more"></a>
<h2 id="2-SQL语句详解"><a href="#2-SQL语句详解" class="headerlink" title="2.SQL语句详解"></a>2.SQL语句详解</h2><p>当然首先需要再命令行中输入<code>mysql -uroot -p</code>来进入mysql。注意:1.MySQL语法不区分大小写，但是建议在写关键字时用大写。2.每一条语句后面以分号结尾。  </p>
<h3 id="2-1DDL-数据定义语言-语法"><a href="#2-1DDL-数据定义语言-语法" class="headerlink" title="2.1DDL(数据定义语言)语法"></a>2.1DDL(数据定义语言)语法</h3><p>该语言用来对数据库和表结构进行操作。  </p>
<p><strong>对数据库的操作:</strong>  </p>
<p>查看所有数据库:<code>SHOW DATABASES;</code>  </p>
<p>使用数据库:<code>USE 数据库名;</code>  </p>
<p>创建数据库:<code>CREATE DATABASE [IF NOT EXISTS] 数据库名 [CHARSET=UTF-8];</code>  </p>
<p>删除数据库:<code>DROP DATABASE 数据库名;</code>  </p>
<p>修改数据库的编码:<code>ALTER DATABASE 数据库名 CHARACTER SET UTF-8;</code>  </p>
<p><strong>对表结构的操作</strong><br>创建表:  </p>
<pre><code>CREATE TABLE (IF NOT EXISTS) 表名(
列名 列类型，
...，
列名 列类型
)；  
</code></pre><p>查看当前数据库中所有表:<code>SHOW TABLES;</code>  </p>
<p>查看表结构:<code>DESC 表名;</code>  </p>
<p>删除表:<code>DROP 表名;</code>  </p>
<p>修改表:修改表有四个操作，但前缀都是一样的:<code>ALTER TABLE 表名...</code>  </p>
<ul>
<li>修改表之添加列:<code>ALTER TABLE 表名 add (列名 列类型，...，列名 列类型);</code></li>
<li>修改表之修改列类型:<code>ALTER TABLE 表名 MODIFY 列名 列的新类型;</code></li>
<li>修改表之删除列:<code>ALTER TABLE 表名 DROP 列名;</code></li>
<li>修改表之修改表名:<code>ALTER TABLE 表名 RENAME TO 新表名</code></li>
</ul>
<h3 id="2-2DML-数据操作语言-语法"><a href="#2-2DML-数据操作语言-语法" class="headerlink" title="2.2DML(数据操作语言)语法"></a>2.2DML(数据操作语言)语法</h3><p>该语言用来对表记录操作(增、删、改)。  </p>
<h4 id="2-2-1插入数据-一次插入就是插入一行"><a href="#2-2-1插入数据-一次插入就是插入一行" class="headerlink" title="2.2.1插入数据(一次插入就是插入一行)"></a>2.2.1插入数据(一次插入就是插入一行)</h4><p><code>insert into 表名 (列名1，列名2，列名3) values (列值1，列值2，列值3)</code>  </p>
<p>说明:1.在数据库中所有的字符串类型，必须使用单引号。2.(列名1，列名2，列名3)可省略，表示按照表中的顺序插入。但不建议采取这种写法，因为降低了程序的可读性。3.在命令行插入记录不要写中文，否则会出现乱码。  </p>
<h4 id="2-2-2修改记录-不会修改一行"><a href="#2-2-2修改记录-不会修改一行" class="headerlink" title="2.2.2修改记录(不会修改一行)"></a>2.2.2修改记录(不会修改一行)</h4><p>修改某列的全部值:<code>update 表名 set 列名1=列值1(，列名2=列值2);</code>  </p>
<p>修改(某行或者多行记录的)列的指定值:<code>update 表名 set 列名1=列值1 where 列名2=列值2 or 列名3=列值3;</code>  </p>
<p>运算符:<code>=、!=、&lt;&gt;、&lt;、&gt;、&gt;=、&lt;=、between...and、in(…)、is null、not、or、and</code>，其中in(…)的用法表示集合。例如:<code>update 表名 set 列名1=列值1 where 列名2=列值2 or 列名2=列值22</code>用in(…)写成<code>update 表名 set 列名1=列值1 where 列名2 in(列值2，列值3)</code>  </p>
<h4 id="2-2-3删除数据-删除整行"><a href="#2-2-3删除数据-删除整行" class="headerlink" title="2.2.3删除数据(删除整行)"></a>2.2.3删除数据(删除整行)</h4><p><code>delete from 表名 (where 条件);</code>不加where条件时会删除表中所有的记录，所以为了防止这种失误操作，很多数据库往往都会有备份。</p>
<h3 id="2-3DCL-数据控制语言-语法"><a href="#2-3DCL-数据控制语言-语法" class="headerlink" title="2.3DCL(数据控制语言)语法"></a>2.3DCL(数据控制语言)语法</h3><p>该语言用来定义访问权限，理解即可，以后不会多用。需要记住的是，一个项目创建一个用户，一个项目对应的数据库只有一个。这个用户只能对这个数据库有权限，其它数据库该用户就操作不了。  </p>
<h4 id="2-3-1创建用户"><a href="#2-3-1创建用户" class="headerlink" title="2.3.1创建用户"></a>2.3.1创建用户</h4><p>用户只能在指定ip地址上登录mysql:<code>create user 用户名@IP地址 identified by  ‘密码’；</code>  </p>
<p>用户可以在任意ip地址上登录:<code>create user 用户名@‘％’ identified by ‘密码’；</code>  </p>
<h4 id="2-3-2给用户授权"><a href="#2-3-2给用户授权" class="headerlink" title="2.3.2给用户授权"></a>2.3.2给用户授权</h4><p>语法:<code>grant 权限1，…，权限n on 数据库.* to 用户名@IP地址；</code>其中权限1、2、n可以直接用all关键字代替。权限例如:create,alter,drop,insert,update,delete,select。  </p>
<h4 id="2-3-3撤销授权"><a href="#2-3-3撤销授权" class="headerlink" title="2.3.3撤销授权"></a>2.3.3撤销授权</h4><p>语法:<code>revoke 权限1，…，权限n  on  数据库.*   from 用户名@ ip地址；</code>撤销指定用户在指定数据库上的指定权限。撤销例如:<code>revoke create,delete on mydb1.*  form user@localhost;</code>表示的意思是撤消user用户在数据库mydb1伤的create、alter权限。  </p>
<h4 id="2-3-4查看权限"><a href="#2-3-4查看权限" class="headerlink" title="2.3.4查看权限"></a>2.3.4查看权限</h4><p>查看指定用户的权限:<code>show grants for 用户名@ip地址；</code>  </p>
<h4 id="2-3-5删除用户"><a href="#2-3-5删除用户" class="headerlink" title="2.3.5删除用户"></a>2.3.5删除用户</h4><p><code>drop user 用户名@ip地址；</code></p>
<h3 id="2-4DQL-数据查询语言-语法"><a href="#2-4DQL-数据查询语言-语法" class="headerlink" title="2.4DQL(数据查询语言)语法"></a>2.4DQL(数据查询语言)语法</h3><p>重点，该语言用来查询记录，不会修改数据库和表结构。  </p>
<h4 id="2-4-1基本查询-后缀都是统一为from-表名"><a href="#2-4-1基本查询-后缀都是统一为from-表名" class="headerlink" title="2.4.1基本查询(后缀都是统一为from 表名)"></a>2.4.1基本查询(后缀都是统一为from 表名)</h4><ul>
<li>1.字段(列)控制  <blockquote>
<p>1.查询所有列:<code>select * from 表名;</code>其中＊表示查询所有列，而不是所有行的意思。<br>2.查询指定列:<code>select 列1，列2，列n  from 表名；</code><br>3.完全重复的记录只显示一次:在查询的列之前添加distinct:<code>select distinct $ from 表名；</code>缺省值为all。<br>4.列运算<br>a.数量类型的列可以做加、减、乘、除:<code>SELECT sal*5 from 表名；</code>说明:1.遇到null加任何值都等于null的情况，需要用到ifnull()函数。2.将字符串做加减乘除运算，会把字符串当作0。<br>b.字符串累类型可以做连续运算(需要用到concat()函数):<code>select concat(列名1，列名2) from 表名;</code>其中列名的类型要为字符串。<br>c. 给列名起别名:<code>select 列名1 (as) 别名1,列名2 (as) 别名2   from 表名；</code></p>
</blockquote>
</li>
<li>2.条件控制<blockquote>
<p>1.条件查询。在后面添加where指定条件:<code>select * from 表名 where 列名＝指定值;</code><br>2.模糊查询：当你想查询所有姓张的记录。用到关键字like。eg:<code>select * from 表名 where 列名 like ‘张_’;</code>(_代表匹配任意一个字符，％代表匹配0～n个任意字符)。  </p>
</blockquote>
</li>
</ul>
<h4 id="2-4-2排序-所谓升序和降序都是从上往下排列"><a href="#2-4-2排序-所谓升序和降序都是从上往下排列" class="headerlink" title="2.4.2排序(所谓升序和降序都是从上往下排列)"></a>2.4.2排序(所谓升序和降序都是从上往下排列)</h4><ul>
<li>1.升序:<code>select * form 表名 order by 列名 (ASC );</code> ()里面的内容为缺省值；</li>
<li>2.降序:<code>select * from 表名 order by 列名 DESC;</code></li>
<li>3.使用多列作为排序条件: 当第一列排序条件相同时，根据第二列排序条件排序(当第二列依旧相同时可视情况根据第三例条件排序)。eg:<code>select * from 表名 order by 列名1 ASC, 列名2 DESC;</code>意思是当列名1的值相同时按照列名2的值降序排。</li>
</ul>
<h4 id="2-4-3聚合函数"><a href="#2-4-3聚合函数" class="headerlink" title="2.4.3聚合函数"></a>2.4.3聚合函数</h4><ul>
<li>1.count:<code>select count(列名) from 表名；</code>,纪录有效行数。</li>
<li>2.max:<code>select count(列名) from 表名；</code>,列中最大值。</li>
<li>3.min:<code>select sum(列名) from 表名；</code>,列中最小值。</li>
<li>4.sum:<code>select sum(列名) from 表名；</code>,求列的总值，null 和字符串默认为0。</li>
<li>5.avg:<code>select avg(列名) from 表名;</code>,一列的平均值。</li>
</ul>
<h4 id="2-4-4分组查询"><a href="#2-4-4分组查询" class="headerlink" title="2.4.4分组查询"></a>2.4.4分组查询</h4><p>分组查询的信息都是组的信息，不能查到个人的信息，其中查询组的信息是通过聚合函数得到的。  </p>
<p>语法：<code>select 分组列名，聚合函数1,聚合函数2  from 表名 group by 该分组列名；</code>其中分组列名需要的条件是该列名中有重复的信息。  </p>
<p>查询的结果只能为：作为分组条件的列和聚合函数；查处的信息都是组的信息。  </p>
<p>分组查询前，还可以通过关键字where先把满足条件的人分出来，再分组。语法为:<code>select 分组列，聚合函数 from 表名 where 条件 group by  分组列；</code>  </p>
<p>分组查询后，也可以通过关键字having把组信息中满足条件的组再细分出来。语法为：<code>select 分组列，聚合函数 from 表名 where 条件 group by  分组列 having 聚合函数或列名(条件)；</code>  </p>
<h4 id="2-4-5LIMIT子句-mysql中独有的语法"><a href="#2-4-5LIMIT子句-mysql中独有的语法" class="headerlink" title="2.4.5LIMIT子句(mysql中独有的语法)"></a>2.4.5LIMIT子句(mysql中独有的语法)</h4><p>LIMIT用来限定查询结果的起始行，以及总行数。  </p>
<p>例如：<code>select * from 表名  limit 4，3；</code>表示起始行为第5行，一共查询3行记录。  </p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p>学过的关键字：<code>select,from,where,group by,having ,order by。</code>当一条查询语句中都包含所有这些关键字时它们的优先级是<code>select&gt;from&gt;where&gt;group by&gt;having&gt;order by</code>。</p>
<h2 id="4-联系"><a href="#4-联系" class="headerlink" title="4.联系"></a>4.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">博客:codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">微博@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">知乎@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a> </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Java中使用dom4j来解析及生成xml文件]]></title>
      <url>http://codingxiaxw.cn/archives/2016/10/04/14-%E5%9C%A8Java%E4%B8%AD%E4%BD%BF%E7%94%A8dom4j%E6%9D%A5%E8%A7%A3%E6%9E%90xml%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>在Java中解析xml文件的方式有四种，分别是:Dom、Sax、Jdom、Dom4j。鉴于目前的趋势，我们这里来讲讲Dom4J的用法，不涉及递归等复杂操作。  </p>
<a id="more"></a>
<h2 id="2-示例—解析xml文件"><a href="#2-示例—解析xml文件" class="headerlink" title="2.示例—解析xml文件"></a>2.示例—解析xml文件</h2><p>首先我们需要创建一个文档，然后才能对其解析。  </p>
<h3 id="2-1xml文档"><a href="#2-1xml文档" class="headerlink" title="2.1xml文档"></a>2.1xml文档</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;books&gt;
    &lt;book id=&quot;001&quot;&gt;
        &lt;title&gt;Harry Potter&lt;/title&gt;
        &lt;author&gt;J K.Rowling&lt;/author&gt;
    &lt;/book&gt;
    &lt;book id=&quot;002&quot;&gt;
        &lt;title&gt;Learning XML&lt;/title&gt;
        &lt;author&gt;Erik T.Ray&lt;/author&gt;
    &lt;/book&gt;
&lt;/books&gt;  
</code></pre><h3 id="2-2示例一、使用List列表方式来解析xml"><a href="#2-2示例一、使用List列表方式来解析xml" class="headerlink" title="2.2示例一、使用List列表方式来解析xml"></a>2.2示例一、使用List列表方式来解析xml</h3><p><img src="http://od2xrf8gr.bkt.clouddn.com/%E4%BD%BF%E7%94%A8list%E9%9B%86%E5%90%88%E6%96%B9%E6%B3%95%E6%9D%A5%E8%A7%A3%E6%9E%90xml%28%E5%B7%B2%E7%9F%A5%E5%B1%9E%E6%80%A7%29.png" alt="">  </p>
<p>以上方式是我们在知道xml文件中的详细内容(如根元素名字、根元素中包含的子元素、子元素的属性名、子元素中又包含子元素的元素名即文本内容)时采用的代码。但当我们不知道xml中的详细信息时，我们应该采用如下方式来解析xml。  </p>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/%E4%B8%8D%E7%9F%A5%E9%81%93%E5%AD%90%E5%85%83%E7%B4%A0%20%E7%94%A8list%E9%81%8D%E5%8E%86xml%E5%85%83%E7%B4%A0.png" alt=""></p>
<h3 id="2-3示例二、使用迭代器Iterator来解析xml"><a href="#2-3示例二、使用迭代器Iterator来解析xml" class="headerlink" title="2.3示例二、使用迭代器Iterator来解析xml"></a>2.3示例二、使用迭代器Iterator来解析xml</h3><p><img src="http://od2xrf8gr.bkt.clouddn.com/%E7%9F%A5%E9%81%93%E5%B1%9E%E6%80%A7%E4%BD%BF%E7%94%A8iterator.png" alt=""></p>
<p>同示例一，以上代码也是我们在知道xml文本详细内容后采用的代码。当我们不知道xml中的详细信息时，我们应该采用如下代码方式来解析xml。<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E4%B8%8D%E7%9F%A5%E9%81%93%E5%B1%9E%E6%80%A7%E7%A7%81%E7%94%A8iterator.png" alt="">  </p>
<p>运行结果如下:  </p>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt=""></p>
<h2 id="3-示例—生成xml文件"><a href="#3-示例—生成xml文件" class="headerlink" title="3.示例—生成xml文件"></a>3.示例—生成xml文件</h2><p><img src="http://od2xrf8gr.bkt.clouddn.com/%E7%94%9F%E6%88%90xml%E6%96%87%E4%BB%B6.png" alt="">  </p>
<p>运行代码后在桌面的dom4j种即可看到如下内容:  </p>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C2.png" alt="">  </p>
<p><strong>说明:</strong>我这里用的是mac系统，文件路径是:/Users/codingBoy/Desktop/dom4j.xml，上图中的路径打错，这个才是正确的路径.</p>
<h2 id="4-联系"><a href="#4-联系" class="headerlink" title="4.联系"></a>4.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">博客:codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">微博@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">知乎@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a> </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaWeb学习笔记之EL表达式]]></title>
      <url>http://codingxiaxw.cn/archives/2016/10/03/12-EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>EL，即Expression Language。在JavaWeb中属于JSP技术。  </p>
<p>JSP中的表达式:Java脚本表达式<code>&lt;%=Java表达式%&gt;</code>;EL表达式<code>${EL表达式}</code>。  </p>
<a id="more"></a>
<p>JavaWeb中最好不要在JSP中写JSP代码，所以用EL表达式来替代Java表达式。  </p>
<h2 id="2-语法及用法"><a href="#2-语法及用法" class="headerlink" title="2.语法及用法"></a>2.语法及用法</h2><h3 id="2-1获取某个对象的值，并将其输出到页面上。"><a href="#2-1获取某个对象的值，并将其输出到页面上。" class="headerlink" title="2.1获取某个对象的值，并将其输出到页面上。"></a>2.1获取某个对象的值，并将其输出到页面上。</h3><ul>
<li>1.点运算符:<code>${stu.name}</code>，即调用域中<code>stu</code>对应的对象的<code>name</code>的读属性<code>getName()</code>。但，若stu在4个域中没有绑定相应对象，那么就在网页上输出空字符串(即什么都不输出)。  </li>
</ul>
<p><code>${stu.name}</code>相当于:  </p>
<pre><code>&lt;%  
Student stu=pageContext.getAttribute(&quot;stu&quot;);  
if(stu!=null) out.println(stu.getName());  
%&gt;
</code></pre><ul>
<li>2.[]运算符:<code>${stu[&#39;name&#39;]}</code>或者<code>${stu[&quot;name&quot;]}</code>。与点运算符作用一样，但当索引或者名称不符合Java名称规范时(如，获取数组中的某个值)，只能用[]运算符。</li>
<li>3.获取集合中的元素:List按照索引来获取元素:<code>${obj.list[1]}</code>，Map按照指定的key来获取元素:<code>${obj.map.key}</code>或者<code>${obj.map[&#39;key&#39;]}</code>。</li>
</ul>
<h3 id="2-2逻辑和数学运算"><a href="#2-2逻辑和数学运算" class="headerlink" title="2.2逻辑和数学运算"></a>2.2逻辑和数学运算</h3><ul>
<li>1.empty运算符:判断一个对象是否为null或者””，是则返回true，否则返回false。也可以判断一个数组和集合，当数组或集合对象不是null，但对象中没有原素也返回true。</li>
<li>2.数学运算符:<code>+-*/</code>。如<code>${i+1}</code></li>
<li>3.三元运算符:<code>${表达式?T表达式:F表达式}</code>。如<code>${a&gt;1?a+1:a-1}</code></li>
<li>4.不支持字符串连接。如<code>${str+str}</code>，这是错误的。</li>
</ul>
<h3 id="2-3、11个内置对象"><a href="#2-3、11个内置对象" class="headerlink" title="2.3、11个内置对象"></a>2.3、11个内置对象</h3><p>EL内置对象(或隐式对象)，即在EL表达式中可以直接调用的对象。总结起来就是有一个JSP对象，十个Map对象。</p>
<ul>
<li>pageContext:与JSP内置对象pageContext完全一样。</li>
<li>pageScope:当前页面的域对象的Map。</li>
<li>requestScope:请求域对象的Map。</li>
<li>sessionScope:会话域对象的Map。</li>
<li>applicationScope:应用域对象的Map。</li>
<li>param:请求参数的Map，key为请求参数名，value为请求参数的值。</li>
<li>paramValues:请求参数(可重名)的<code>Map&lt;String,String[])</code>，key为请求参数名，value为请求参数的值数组。</li>
<li>header:请求消息头Map，key为请求头名，value为对应的值。</li>
<li>headerValues:请求消息头(可重名)的<code>Map&lt;String,String[]&gt;</code>，key为请求名，value为请求头值数组。</li>
<li>cookie:封装cookie的<code>Map&lt;String,Cookie&gt;</code>，key为cookie的name属性，value为cookie对象本身。</li>
<li>initParam:初始化参数的Map，在web.xml中的context-param元素中定义的初始化参数。</li>
</ul>
<h3 id="2-4自定义EL函数。"><a href="#2-4自定义EL函数。" class="headerlink" title="2.4自定义EL函数。"></a>2.4自定义EL函数。</h3><h4 id="第一步：定义一个有静态方法的类。"><a href="#第一步：定义一个有静态方法的类。" class="headerlink" title="第一步：定义一个有静态方法的类。"></a>第一步：定义一个有静态方法的类。</h4><pre><code>package net.codingXiax.util;  

public class StringUtil{  
  public static String toUppercase(String str){  
     return &quot;字符串&quot;;  
     }  
   }
</code></pre><h4 id="第二步-配置tld。"><a href="#第二步-配置tld。" class="headerlink" title="第二步:配置tld。"></a>第二步:配置tld。</h4><p>在Web-INF目录下(也可以在其他目录下，该目录下建立安全性更高)，建立一个扩展名为tld的xml文件。  </p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  
&lt;taglib xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot;  
        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  
        xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd&quot;  
        version=&quot;2.0&quot;&gt;  
        &lt;tlib-version&gt;1.0&lt;/tlib-version&gt;  
        &lt;short-name&gt;myfn&lt;/short-name&gt;  
        &lt;uri&gt;http://www.yrom.net/jsp/string/fn&lt;/uri&gt;  
        &lt;function&gt;  
              &lt;name&gt;toUppercase&lt;/name&gt;  
              &lt;function-class&gt;net.yrom.util.StringUtil&lt;/function-class&gt;  
              &lt;function-signature&gt;java.lang.String toUpperCase( java.lang.String )&lt;/function-signature&gt;  
        &lt;/function&gt;  
&lt;/taglib&gt;
</code></pre><h4 id="第三步-配置web-xml"><a href="#第三步-配置web-xml" class="headerlink" title="第三步:配置web.xml."></a>第三步:配置web.xml.</h4><p>如果tld文件是在Web-INF目录或类路径下，此步可跳过。  </p>
<pre><code>&lt;jsp-config&gt;
&lt;taglib&gt;
    &lt;taglib-uri&gt;http://www.yrom.net/jsp/string/fn&lt;/taglib-uri&gt;
    &lt;taglib-location&gt;/WEB-INF/myfn.tld&lt;/taglib-location&gt;
&lt;/taglib&gt;  
&lt;/jsp-config&gt;
</code></pre><h4 id="第四步：在JSP中使用。"><a href="#第四步：在JSP中使用。" class="headerlink" title="第四步：在JSP中使用。"></a>第四步：在JSP中使用。</h4><p>注意应先用taglib指令引入该uri。  </p>
<pre><code>&lt;%@ taglib uri=&quot;/该tld所在位置&quot; prefix=&quot;myfn&quot; %&gt;  
...  
&lt;body&gt;  
&lt;%  
   pageContext.setAttribute(&quot;a&quot;,&quot;aaa&quot;);  
%&gt;  
   ${myfn:toUppercase(a)}  
&lt;/body&gt;  
...  
</code></pre><h3 id="2-5JSTL标签库"><a href="#2-5JSTL标签库" class="headerlink" title="2.5JSTL标签库"></a>2.5JSTL标签库</h3><p>JSTL标签库将在下篇文章<a href="">JavaWeb学习笔记之JSTL标签库</a>中详细介绍。</p>
<hr>
<h2 id="3-联系"><a href="#3-联系" class="headerlink" title="3.联系"></a>3.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">博客:codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">微博@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">知乎@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java学习笔记之反射机制]]></title>
      <url>http://codingxiaxw.cn/archives/2016/10/02/11-java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h2 id="理论介绍"><a href="#理论介绍" class="headerlink" title="理论介绍"></a>理论介绍</h2><p>为了便于理解，在给出代码例子之前，首先用文字给大家说说关于”Java反射机制”的理论介绍。  </p>
<p>Java反射是Java语言的一个很重要的特征，它使得Java具有了“动态性”。  </p>
<a id="more"></a>
<p>在Java运行时环境中，对于一个类，能否知道这个类有哪些属性和方法？对于任意一个对象，能否调用它的任意一个方法？答案是肯定的。这种动态获取类的信息以及动态调用对象的方法的功能来自于Java语言的反射(Reflection)机制。  </p>
<p>Java反射机制主要提供了以下功能:  </p>
<ul>
<li>在运行时判断任意一个对象所属的类。</li>
<li>在运行时构造任意一个类的对象。</li>
<li>在运行时判断任意一个类所具有的成员变量和方法。</li>
<li>在运行时调用任意一个对象的方法。  </li>
</ul>
<p>Reflection是Java被视为动态(或准动态)语言的一个关键性质。这个机制允许程序在运行时透过Reflection APIs取得任何一个已知名称的class的内部信息，包括modifiers(诸如public,static等等)、superclass(例如Object)、实现之interfaces(例如Serializable)，也包括fields和methods的所有信息，并可于运行时改变fields内容或调用methods。  </p>
<p>一般而言，开发者社群说到动态语言，大致认同的一个定义是:“程序运行时，允许改变程序结构或变凉类型，这种语言成为动态语言”。从这个观点看，Java就不是动态语言。  </p>
<p>尽管在这样的定义与分类下Java不是动态语言，它却有着一个非常突出的动态相关机制:Reflection。这个字的意思是“反射、映像、倒影”，用在Java身上指的是我们可以于运行时加载、探知、使用编译器件完全未知的classes。换句话说，Java程序可以加在一个运行时才得知名称的class，获悉其完整构造(但不包括methods定义)，并生成其对象实体、或对其fields设值、或唤起其methods。这种“看透class”的能力(the ability of the program to examine itselt)被称为introspection(内省、内观、反省)。Reflection和introspection是常被并提的两个术语。  </p>
<p>在JDK中，主要由以下类来实现Java反射机制，这些类都位于java.lang.reflet包中:  </p>
<ul>
<li>Class类：代表一个类。</li>
<li>field类：代表类的成员变量(成员变量也被称为类的属性)</li>
<li>Method类：代表类的方法。</li>
<li>Constructor类：代表类的构造方法。</li>
<li>Array类：提供了动态创建数组，以及访问数组的元素的静态方法。  </li>
</ul>
<h3 id="获得Class对象"><a href="#获得Class对象" class="headerlink" title="获得Class对象"></a>获得Class对象</h3><p>Java中每个类被加载之后，系统就会为该类声称一个对应的Class对象，通过该Class对象就可以访问到JVM中的这个类。在Java程序中获得Class对象通常有如下三种方式。  </p>
<ul>
<li><p>1.使用Class类的forName(String clazzName)静态方法。该方法需要传入字符串参数，该字符串参数的值是某个类的全限定类名(必须包括完整包名)。  </p>
<blockquote>
<p>代码示例：Class clazz=Class.forName(“demo.Person”);”Demo”代表包名，”Person”代表类名。  </p>
</blockquote>
</li>
<li><p>2.调用某个类的class属性来获取该类对应的Class对象，例如，Person.class将会返回Person类对应的Class对象。  </p>
<blockquote>
<p>代码示例：Class clazz=Person.class;  </p>
</blockquote>
</li>
<li><p>3.调用某个对象的getClass()方法，该方法是java.lang.Object类中的一个方法，所以所有的Java对象都可以调用该方法，该方法将会返回该对象所属类对应的Class对象。  </p>
<blockquote>
<p>代码示例:Person person=new Person();<br>Class clazz=person.getClass();  </p>
</blockquote>
</li>
</ul>
<p>Class对象可以获得该类里的方法(由Method对象表示)、构造器(由Constructor对象表示)、成员变量(由Field)对象表示，这三个类都位于java.lang.reflect包下并实现了java.lang.reflect.Member接口。程序可以通过Method对象来执行对应的方法，通过Constructor对象来调用对应的构造器创建实例，能通过Field对象直接访问并修改对象的成员变量值。  </p>
<h3 id="创建实例对象"><a href="#创建实例对象" class="headerlink" title="创建实例对象"></a>创建实例对象</h3><p>通过反射来生成实例对象有如下两种方式。  </p>
<ul>
<li><p>1.使用Class对象的newInstance()方法来创建该Class对应类的实例，这种方式要求该Class对象的对应类有默认构造器，而执行newInstance()时实际上是利用默认构造器来创建该类的实例。  </p>
<blockquote>
<p>代码示例:Class clazz=Person.class;<br>Object obj=clazz.newInstance();  </p>
</blockquote>
</li>
<li><p>2.先使用Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法来创建该Class对象对应类的实例。通过这种方式可以选择使用指定的构造器来创建实例。  </p>
<blockquote>
<p>代码示例:Class clazz=Person.class;<br>Constructor constructor=clazz.getConstructor(String.class);<br>Object obj=constructor.newInstance();  </p>
</blockquote>
</li>
</ul>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>理论说了这么多，接下来给个很全的案例大家看，毕竟”Talk is cheap,show me your code”。相信看了这个案例你们就会掌握对Java的反射机制了，我这里参考的是CSDN上的一篇文章，就不重复造轮子了直接给链接你们去看他写的代码。<a href="http://blog.csdn.net/ljphhj/article/details/12858767" target="_blank" rel="external">一个例子让你了解Java反射机制</a>。</p>
<hr>
<h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p> If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">博客:codingXiaxw的博客</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">微博@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">知乎@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a> </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java随机生成图片与HTML表单中的验证码实现]]></title>
      <url>http://codingxiaxw.cn/archives/2016/09/30/10-Java%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87%E4%B8%8EHTML%E8%A1%A8%E5%8D%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h2 id="Java随机生成图片"><a href="#Java随机生成图片" class="headerlink" title="Java随机生成图片"></a>Java随机生成图片</h2><p>用Java语言生成一个带有字符串文本的图片总结来说只需要如下四步:</p>
<ul>
<li>1.创建图片缓冲区</li>
<li>2.设置图片缓冲区的宽高及保存图片的类型</li>
<li>3.得到这个图片的绘制环境(拿到画笔)</li>
<li>4.将图片保存起来</li>
</ul>
<p>代码如下:<br><a id="more"></a></p>
<pre><code>//第一、二步，传入参数为缓冲区宽、高、保存图片类型
BufferedImage image=new BufferedImage(width1,height1,BufferedImage.TYPE_INT_RGB);

//第三步，得到绘制环境(需要用到Graphics类)
Graphics paint=image.getGraphics();
paint.setColor(Color.WHITE);//设置画笔颜色为白色
paint.fillRect(start,end,width2,height2);//绘制矩形并填充，将图片缓冲区的(start,end)坐标作为绘制图片的左上角坐标，绘制图片宽为width2、高为height2
paint.setColor(Color.RED);//设置画笔颜色为红色
paint.drawString(str,x,y);//设置需要绘制在图片上的文本，参数为字符串、字符串所在的x坐标和y坐标

//第四步，将图片保存起来(需要用到ImageIO类)
ImageIO.write(image,&quot;JPEG&quot;,out);//参数为图片缓冲区、图片类型、输出流  
</code></pre><p>通过以上代码便可实现用java语言生成一个简易的带有字符串文本的图片，具体实现如下，首先在IDEA中创建VerifyCode.java类:<br>    <img src="http://od2xrf8gr.bkt.clouddn.com/verify1.png" alt=""><br>    有错误，请将g.drawStrig(sb.toString(),width/4,height-5);改为g.drawString(str,i*width/4,height-5);<br>    <img src="http://od2xrf8gr.bkt.clouddn.com/verify2.png" alt=""><br>    <img src="http://od2xrf8gr.bkt.clouddn.com/verify3.png" alt="">  </p>
<p>通过代码<code>VerifyCode vc=new VerifyCode();</code>创建VerifyCode对象后就可以调用上述所有方法便可以实现随机验证码的图片了。  </p>
<h2 id="在HTML表单中实现验证码"><a href="#在HTML表单中实现验证码" class="headerlink" title="在HTML表单中实现验证码"></a>在HTML表单中实现验证码</h2><p>借用上篇<a href="">Java Web学习笔记之session入门</a>中的保存用户登录信息案例中的代码，新增:  </p>
<ul>
<li>VerifyServlet.java:生成图片，保存图片上的文本到session域中，将图片响应给客户端。</li>
<li>LoginServlet.java中新增作用:判断用户输入的验证码是否正确，若正确则跳转至下一链接，若错误则保存错误信息到request域中，然后请求转发至login.jsp登录页面。  </li>
</ul>
<p>代码如下图:  </p>
<div align="center">VerifyServlet.java</div>

<p><img src="http://od2xrf8gr.bkt.clouddn.com/verifyServlet.png" alt="">  </p>
<div align="center">LoginServlet.java</div>  

<p><img src="http://od2xrf8gr.bkt.clouddn.com/LoginServlet2.png" alt="">  </p>
<p><div align="center">login.jsp(用到了javascript语法来更换验证码)</div><br><img src="http://od2xrf8gr.bkt.clouddn.com/loginJsp.png" alt=""><br>10月8日更正:途中的js代码有错误，将”ducument”改为”document”。  </p>
<p>通过如上代码便可实现HTML中的验证码效果。</p>
<hr>
<h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">博客: codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">微博 @codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">知乎 @codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github @codingXiaxw</a> </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Web学习笔记之session入门]]></title>
      <url>http://codingxiaxw.cn/archives/2016/09/27/9-java-web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bsession%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="1-HttpSession概述"><a href="#1-HttpSession概述" class="headerlink" title="1.HttpSession概述"></a>1.HttpSession概述</h2><ul>
<li>HttpSession是由JavaWeb提供的，用来会话跟踪的类。session是服务器端对象，保存在服务器端。</li>
<li>HttpSession是Servlet三大域对象(request、session、application)之一，所以它也有setAttribute()、getAttribute()、removeAttribute()三个方法。</li>
<li><p>HttpSession底层依赖Cookie，或是URL重写。 </p>
<a id="more"></a> 
</li>
</ul>
<h2 id="2-HttpSession的作用"><a href="#2-HttpSession的作用" class="headerlink" title="2.HttpSession的作用"></a>2.HttpSession的作用</h2><ul>
<li>会话范围:会话范围是某个用户从首次访问服务器开始，到该用户关闭浏览器结束。(会话:一个用户对服务器的多次连贯性请求！所谓连贯请求，就是该用户多次请求 中间没有关闭浏览器)  </li>
<li>服务器会为每个客户端创建一个session对象，session就好比客户在服务器端的账户，它们被服务器保存到一个Map中，这个Map被称之为session缓存。  <ul>
<li>Servlet中得到session对象的方法为:HttpSession session=request.getSession();</li>
<li>Jsp中得到session对象的方法:session是JSP内置对象之一，不用创建就可以直接使用。  </li>
</ul>
</li>
<li>session域相关方法:  <ul>
<li>void setAttribute(String name,Object value);</li>
<li>Object getAttribute(String name);</li>
<li>void removeAttribute(String name);  </li>
</ul>
</li>
</ul>
<h2 id="3-案例-演示保存用户登录信息"><a href="#3-案例-演示保存用户登录信息" class="headerlink" title="3.案例:演示保存用户登录信息"></a>3.案例:演示保存用户登录信息</h2><ul>
<li>案例相关页面和Servlet:  <ul>
<li>login.jsp:登录页面</li>
<li>succ1.jsp:只有登录成功才能访问的页面</li>
<li>LoginServlet:效验用户是否登录成功(这里随便判断的，以后学了数据库后可以根据该用户名和密码是否和数据库中的用户名和密码匹配来判断)</li>
</ul>
</li>
<li>各页面和Servlet内容:  <ul>
<li>login.jsp:提供登录表单，提交表单请求至LoginServlet</li>
<li>LoginServlet：获取请求参数，效验用户是否登录成功  <blockquote>
<p>失败:保存错误信息到request域，转发到login.jsp。(login.jsp中显示request域中的错误信息)<br>成功:保存用户信息到sussion域中，重定向到succ1.jsp页面，显示session域中的用户信息。</p>
</blockquote>
</li>
<li>succ1.jsp:从session域中获取用户信息，如果不存在，显示“您还没有登录”，存在则显示用户信息。  </li>
</ul>
</li>
</ul>
<h3 id="各页面代码如下"><a href="#各页面代码如下" class="headerlink" title="各页面代码如下:"></a>各页面代码如下:</h3><p><font align="center">login.jsp</font><br><img src="http://od2xrf8gr.bkt.clouddn.com/login.png" alt="">  </p>
<p><font align="center">LoginServlet.java</font><br><img src="http://od2xrf8gr.bkt.clouddn.com/loginservlet.png" alt="">  </p>
<p><font align="center">succ1.jsp</font><br><img src="http://od2xrf8gr.bkt.clouddn.com/succ1.png" alt="">  </p>
<h2 id="4-HttpSession的原理-需要理解"><a href="#4-HttpSession的原理-需要理解" class="headerlink" title="4.HttpSession的原理(需要理解)"></a>4.HttpSession的原理(需要理解)</h2><h3 id="初入HttpSession原理"><a href="#初入HttpSession原理" class="headerlink" title="初入HttpSession原理"></a>初入HttpSession原理</h3><blockquote>
<p>1.每当客户端与服务器建立了一个会话，服务器就会为该客户端建立一个session对象，将session对象保存在服务器端的同时服务器还会给客户端发送一个带有JSESSIONID的Cookie(放在响应头中)；2.当客户端在不关闭浏览器的情况下再次访问该服务器时，客户端就会通过这个JSESSIONID来取出保存在服务器端相应session对象。3.当客户关闭了浏览器时，意味着与服务器断开连接然后会话session也随着就结束了，此时能识别存在服务器端的HttpSession对象的JSESSIONID也就跟着丢失了。4.但是此HttpSession对象依旧保存在服务器端。5.当再次打开浏览器时，就会重新建立新连接，服务器给过来的JSESSIONID也是新的了。  </p>
<p>这就好比你第一次去银行办卡，1.银行给你办了一张带有独特帐号的银行卡(JSESSIONID)然后你回家了，你存在银行卡里的钱保存在银行里(相应的HttpSession对象)(对应上面的步骤1)；2.当你再次访问该银行取钱时，你首先要给银行你的带有独特帐号的银行卡(将JSESSIONID给服务器),然后银行会给你要取的钱(获取相应的HttpSession对象)(对应上面的步骤2)。3.当你丢失了你的银行卡，而银行的工作人员又不小心在数据库中删除了你银行卡对应的帐号(对应上面的步骤3关闭浏览器)。4.但是你的钱还保存在银行里(对应上面的步骤4)。5.这时当你再次返回该银行时，你就需要重新办一张银行卡(由于工作人员删除了你原先的帐号所以不能补办),并且新办理的银行卡会对应新的帐号(新的JSESSIONID)。  </p>
</blockquote>
<p>对于断开连接后保存在服务器端的HttpSession对象不会一直存在，它有它的生命时间，一般为30分钟，到达这个时间后服务器端就会将它删除。还有一种情况就是当客户端与服务器建立一个会话后，但是该客户却很长时间不对服务器发请求，当时间到达该session对象存活的时间后服务器也会删除该session对象。就比如你登录了淘宝的主页，然后你半天时间不去碰电脑，当你想起要去购物时，你点击一个超链接后服务器就会要求你重新登录，因为由于你长时间不给服务器发起请求，服务器就误认为这是一个没用的session，然后服务器就将它删了。  </p>
<h3 id="深入HttpSession原理"><a href="#深入HttpSession原理" class="headerlink" title="深入HttpSession原理"></a>深入HttpSession原理</h3><p>首先纠正下上面的一句话，其实当客户端与服务器建立连接时，虽然会话是建立了但是服务器不会立刻建立HttpSession对象(因为对象在服务器端存活时间较长，所以服务器没那么傻)，只有当客户端请求的Servlet中调用了request.getSession()方法要求获取HttpSession对象时服务器才会创建；但是若请求的是jsp页面，则服务器会立刻创建HttpSession对象，因为jsp对应的Servlet类中已经默认调用了request.getSession()。  </p>
<p>调用request.getSession()方法后服务器的做法  </p>
<ul>
<li>获取Cookie中的JSESSIONID，需要判断:  <ol>
<li>如果JSESSIONID不存在，则创建session，把session保存起来并把新创建的JSESSIONID保存到Cookie中。</li>
<li>如果JSESSIONID存在，通过JSESSIONID查找session对象，如果没有查找到，则创建session并保存起来，把新创建的JSESSIONID保存到Cookie中。</li>
<li>如果JSESSIONID存在，通过JSESSIONID查找到了session对象，那么就不会再创建session对象了。  </li>
</ol>
</li>
</ul>
<h2 id="5-HttpSession的其它方法"><a href="#5-HttpSession的其它方法" class="headerlink" title="5.HttpSession的其它方法"></a>5.HttpSession的其它方法</h2><ul>
<li>String getId():获取JSESSIONID。</li>
<li>int getMaxInactiveInterval():获取session可以的最大不活动时间(秒),默认为30分钟，当session在30分钟内没有使用，哪么Tomcat会在session缓存中删掉这个session。</li>
<li>void invalidate():让session失效。调用这个方法会被session失效，当session失效后，客户端再次请求，服务器会给客户端创建一个新的session，并在响应中创建一个新的JSESSIONID。</li>
<li>boolean isNew():查看session是否为新。当客户端第一次请求时，服务器为客户端创建session，并把JSESSIONID存在Cookie中发给客户端，这时调用这个方法返回的就是新session；当再次发起请求时，JSESSIONID放在Cookie中作为请求头发给服务器，这时调用此方法，返回的就是false，即此session不是新的。  </li>
</ul>
<hr>
<h2 id="6-联系"><a href="#6-联系" class="headerlink" title="6.联系"></a>6.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">博客:codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">微博@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">知乎@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a> </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Web读书笔记之Cookie入门]]></title>
      <url>http://codingxiaxw.cn/archives/2016/09/27/8-java-web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8BCookie%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="1-Http协议与Cookie-了解"><a href="#1-Http协议与Cookie-了解" class="headerlink" title="1.Http协议与Cookie(了解)"></a>1.Http协议与Cookie(了解)</h2><ol>
<li>Cookie是Http协议制定的。先有服务器保存Cookie到浏览器，再下次浏览器请求服务器时把上一次请求得到的Cookie归还给服务器。</li>
<li><p>由服务器创建保存到客户端的一个键值对。服务器保存Cookie的响应头,使用response发送响应头:Set-Cookie:aaa=AAA;Set-Cookie:bbb=BBB;例如:  </p>
<pre><code>response.addHeader(&quot;Set-Cookie&quot;,&quot;aaa=AAA&quot;);
response.addHeader(&quot;Set-Cookie&quot;,&quot;bbb=BBB&quot;);
</code></pre></li>
</ol>
 <a id="more"></a>
<ol>
<li>当浏览器请求服务器时，会把该服务器保存的Cookie随请求发送给服务器。浏览器归还Cookie的请求头:Cookie:aaa=AAA;bbb=BBB。多个键值对间用分号隔开。</li>
<li>Http协议规定(为了不给浏览器太大压力)  <ul>
<li>1个Cookie最大4KB</li>
<li>1个服务器最多向1个浏览器保存20个Cookie</li>
<li>1个浏览器最多可以保存300个Cookie  </li>
</ul>
</li>
</ol>
<h2 id="2-Cookie的用途"><a href="#2-Cookie的用途" class="headerlink" title="2.Cookie的用途"></a>2.Cookie的用途</h2><ul>
<li>服务器使用Cookie来跟踪客户端状态。</li>
<li>保存购物车(购物车中的商品不能使用request域来保存，因为它是一个用户向服务器发送的多个请求信息)</li>
<li>显示上次登录用户名(并记住密码)  </li>
</ul>
<h2 id="3-Java-Web中使用Cookie"><a href="#3-Java-Web中使用Cookie" class="headerlink" title="3.Java Web中使用Cookie"></a>3.Java Web中使用Cookie</h2><ul>
<li>原始的方式:  <ul>
<li>使用response发送Set-Cookie响应头。</li>
<li>使用request获取请求头。</li>
</ul>
</li>
<li>便捷方式:<ul>
<li>使用response.addCookie()方法向浏览器保存Cookie。</li>
<li>使用request.getCookies()方法获取浏览器归还的Cookie，返回的对象为Cookie数组。若没有Cookie则返回NULL。  </li>
</ul>
</li>
</ul>
<h2 id="4-Cookie详解"><a href="#4-Cookie详解" class="headerlink" title="4.Cookie详解"></a>4.Cookie详解</h2><ol>
<li>Cookie不只有name和value两个属性。</li>
<li>Cookie的maxAge:指Cookie的最大生命，即Cookie可保存在客户端中的最大时长，以秒为单位。<ul>
<li>maxAge&gt;0:浏览器会把Cookie保存到客户端硬盘上，有效时长为maxAge的值决定，例如:cookie.setMaxAge(60)表示这个Cookie会被浏览器保存到硬盘上60秒。</li>
<li>maxAge&lt;0:Cookie只会在浏览器内存中存在，当用户关闭浏览器时浏览器进程结束，同时Cookie也就死亡了。</li>
<li>maxAge=0:浏览器会马上删除这个Cookie。  </li>
</ul>
</li>
</ol>
<hr>
<h2 id="5-联系"><a href="#5-联系" class="headerlink" title="5.联系"></a>5.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">博客:codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">微博@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">知乎@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a> </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Web中的Servlet请求转发和请求包含]]></title>
      <url>http://codingxiaxw.cn/archives/2016/09/26/7-java-web%E4%B8%AD%E7%9A%84Servlet%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E4%B8%8E%E8%AF%B7%E6%B1%82%E5%8C%85%E5%90%AB/</url>
      <content type="html"><![CDATA[<p>为什么需要这样的操作呢？因为很多时候一个请求需要多个Servlet协作才能完成，所以需要在一个Servlet中跳转到另一个Servlet中处理。  </p>
<h2 id="1-格式"><a href="#1-格式" class="headerlink" title="1.格式"></a>1.格式</h2><p>首先调用request的getRequestDispatcher(“参数”)方法，获取到一个RequestDispatcher对象:  </p>
<pre><code>ResquestDispatcher rd=request.getRequestDispatcher(&quot;/MyServlet&quot;);  
</code></pre><p>参数为被包含或被转发的目标Servlet路径。  </p>
<a id="more"></a>
<p>若是请求转发，接下来输入  </p>
<pre><code>rd.forward(request,response);  
</code></pre><p>若是请求包含，接下来输入  </p>
<pre><code>rd.include(request,response);  
</code></pre><p>即可完成我们的请求转发和请求包含。二者的区别为:  </p>
<ul>
<li>请求转发:由当前Servlet设置响应头(不能设置响应体)，下一个Servlet既可设置响应头也可设置响应体。  </li>
<li>请求包含:当前Servlet和下一个Servlet共同完成相应头和响应体。  </li>
</ul>
<p>需要注意的是无论是请求转发还是请求包含，都在一个请求范围内，所以多个Servlet中使用的是同一个request和response。  </p>
<h2 id="2-请求转发"><a href="#2-请求转发" class="headerlink" title="2.请求转发"></a>2.请求转发</h2><p>OneServlet代码如下:<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91One.png" alt="">  </p>
<p>TwoServlet代码如下:<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E8%AF%B7%E6%B1%82%E5%8C%85%E5%90%ABtwo.png" alt="">  </p>
<p>网页响应结果为:<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E7%BB%93%E6%9E%9C.png" alt="">  </p>
<p>由响应结果我们可以看到OneServlet中设置的响应体没有在网页中显示出来，只有TwoServlet中设置的响应体显示出来了。  </p>
<h2 id="3-请求包含"><a href="#3-请求包含" class="headerlink" title="3.请求包含"></a>3.请求包含</h2><p>请求包含和请求转发中代码相比，只是在OneServlet中将forward()方法改为include()方法而已。  </p>
<p>OneServlet中代码:<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E8%AF%B7%E6%B1%82%E5%8C%85%E5%90%ABOne.png" alt="">  </p>
<p>TwoServlet中代码:<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E8%AF%B7%E6%B1%82%E5%8C%85%E5%90%ABtwo.png" alt="">  </p>
<p>网页响应结果为:<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E8%AF%B7%E6%B1%82%E5%8C%85%E5%90%AB%E5%93%8D%E5%BA%94%E7%BB%93%E6%9E%9C.png" alt="">  </p>
<p>从响应结果中我们可以看到在OneServlet和TwoServlet中设置的响应体都显示了出来。  </p>
<h2 id="4-请求转发和重定向的区别"><a href="#4-请求转发和重定向的区别" class="headerlink" title="4.请求转发和重定向的区别"></a>4.请求转发和重定向的区别</h2><ol>
<li>请求转发是一个请求一次响应，而重定向是两次请求两次响应。</li>
<li>请求转发地址栏不变化，而重定向会显示后一个请求的地址。 </li>
<li>请求转发智能转发到本项目其他Servlet，而重定向不只能重定向到本项目的其它Servlet，还能定向到其它项目。</li>
<li>请求转发是服务器端行为，只需各处转发的Servlet路径，而重定向需要给出requestURI,即包含项目名。</li>
<li>请求转发和重定向二者效率前者高，因为前者只发出一个请求。  <blockquote>
<p>很多时候我们需要地址栏发生变化，那时候必须使用重定向。<br>需要在下一个Servlet中获取到request域中的数据，必须用请求转发。  </p>
</blockquote>
</li>
</ol>
<p>既然请求转发和请求包含都是一个请求需要多个servlet协作完成，那么这些Servlet是如何传递数据的呢？见下文新概念。  </p>
<h2 id="5-request域"><a href="#5-request域" class="headerlink" title="5.request域"></a>5.request域</h2><p>何为域？上一篇文章中提到对ServletContext域对象(详见<a href="http://codingxiaxw.cn/2016/09/24/%E5%AE%9E%E7%8E%B0Servlet%E7%9A%84%E6%96%B9%E5%BC%8F/">Servlet的实现方式</a>)的介绍时已经说过域的功能，即具有能存数据和取数据的功能。  </p>
<p>同一请求范围内使用request.setAttribute()来传值、使用request.getAttribute()方法来取值.即前一个Servlet使用request.setAttribute()来传值、后一个Servlet使用request.getAttribute()方法来取值。而当想清除request中的值时，调用request.removeAttribute()方法即可清除。如下图:</p>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/request%E5%9F%9F%E6%96%B9%E6%B3%95.png" alt="">  </p>
<p>上图中三大域对象的生命周期长度为:  </p>
<pre><code>request&lt;session&lt;application  
</code></pre><p><strong>扩展:</strong>&nbsp;&nbsp;注意上图中三个方法和请求参数方法的区别，请求参数是客户端传给服务器的，我们不能修改；而此处的setAttribute()是我们自己设置的属性与属性值。另外Servlet类中有上述三大域，而JSP中有四大域，多了一个pageContext域。  </p>
<hr>
<h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">博客: codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">微博 @codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">知乎 @codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github @codingXiaxw</a> </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Web中实现Servlet的方式]]></title>
      <url>http://codingxiaxw.cn/archives/2016/09/24/6-java-web%E5%AE%9E%E7%8E%B0Servlet%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="1-Servlet是什么"><a href="#1-Servlet是什么" class="headerlink" title="1.Servlet是什么?"></a>1.Servlet是什么?</h2><p>Servlet是Java Web三大组件之一，它属于动态资源。Servlet的作用是处理请求，服务器会把接收到的请求交给Servlet来处理，在Servlet中通常需要:  </p>
<ul>
<li>接受数据请求</li>
<li>处理请求</li>
<li><p>完成响应  </p>
<a id="more"></a>
</li>
</ul>
<p>例如客户端发出登录请求，或者输入注册请求，这些请求都应该由Servlet来完成处理。当然Servlet类需要我们自己来编写，每个Servlet类都必须实现javax.servlet.Servlet接口。  </p>
<h2 id="2-实现Servlet的方式-需要我们自己来写"><a href="#2-实现Servlet的方式-需要我们自己来写" class="headerlink" title="2.实现Servlet的方式(需要我们自己来写)"></a>2.实现Servlet的方式(需要我们自己来写)</h2><ol>
<li>实现javax.servlet.Servlet接口;</li>
<li>继承javax.servlet.GenericServlet类;</li>
<li>继承javax.servlet.http.HttpServlet类;  </li>
</ol>
<p>一般来说我们都选择实现HttpServlet类来完成我们的Servlet，但学习Servlet还要从javax.servlet.Servlet接口来学起。  </p>
<h3 id="2-1实现javax-servlet-Servlet接口"><a href="#2-1实现javax-servlet-Servlet接口" class="headerlink" title="2.1实现javax.servlet.Servlet接口"></a>2.1实现javax.servlet.Servlet接口</h3><p>实现该接口的代码如下，需要实现该接口中的5个方法(各个方法的作用见注释)。  </p>
<p>   <img src="http://od2xrf8gr.bkt.clouddn.com/%E5%AE%9E%E7%8E%B0Servlet%E6%8E%A5%E5%8F%A3.png" alt="">  </p>
<p>其中只有三个生命周期的方法是由服务器(例如我用的Tomcat)在认为需要调用的时候自动调用的(即我们自己是无法调用的)，另外的两个方法由我们自己需要的时候调用。   </p>
<h3 id="2-2继承javax-servlet-GenericServlet类"><a href="#2-2继承javax-servlet-GenericServlet类" class="headerlink" title="2.2继承javax.servlet.GenericServlet类"></a>2.2继承javax.servlet.GenericServlet类</h3><p>有人会说，那我每次实现Servlet接口都要重写这5个方法岂不是很麻烦？那肯定麻烦！所以GenericServlet类派上用场了。  </p>
<p>GenericServlet类实现了Servlet接口，所以在GenericServlet类中实现了Servlet接口中的5个抽象方法，另外在GenerecServlet类中还定义了自己的方法，将其作为我们要定义的xxxServlet类的父类，这样我们在自己定义的xxxServlet类中便可以不用<strong>全部</strong>实现Servlet接口中的方法。  </p>
<p>GenericServlet类中的方法如下:<br><img src="http://od2xrf8gr.bkt.clouddn.com/GenericServlet%E7%B1%BB%E4%B8%AD%E7%9A%84%E5%85%A8%E9%83%A8%E6%96%B9%E6%B3%95.png" alt="">  </p>
<p>由图可知，GenericServlet类除了实现Servlet接口中的四个方法外，还定义了getInitParameter()返回Servlet的参数值、getInitParameterNames()返回Servlet的参数名、getServletName()返回Servlet名、getServletContext()返回Servlet上下文、不带参数的init()、log()等方法。这些自己定义的方法中，前面四个是ServletConfig接口中的方法，不带参数的init()方法跟Servlet接口中的init(ServletConfig config)方法要区别，在init()方法中，我们可以添加当xxxServlet被初始化的操作，此方法在初始化方法init(ServletConfig config)中被调用(若是文字解析看不懂见下图GenericServlet源代码中注释)。  </p>
<p>另外不知道你们发现了没有，图中只有service()方法属于抽象方法，所以当我们定义的xxxServlet类去继承GenericServlet类时我们只需重写这一个方法即可，其他方法可重写可不重写。  </p>
<p>另外附上GenericServlet类的源代码:<br><img src="http://od2xrf8gr.bkt.clouddn.com/GenericServlet%E7%B1%BB%E6%BA%90%E4%BB%A3%E7%A0%81.jpg" alt="">  </p>
<p>代码中的xxxServlet类即是我们自己定义的servlet类。  </p>
<p>扩展:<strong>对ServletContext的解释</strong>:  </p>
<p>服务器会为每个应用创建一个ServletContext对象，一个应用只有一个ServletContext对象！我们可以在N多个Servlet中来获取这个唯一的对象，使用它可以给多个Servlet传递数据。此对象在Tomcat(服务器)启动时就创建，在服务器关闭时就销毁。  </p>
<p>ContextServlet是Java Web四大域对象(PageContext、ServletRequest、HttpSession、ServletContext)之一，域对象所具有的特点是:  </p>
<ul>
<li>能够存数据</li>
<li>能够取数据  </li>
</ul>
<p>所有的域对象都有存取数据的功能，因为域对象内部有一个Map，用来存储数据，下面是ServletContext对象用来操作数据的方法:  </p>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/ServletContext%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95.png" alt="">  </p>
<p>扩展:<strong>Servlet类三大域:</strong>  </p>
<ul>
<li>request:在Servlet中直接用，因为实现的doPost()方法中有request这个参数。</li>
<li>session:在Servlet中通过<code>HttpSession session=request.getSession();</code>得到。</li>
<li>application:在Servlet中通过<code>ServletContext application=this.getServletContext();</code>得到。</li>
</ul>
<p>扩展:<strong>JSP中四大域</strong></p>
<ul>
<li>page域:即9大内置对象中的pageContext，为PageContext的实例。注意:“page域”不同于9大内置对象中“page”。</li>
<li>request域:即9大内置对象中的request，为HttpServletRequest的实例。</li>
<li>session域:即9大内置对象中的session,为HttpSession的实例。</li>
<li>application:即9大内置对象中的ServletContext的实例。</li>
</ul>
<h3 id="2-3-继承HttpServlet类"><a href="#2-3-继承HttpServlet类" class="headerlink" title="2.3.继承HttpServlet类"></a>2.3.继承HttpServlet类</h3><p>HttpServlet类是我们用到次数最多的，也是最简单的。由类名可知，该类总是跟http协议相关的。  </p>
<p>HttpServlet类中的方法如下图:<br><img src="http://od2xrf8gr.bkt.clouddn.com/httpservlet%E7%B1%BB%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95.png" alt=""><br>方法中值得我们注意的有doGet()、doPost()、还有两个service()方法。其中doGet()和doPost()方法是需要我们重写的，我来解释下两个service()方法的区别。  </p>
<p>估计你们从方法中的参数就知道他们的区别了吧，其中一个service()方法是Serlvet接口中的生命周期方法，另外一个是跟http协议有关的方法。二者方法的解释见下两站图的说明(图1中指出HttpServlet类是继承自GenderServlet类):<br><img src="http://od2xrf8gr.bkt.clouddn.com/httpServlet%E4%B8%AD%E5%AF%B9service%E6%96%B9%E6%B3%95%E7%9A%84%E8%A7%A3%E9%87%8A.png" alt=""><br>uml(时序图)如下:<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt=""><br>图中405的含义是说服务器不支持客户端(即浏览器)用此种方法访问。因为HttpServlet类的源代码中的doGet()和doPost()方法体里面就是这样写的，你在定义的xxxservlet中如果不重新重写这两个方法就会出现405的响应状态码。接下来我们看看如何继承HttpServlet类:<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E5%AE%9E%E7%8E%B0httpservlet%E7%B1%BB.png" alt=""><br>FServlet即为我们自己定义的servlet类，在doGet()方法和doPost()方法中即可写具体要进行的操作。  </p>
<p>如上三种方式便可实现我们自己定义的Servlet类。  </p>
<hr>
<h2 id="3-联系"><a href="#3-联系" class="headerlink" title="3.联系"></a>3.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">博客:codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">微博@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">知乎@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a> </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从Android开发转战Java Web]]></title>
      <url>http://codingxiaxw.cn/archives/2016/09/12/5-%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
      <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>&emsp;&emsp;一个伟大事迹的诞生总要牺牲点什么，William Henry Gates大学时选择休学而去搞开发，最后成就了自己的 SoftWare；Steven Jobs因父母财务紧张不得不辍学，最后成就了自己的apple；而我，一个平凡的在校大三狗，在Andriod开发的世界里摸黑打滚了大半年之后，在仔细的思考过后，而今打算放弃Android去选择Web开发(你以为我也要辍学去搞开发吗)。<img src="http://od2xrf8gr.bkt.clouddn.com/%E5%9D%8F%E7%AC%91.jpg" alt="">希望在接下来的日子里，能学有所得。 </p>
<a id="more"></a>
<h2 id="2-细数这一年来自己的经历"><a href="#2-细数这一年来自己的经历" class="headerlink" title="2.细数这一年来自己的经历:"></a>2.细数这一年来自己的经历:</h2><h3 id="2-1开发过的app"><a href="#2-1开发过的app" class="headerlink" title="2.1开发过的app"></a>2.1开发过的app</h3><ul>
<li>计算器</li>
<li>记事本</li>
<li>智能聊天机器人</li>
<li>天气预报</li>
<li>2048小游戏</li>
<li>知乎日报  </li>
</ul>
<h3 id="2-2学习过的网站"><a href="#2-2学习过的网站" class="headerlink" title="2.2学习过的网站"></a>2.2学习过的网站</h3><ul>
<li><a href="http://www.imooc.com/" target="_blank" rel="external">慕课网</a>  </li>
<li><a href="http://www.jikexueyuan.com/" target="_blank" rel="external">极客学院</a>  </li>
<li><a href="http://study.163.com/" target="_blank" rel="external">网易云课堂</a></li>
</ul>
<h3 id="2-3看过的书籍"><a href="#2-3看过的书籍" class="headerlink" title="2.3看过的书籍"></a>2.3看过的书籍</h3><p>有关java:  </p>
<ul>
<li>《java从入门到精通》  </li>
<li>《java疯狂讲义》  </li>
</ul>
<p>有关Android：</p>
<ul>
<li>《第一行代码》</li>
<li>《Android群英传》</li>
<li>《Android开发艺术探索》  </li>
</ul>
<p>这一年，开发进行的真的格外辛苦，从最开始立下的向Web开发的flag转战Android开发。这一年里，经常遇到调了几天几夜都还调不出来的bug，很是难受；看着书上那一串串乏味的代码和解说，真的很让人犯困；特别是当你的编程能力过了初级工程师的编程能力想要进阶的时候，看到那些源码真的让人很难受；很多时候想过放弃，但还是坚持了下来；因为当你完成一个功能而设计出一个app的时候，那种自豪感真的很让人兴奋。 </p>
<h2 id="3-做的好好的为什么要转？"><a href="#3-做的好好的为什么要转？" class="headerlink" title="3.做的好好的为什么要转？"></a>3.做的好好的为什么要转？</h2><p>纯属兴趣。  </p>
<p>做就要做到最好，我会依旧保持自己对编程的热爱之情，向大牛发展，争取在2018年毕业之际顺利进入自己梦想的大公司(当然BAT是首选啊哈哈）。  </p>
<p>人若没有理想，跟咸鱼有什么区别呢？  </p>
<hr>
<h2 id="4-联系"><a href="#4-联系" class="headerlink" title="4.联系"></a>4.联系</h2><p> If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">博客:codingXiaxw的博客</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">微博@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">知乎@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a> </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android中Activity的生命周期]]></title>
      <url>http://codingxiaxw.cn/archives/2016/09/07/4-Android%E4%B8%ADActivity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<p>刚刚在stormzhang的一篇叫    <strong><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650661665&amp;idx=1&amp;sn=8127335085ce285473eb5ba53663fc29&amp;scene=21#wechat_redirect" target="_blank" rel="external">android学到哪种程度可以去找工作</a></strong>中看到张哥提了这么一个观点<strong>如果我问你Android中Activity生命周期你还支支吾吾的那我就对你没什么兴趣了</strong>。吓得我赶紧在脑海中回顾了下有关activity生命周期的知识，便打算趁热打铁写下自己对activity生命周期的理解。    </p>
<a id="more"></a>
<h2 id="1-Activity形态"><a href="#1-Activity形态" class="headerlink" title="1.Activity形态"></a>1.Activity形态</h2><p>Activity一个最大的特点就是拥有多种形态，它可以在多种形态间进行切换，以此来控制自己的生命周期。    </p>
<ul>
<li><strong>Active/Running</strong><br>这时候，Activity处于Activity栈的最顶层，可见，并与用户进行交互。  </li>
<li><strong>Paused</strong><br>当Activity失去焦点，被一个新的非全屏的Activity或者一个透明的Activity放置在栈顶时，Activity就转化为Paused形态。但它只是失去了与用户交互的能力，所有状态信息，成员变量都还保持着，只有在系统内存极低的情况下，才会被系统回收掉。</li>
<li><strong>Stopped</strong><br>如果一个Activity被另一个Activity完全覆盖，那么Activity就会进入Stopped形态。此时，它不再可见，但却依然保持了所有状态信息和成员变量。</li>
<li><strong>Killed</strong><br>当Activity被系统回收掉或者Activity从来没有创建过，Activity就处于Killed形态。<br>由此可见，用户的不同动作，会让activity在这四种形态间切换。而开发者，虽然可以控制Activity如何“生”，却无法控制Activity何时“死”。  </li>
</ul>
<h2 id="2-Activity生命周期"><a href="#2-Activity生命周期" class="headerlink" title="2.Activity生命周期"></a>2.Activity生命周期</h2><p>Google给了我们一张图来揭示Activity生命周期，如图。<br><img src="http://od2xrf8gr.bkt.clouddn.com/android%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt=""><br>程序启动运行并结束上述生命周期的方法执行顺序是这样的：<br>onCreate()–&gt;onStart()–&gt;onResume()–&gt;onPause()–&gt;onStop()–&gt;onDestroy()，这张经典图众所周知，开发者当然不必实现所有的生命周期方法，但知道每一个生命周期状态的含义，可以让我们更好地掌控Activity，让它能更好地完成你所期望的效果。 </p>
<ul>
<li>onCreate():创建基本的UI元素。 </li>
<li>onPause与onStop:清除Activity的资源，避免浪费。</li>
<li>onResume():需要重新初始化在onPause()中释放的资源。</li>
<li>onStart():每当Activity由不可见到可见时，都会调用该方法。</li>
<li>onRestart():需要初始化在onStop()中释放的资源。</li>
<li>onDestroy():当活动完成或者被系统销毁的时候会调用该方法。  </li>
</ul>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><ol>
<li>在系统调用onCreate()方法之后，就会马上调用onStart()方法，然后继续调用onResume()方法以进入Resumed状态(也就是前面说的Active/Running形态),最后就会停在Resumed状态，完成启动。  </li>
<li>当栈顶的Activity部分不可见后，就会导致Activity进入Pause形态，此时就会调用onPause()方法，当结束阻塞后，就会调用onResume()方法来恢复到Resume形态。  </li>
<li>当栈顶的Activity由部分不可见(调用onPause())到完全不可见(调用OnStop())或者从可见(调用onResume())到完全不可见时，也就是停止过程，此时系统会调用onPause()方法和onStop()方法。  </li>
</ol>
<p>另外，由图可知，从可见到不可见中间一定会经过部分不可见也就是一定会调用onPause()方法，而不能直接从可见跳到完全不可见，可见系统在Activity不可见的时候一定会调用onPause()方法;而当Activity由不可见到可见时，系统会通过顺序依次调用onStoped()–&gt;onRestart()–&gt;onStart()。  </p>
<p>以上便是我对Android 中Activity生命周期的理解。  </p>
<hr>
<h2 id="4-联系"><a href="#4-联系" class="headerlink" title="4.联系"></a>4.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="www.codingxiaxw.cn">博客:codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">微博@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">知乎@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a> </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中String、StringBuilder和StringBuffer的区别]]></title>
      <url>http://codingxiaxw.cn/archives/2016/09/06/3-java%E4%B8%ADstring%E3%80%81StringBuffer%E5%92%8CStringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>  在网上查找知识点时很容易产生当时看了就会，下次又遇到这个知识点时却不得不再次上网查看这个知识点的毛病。于是打算以后将自己领悟不清的知识点写下来（相信这也是大多数人喜欢写博客的原因吧），一方面为了给后来者借鉴，另一方面也是为了自己加深印象和自己对知识的总结。  </p>
<p>  今天就来谈谈自己对java中String、StringBuilder和StringBuffer知识点的理解。  </p>
<ul>
<li><strong>String字符串常量</strong>  </li>
<li><strong>StringBuffer字符串变量(线程安全）</strong>  </li>
<li><p><strong>StringBuilder字符串变量（非线程安全）</strong>  </p>
<a id="more"></a>
</li>
</ul>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>所谓常量，即该对象的值已经被赋予了，不能再更改。若非要更改，则只能再重新创建另一个对象，在这个新创建的对象上再进行赋值。因此，每次在对String类型的对象进行改变的时候其实都等同于生成了一个新的String对象，然后将指针指向新的String对象，所以经常改变内容的字符串最好不要用String，因为每次生成对象都会对系统性能产生影响，特别当内存中无引用对象多了以后，JVM的GC就会开始工作，那速度是一定会相当慢的。  </p>
<h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>所谓变量，即是可以随时变化的量。如果对StringBuffer对象进行改变，每次结果都会对StringBuffer对象进行操作，而不是生成新的对象。所以一般字符串要经常变化的话我推荐使用StringBuffer。  </p>
<h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>StringBuilder和StringBuffer类功能基本相似，方法也差不多，主要区别在于StringBuffer类的方法是多线程安全的，而StringBuilder不是线程安全的，相比而言StringBuilder类会略微快一点。  </p>
<p><strong>题外话:</strong>现在很多互联网公司面试java的面试官都喜欢问这样一个问题,</p>
<blockquote>
<p>请你谈谈StringBuffer和StringBuilder的区别。  </p>
</blockquote>
<p>大多数人肯定会直接说前者是线程安全的而后者是非线程安全的。其实这个时候才是面试官真正想问的，他会顺着你的回答又问你，那请你谈谈什么是线程…balabalabala。哈哈，要想顺利通过面试，所以对知识的了解还是全面点吧～！  </p>
<hr>
<h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">博客:codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">微博@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">知乎@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a> </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac用户如何将自己的代码上传至github托管]]></title>
      <url>http://codingxiaxw.cn/archives/2016/04/09/2-mac%E7%94%A8%E6%88%B7%E5%A6%82%E4%BD%95%E5%B0%86%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%A3%E7%A0%81%E4%B8%8A%E4%BC%A0%E8%87%B3github%E6%89%98%E7%AE%A1/</url>
      <content type="html"><![CDATA[<p>  楼主刚开始试着想将自己的代码上传至github上的时候真的是个小白，google上面到处搜到处找资源。后来云里雾里的成功上传后，发现网络上介绍的大致有两种方法，一种方法是通过git命令行，另一种方法是通过下载github客户端。两种方法都很简单，也许你觉得我接下来介绍的很繁琐，但这是详细的表现，下面将详细介绍<strong>通过git命令行来上传自己的代码</strong>。</p>
<a id="more"></a>
<h2 id="通过git命令行。"><a href="#通过git命令行。" class="headerlink" title="通过git命令行。"></a>通过git命令行。</h2><p>其实git命令不用学太多，会基本的5、6个命令就好，经常用的有  </p>
<ol>
<li><strong>git init;</strong>(作用:初始化你的文件夹)</li>
<li><strong>git add;</strong>(作用：将你的仓库添加至远程)</li>
<li><strong>git commit -m “你想输入的信息”;</strong>(作用:将你的仓库提交至远程)</li>
<li><strong>git push origin master;</strong>(作用:将你的仓库推至github)<br>其实将你的代码上传至github上，按照这四个步骤便可以完成了，是不是很简单呢？  </li>
</ol>
<p><strong>请见详细步骤:</strong></p>
<p>首先，你想使用git总得在网页上下载个git吧？打开终端，输入以下命令并回车:  </p>
<table width="100%"><tr><td bgcolor="black"><font color="ffffff">ruby -e “$(curl -fsSL   <a href="https://raw.githubusercontent.com/Homebrew/install/master/install" target="_blank" rel="external">https://raw.githubusercontent.com/Homebrew/install/master/install</a>)”<br>brew install git</font></td></tr></table><br>如何看你是否安装好git了呢？打开你的终端，并输入如下命令<br> <table width="100%"><tr><td bgcolor="black"><font color="ffffff">git –version</font></td></tr></table><br>若出现类似下面的代码则代表你的git客户端安装成功。<br><table width="100%"><tr><td bgcolor="black"><font color="ffffff">zjcs-MacBook-Pro:zjc_HexoBlog zjc $ git –version<br>  git version 2.1.3.36.g8e36a6d</font></td></tr></table>   

<p>  接下来分别通过下面两个步骤即可完成将你的代码上传至github上。  </p>
<p>  1.克隆你github上面的项目到本地仓库，在命令行输入以下代码：git clone url 然后回车。 这时你就可以看到你的电脑上多了一个以你仓库命名的文件夹啦。（其中url指你github上面仓库的地址，点开你的仓库就可以看到你仓库的地址啦。）<br>  如我的仓库名称是: <img src="http://od2xrf8gr.bkt.clouddn.com/%E4%BB%93%E5%BA%93%E5%90%8D%E7%A7%B0.png" alt=""><br>  我的project仓库的地址是 <img src="http://od2xrf8gr.bkt.clouddn.com/%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.png" alt=""><br>  点击这个图标可以复制你仓库的url<br>  <img src="http://od2xrf8gr.bkt.clouddn.com/%E5%9B%BE%E6%A0%87.png" alt="">   </p>
<p>  2.首先要将你想上传的代码文件夹拖至这个新出现的仓库文件夹，然后在命令行输入:<br>  <table width="100%"><tr><td bgcolor="black"><font color="ffffff">cd 你的仓库文件夹名称</font></td></tr></table></p>
<p>  如我的就在命令行中输入:  </p>
  <table width="100%"><tr><td bgcolor="black"><font color="ffffff">cd projects</font></td></tr></table>


<p>  这时你命令行中的目录就会出现在你的仓库目录下。  </p>
<p>  接下来输入:  </p>
   <table width="100%"><tr><td bgcolor="black"><font color="ffffff">git add 你想上传的代码文件夹名称</font></td></tr></table>


<p>  或者是输入:<br>  <table width="100%"><tr><td bgcolor="black"><font color="ffffff">git add .</font></td></tr></table><br>(add后面的‘.’代表你仓库中的所有内容)   </p>
<p>  然后输入:  </p>
   <table width="100%"><tr><td bgcolor="black"><font color="ffffff">git commit -m “你想交代的内容”</font></td></tr></table>

<p>  最后输入:<br>  <table width="100%"><tr><td bgcolor="black"><font color="ffffff">git push origin master</font></td></tr></table>  </p>
<p>  一会儿后你就会在你github的仓库中看到你上传的代码文件夹啦。是不是都很简单呢！  </p>
<hr>
<h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p> If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by clicking  these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">博客:codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">微博@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">知乎@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a> </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[写博客也是一种生活方式]]></title>
      <url>http://codingxiaxw.cn/archives/2016/03/31/1-%E5%86%99%E5%8D%9A%E5%AE%A2%E4%B9%9F%E6%98%AF%E4%B8%80%E7%A7%8D%E7%94%9F%E6%B4%BB%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-coding-is-a-style-of-life"><a href="#emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-emsp-coding-is-a-style-of-life" class="headerlink" title="&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;coding is a style of life."></a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;coding is a style of life.</h1><p>&emsp;&emsp;hello guys,I’m codingXiaxw,who decide to write my own blog while I’m coding.As far as I’m concerned, writing blog is also a part of life.Everytime I felt tired,I would stop coding to play macdown,and then writed my feelings and reviews in it.In this way can I deepen the knowledges in my brain and can also make me relaxing.<br>&emsp;&emsp;Welcome to <a href="https://codingxiaxw.cn">codingXiaxw’s</a> blog website!Thank for you coming,and thank for your support.They are the energy to encourage me to move forward.<br>Today I will begin my blog journey，and I will update it frequently.   </p>
<a id="more"></a>
<p> －－－－－－－－－－－－－－－－－－－－－－－－－－－－－－<br>&emsp;&emsp;hello大家好，我是夏循武，打算以后在敲代码的同时开始写属于自己的博客。在我看来，写博客也是属于生活的一部分，每当我搬代码搬累了的时候，我都会停下步伐，打开markdown，写下自己的所感所想，将自己的学习经历写下来以及对之前所学知识加以整理，这样既可以加深对知识的巩固，也能放松自己.<br>&emsp;&emsp;欢迎来到我的博客站点，也感谢你的来访和支持。它们是鼓励我前进的动力。同时要感谢身边朋友们的支持与帮助，让我成为了现在的我.<br>&emsp;&emsp;今天我将开始我的博客旅程，并且我会经常更新它的。 </p>
<h3 id="现阶段"><a href="#现阶段" class="headerlink" title="现阶段:"></a>现阶段:</h3><p>&emsp;&emsp;研习 <strong>Android开发</strong>，正朝着进阶的方法加以奋斗。<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; </p>
<h3 id="编程有感"><a href="#编程有感" class="headerlink" title="编程有感:"></a>编程有感:</h3><p>我爱编程，我爱生活。(love coding , love life).</p>
<h3 id="坚信"><a href="#坚信" class="headerlink" title="坚信:"></a>坚信:</h3><ul>
<li>「持续」并不是坚持，写就是最好的回报</li>
</ul>
<h3 id="我的朋友们"><a href="#我的朋友们" class="headerlink" title="我的朋友们"></a>我的朋友们</h3><ul>
<li><a href="http://blog.csdn.net/laymat?viewmode=contents" target="_blank" rel="external">方正浩（laymat）</a></li>
</ul>
<h3 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h3><p> If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">博客:codingXiaxw的博客</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">微博@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">知乎@codingXiaxw</a>  </p>
</li>
<li><p><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a> </p>
</li>
<li><p>微信号：wu19961017</p>
</li>
<li><p>微信公众号：codingxiaxw</p>
</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
