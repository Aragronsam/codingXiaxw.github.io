<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[JavaWeb之JSTL标签库]]></title>
      <url>http://codingxiaxw.com/2016/10/30/29-JSTL%E6%A0%87%E7%AD%BE%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>之前学习EL表达式和JSTL标签库的时候只将EL的知识总结后上传到了blog上，没抽时间将JSTL的知识总结出来，如今做项目时在JSP页面中涉及到太多JSTL标签的语法，于是便抽时间将这篇博客补上。  </p>
<a id="more"></a> 
<p><strong>特此说明:</strong> 此博客参考<a href="http://www.cnblogs.com/xdp-gacl/p/3943390.html" target="_blank" rel="external">孤傲苍狼的博客</a></p>
<h2 id="1-JSTL标签库介绍"><a href="#1-JSTL标签库介绍" class="headerlink" title="1.JSTL标签库介绍"></a>1.JSTL标签库介绍</h2><p>JSTL标签库的使用是为弥补html标签的不足，规范自定义标签的使用而诞生的。使用JSLT标签的目的就是不希望在jsp页面中出现java逻辑代码。JSTL也是对EL表达式的扩展(也就是说JSTL依赖EL)，是一门标签语言。JSTL标签使用起来非常方便，它与JSP动作标签一样，只不过它不是JSP内置的标签，需要我们自己导包，一定要指定标签库。 </p>
<p>如果你使用MyEclipse开发JavaWeb，那么把项目发布到Tomcat时，你会发现MyEclipse在lib目录下自动存放了JSTL的Jar包。如果你使用其他IDE，那么你需要手动导入这个JSTL的Jar包:jstl-1.2.jar。  </p>
<h2 id="2-JSTL标签库的分类"><a href="#2-JSTL标签库的分类" class="headerlink" title="2.JSTL标签库的分类"></a>2.JSTL标签库的分类</h2><ul>
<li>core:核心标签库(用得最多)</li>
<li>fmt:国际化标签库(只需学习两个，日期和数字)</li>
<li>sql:数据库标签库(过时了，不需要学习)</li>
<li>xml:xml标签库(过时了，不需要学习)</li>
</ul>
<h2 id="3-核心标签库使用说明"><a href="#3-核心标签库使用说明" class="headerlink" title="3.核心标签库使用说明"></a>3.核心标签库使用说明</h2><p>JSTL的核心标签库标签共13个，使用这些标签能够完成JSP页面的基本功能，减少编码工作。  </p>
<p>从功能上可以分为4类:表达式控制标签、流程控制标签、循环标签、URL操作标签。  </p>
<ul>
<li>(1) 表达式控制标签:out标签、set标签、remove标签、catch标签</li>
<li>(2) 流程控制标签:if标签、choose标签、when标签、otherwise标签</li>
<li>(3) 循环标签:forEach标签、forTokens标签</li>
<li>(4) URL操作标签</li>
</ul>
<p>在JSP页面引入核心标签库的代码为:<code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code></p>
<h3 id="3-1表达式控制标签——out标签使用"><a href="#3-1表达式控制标签——out标签使用" class="headerlink" title="3.1表达式控制标签——out标签使用"></a>3.1表达式控制标签——out标签使用</h3><h4 id="3-1-1-lt-c-out-gt-标签的功能"><a href="#3-1-1-lt-c-out-gt-标签的功能" class="headerlink" title="3.1.1&lt;c:out&gt;标签的功能"></a>3.1.1<code>&lt;c:out&gt;</code>标签的功能</h4><p><code>&lt;c:out&gt;</code>标签主要是用来输出数据对象(字符串、表达式)的内容或结果。  </p>
<p>在使用Java脚本输出时常使用的方式为:<code>&lt;% out.println(&quot;字符串&quot;); %&gt;</code>或者<code>&lt;%=表达式 %&gt;</code>，在web开发中，为了避免暴露逻辑代码会尽量减少页面中的Java脚本，使用<code>&lt;c:out&gt;</code>标签就可以实现以上功能。  </p>
<pre><code>&lt;c:out value=&quot;字符串&quot;/&gt;或者&lt;c:out value=&quot;EL表达式&quot;/&gt;  
</code></pre><p>JSTL的使用是和EL表达式分不开的，EL表达式虽然可以直接将结果返回给页面，但有时得到的结果为空，<code>&lt;c:out&gt;</code>有特定的结果处理功能，EL的单独使用会降低程序的易读性，建议把EL的结果输入放入<code>&lt;c:out&gt;</code>标签中。  </p>
<h4 id="3-1-2-lt-c-out-gt-标签的语法"><a href="#3-1-2-lt-c-out-gt-标签的语法" class="headerlink" title="3.1.2&lt;c:out&gt;标签的语法"></a>3.1.2<code>&lt;c:out&gt;</code>标签的语法</h4><p><code>&lt;c:out&gt;</code>标签的使用有两种语法格式:  </p>
<ul>
<li>语法1:<code>&lt;c:out value=&quot;要显示的数据对象&quot; [escapeXml=&quot;true|false&quot;][default=&quot;默认值&quot;]/&gt;</code></li>
<li>语法2:<code>&lt;c:out value=&quot;要显示的数据对象&quot; [escapeXml=&quot;true|false&quot;]&gt;默认值&lt;/c:out&gt;</code></li>
</ul>
<p>这两种方式没有本质的区别，只是格式上的差别。[escapeXml=”true|false”][defult=”默认值”]这些使用[]属性表示是不是必须的。  </p>
<h4 id="3-1-3-lt-c-out-gt-标签的属性"><a href="#3-1-3-lt-c-out-gt-标签的属性" class="headerlink" title="3.1.3&lt;c:out&gt;标签的属性"></a>3.1.3<code>&lt;c:out&gt;</code>标签的属性</h4><table>
<thead>
<tr>
<th>属性名</th>
<th style="text-align:center">是否支持EL</th>
<th>属性类型</th>
<th>属性描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td style="text-align:center">true</td>
<td>Object</td>
<td>指定要输出的内容</td>
</tr>
<tr>
<td>escapeXml</td>
<td style="text-align:center">true</td>
<td>Boolean</td>
<td>指定是否将&gt;、&lt;、&amp;、’ 、”等特殊字符进行HTML编码转换后再进行输出。默认值为true。</td>
</tr>
<tr>
<td>default</td>
<td style="text-align:center">true</td>
<td>Object</td>
<td>指定如果value属性的值为null时所输出的默认值</td>
</tr>
</tbody>
</table>
<h4 id="3-1-4-lt-c-out-gt-标签的使用范例"><a href="#3-1-4-lt-c-out-gt-标签的使用范例" class="headerlink" title="3.1.4&lt;c:out&gt;标签的使用范例"></a>3.1.4<code>&lt;c:out&gt;</code>标签的使用范例</h4><pre><code>&lt;%@ page language=&quot;java&quot; pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%--引入JSTL核心标签库 --%&gt;
&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;
&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;JSTL: --表达式控制标签“out”标签的使用&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;h3&gt;&lt;c:out value=&quot;下面的代码演示了c:out的使用，以及在不同属性值状态下的结果。&quot;/&gt;&lt;/h3&gt;
&lt;hr/&gt;
&lt;ul&gt;
    &lt;%--（1）直接输出了一个字符串。 --%&gt;
    &lt;li&gt;（1）&lt;c:out value=&quot;JSTL的out标签的使用&quot; /&gt;&lt;/li&gt;

    &lt;li&gt;（2）&lt;c:out value=&quot;&lt;a href=&apos;http://www.cnblogs.com/&apos;&gt;点击链接到博客园&lt;/a&gt;&quot; /&gt;&lt;/li&gt;
    &lt;%--escapeXml=&quot;false&quot;表示value值中的html标签不进行转义，而是直接输出 --%&gt;
    &lt;li&gt;（3）&lt;c:out value=&quot;&lt;a href=&apos;http://www.cnblogs.com/&apos;&gt;点击链接到博客园&lt;/a&gt;&quot; escapeXml=&quot;false&quot;/&gt;&lt;/li&gt;

    &lt;%--(4）字符串中有转义字符，但在默认情况下没有转换。 --%&gt;
    &lt;li&gt;（4）&lt;c:out value=&quot;&amp;lt未使用字符转义&amp;gt&quot; /&gt;&lt;/li&gt;
    &lt;%--（5）使用了转义字符&amp;lt和&amp;gt分别转换成&lt;和&gt;符号。 --%&gt;
    &lt;li&gt;（5）&lt;c:out value=&quot;&amp;lt使用字符转义&amp;gt&quot; escapeXml=&quot;false&quot;&gt;&lt;/c:out&gt;&lt;/li&gt;

    &lt;%--（6）设定了默认值，从EL表达式${null}得到空值，所以直接输出设定的默认值。 --%&gt;
    &lt;li&gt;（6）&lt;c:out value=&quot;${null}&quot;&gt;使用了默认值&lt;/c:out&gt;&lt;/li&gt;
    &lt;%--（7）未设定默认值，输出结果为空。 --%&gt;
    &lt;li&gt;（7）&lt;c:out value=&quot;${null}&quot;&gt;&lt;/c:out&gt;&lt;/li&gt;

    &lt;%--（8）设定了默认值，从EL表达式${null}得到空值，所以直接输出设定的默认值。 --%&gt;
    &lt;li&gt;（8）&lt;c:out value=&quot;${null}&quot; default=&quot;默认值&quot;/&gt;&lt;/li&gt;
    &lt;%--（9）未设定默认值，输出结果为空。 --%&gt;
    &lt;li&gt;（9）&lt;c:out value=&quot;${null}&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>运行结果如下:<br><img src="http://od2xrf8gr.bkt.clouddn.com/1.png" alt=""></p>
<h3 id="3-2表达式控制标签——set标签的使用"><a href="#3-2表达式控制标签——set标签的使用" class="headerlink" title="3.2表达式控制标签——set标签的使用"></a>3.2表达式控制标签——set标签的使用</h3><h4 id="3-2-1-lt-c-set-gt-标签的功能"><a href="#3-2-1-lt-c-set-gt-标签的功能" class="headerlink" title="3.2.1&lt;c:set&gt;标签的功能"></a>3.2.1<code>&lt;c:set&gt;</code>标签的功能</h4><p><code>&lt;c:set&gt;</code>标签用于把某一个对象存在指定的域范围内，或者将某一个对象存储到Map或者JavaBean对象中。  </p>
<h4 id="3-2-2-lt-c-set-gt-标签的语法"><a href="#3-2-2-lt-c-set-gt-标签的语法" class="headerlink" title="3.2.2&lt;c:set&gt;标签的语法"></a>3.2.2<code>&lt;c:set&gt;</code>标签的语法</h4><p><code>&lt;c:set&gt;</code>标签的编写共有4种语法格式。  </p>
<ul>
<li>语法1:存值，把一个值放在指定的域范围内.<code>&lt;c:set value=”值1” var=”name1” [scope=”page|request|session|application”]/&gt;</code>  <blockquote>
<p>含义:把一个变量名为name1值为“值1”的变量存储在指定的scope范围内。</p>
</blockquote>
</li>
<li>语法2:<code>&lt;c:set var=”name2” [scope=”page|request|session|application”]&gt;值2&lt;/c:set&gt;</code>  <blockquote>
<p>含义：把一个变量名为name2，值为值2的变量存储在指定的scope范围内。</p>
</blockquote>
</li>
<li>语法3: <code>&lt;c:set value=”值3” target=”JavaBean对象” property=”属性名”/&gt;</code> <blockquote>
<p>含义:把一个值为“值3”赋值给指定的JavaBean的属性名。相当与setter()方法。</p>
</blockquote>
</li>
<li>语法4: <code>&lt;c:set target=”JavaBean对象” property=”属性名”&gt;值4&lt;/c:set&gt;</code>  <blockquote>
<p>含义：把一个值4赋值给指定的JavaBean的属性名。  </p>
</blockquote>
</li>
</ul>
<p>从功能上分语法1和语法2、语法3和语法4的效果是一样的，只是把value值放置的位置不同，至于使用那个根据个人的喜爱，语法1和语法2是向scope范围内存储一个值，语法3和语法4是给指定的JavaBean赋值。</p>
<h4 id="3-2-3-lt-c-set-gt-标签的属性"><a href="#3-2-3-lt-c-set-gt-标签的属性" class="headerlink" title="3.2.3&lt;c:set&gt;标签的属性"></a>3.2.3<code>&lt;c:set&gt;</code>标签的属性</h4><table>
<thead>
<tr>
<th>属性名</th>
<th style="text-align:center">是否支持EL</th>
<th>属性类型</th>
<th>属性描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td style="text-align:center">true</td>
<td>Object</td>
<td>用于指定属性值</td>
</tr>
<tr>
<td>var</td>
<td style="text-align:center">false</td>
<td>String</td>
<td>用于指定要设置的Web域属性的名称</td>
</tr>
<tr>
<td>scope</td>
<td style="text-align:center">false</td>
<td>String</td>
<td>用于指定属性所在的Web域</td>
</tr>
<tr>
<td>target</td>
<td style="text-align:center">true</td>
<td>Object</td>
<td>用于指定要设置属性的对象，这个对象必须是JavaBean对象或java.util.Map对象</td>
</tr>
<tr>
<td>property</td>
<td style="text-align:center">true</td>
<td>string</td>
<td>用于指定当前要为对象设置的属性名称</td>
</tr>
</tbody>
</table>
<h4 id="3-2-4-lt-c-set-gt-标签的使用范例"><a href="#3-2-4-lt-c-set-gt-标签的使用范例" class="headerlink" title="3.2.4&lt;c:set&gt;标签的使用范例"></a>3.2.4<code>&lt;c:set&gt;</code>标签的使用范例</h4><pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%--引入JSTL核心标签库 --%&gt;
&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;
&lt;%--使用JSP的指令元素指定要使用的JavaBean --%&gt;
&lt;jsp:useBean id=&quot;person&quot; class=&quot;javabean.Person&quot;/&gt;
&lt;%--负责实例化Bean，id指定实例化后的对象名，可以通过${person}得到person在内存中的值（或者使用person.toString()方法）。 --%&gt;
&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;

&lt;title&gt;JSTL: --表达式控制标签“set”标签的使用&lt;/title&gt;

&lt;/head&gt;

&lt;body&gt;
&lt;h3&gt;代码给出了给指定scope范围赋值的示例。&lt;/h3&gt;
&lt;ul&gt;
    &lt;%--通过&lt;c:set&gt;标签将data1的值放入page范围中。--%&gt;
    &lt;li&gt;把一个值放入page域中:&lt;c:set var=&quot;data1&quot; value=&quot;xdp&quot; scope=&quot;page&quot;/&gt;&lt;/li&gt;
    &lt;%--使用EL表达式从pageScope得到data1的值。--%&gt;
    &lt;li&gt;从page域中得到值：${pageScope.data1}&lt;/li&gt;

    &lt;%--通过&lt;c:set&gt;标签将data2的值放入request范围中。--%&gt;
    &lt;li&gt;把一个值放入request域中:&lt;c:set var=&quot;data2&quot; value=&quot;gacl&quot; scope=&quot;request&quot;/&gt;&lt;/li&gt;
    &lt;%--使用EL表达式从requestScope得到data2的值。--%&gt;
    &lt;li&gt;从request域中得到值：${requestScope.data2}&lt;/li&gt;

    &lt;%--通过&lt;c:set&gt;标签将值name1的值放入session范围中。--%&gt;
    &lt;li&gt;把一个值放入session域中。&lt;c:set value=&quot;孤傲苍狼&quot; var=&quot;name1&quot; scope=&quot;session&quot;&gt;&lt;/c:set&gt;&lt;/li&gt;
    &lt;%--使用EL表达式从sessionScope得到name1的值。--%&gt;
    &lt;li&gt;从session域中得到值:${sessionScope.name1} &lt;/li&gt;

    &lt;%--把name2放入application范围中。 --%&gt;
    &lt;li&gt;把一个值放入application域中。&lt;c:set var=&quot;name2&quot; scope=&quot;application&quot;&gt;白虎神皇&lt;/c:set&gt;&lt;/li&gt;
    &lt;%--使用EL表达式从application范围中取值，用&lt;c:out&gt;标签输出使得页面规范化。 --%&gt;
    &lt;li&gt;使用out标签和EL表达式嵌套从application域中得到值： 
         &lt;c:out value=&quot;${applicationScope.name2}&quot;&gt;未得到name的值&lt;/c:out&gt;
    &lt;/li&gt;

    &lt;%--不指定范围使用EL自动查找得到值 --%&gt; 
    &lt;li&gt;未指定scope的范围，会从不同的范围内查找得到相应的值：${data1}、${data2}、${name1}、${name2}&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h3&gt;使用Java脚本实现以上功能&lt;/h3&gt;
&lt;ul&gt;

    &lt;li&gt;把一个值放入page域中。&lt;%pageContext.setAttribute(&quot;data1&quot;,&quot;xdp&quot;);%&gt;&lt;/li&gt;
    &lt;li&gt;从page域中得到值:&lt;%out.println(pageContext.getAttribute(&quot;data1&quot;));%&gt;&lt;/li&gt;

    &lt;li&gt;把一个值放入request域中。&lt;%request.setAttribute(&quot;data2&quot;,&quot;gacl&quot;);%&gt;&lt;/li&gt;
    &lt;li&gt;从request域中得到值:&lt;%out.println(request.getAttribute(&quot;data2&quot;));%&gt;&lt;/li&gt;

    &lt;li&gt;把一个值放入session域中。&lt;%session.setAttribute(&quot;name1&quot;,&quot;孤傲苍狼&quot;);%&gt;&lt;/li&gt;
    &lt;li&gt;从session中域得到值:&lt;%out.println(session.getAttribute(&quot;name1&quot;));%&gt;&lt;/li&gt;
    &lt;%--out.println()方法与&lt;%=%&gt;表达式输出功能一样 
    但使用表达式输出（&lt;%=%&gt;）明显要比使用out.println()输出更好。
    --%&gt;
    &lt;li&gt;&lt;%=session.getAttribute(&quot;name1&quot;) %&gt;&lt;/li&gt;
    &lt;li&gt;把另一个值放入application域中。&lt;%application.setAttribute(&quot;name2&quot;,&quot;白虎神皇&quot;);%&gt;&lt;/li&gt;
    &lt;li&gt; 从application域中得到值：&lt;%out.println(application.getAttribute(&quot;name2&quot;));%&gt;&lt;/li&gt;
    &lt;li&gt;&lt;%=application.getAttribute(&quot;name2&quot;)%&gt;&lt;/li&gt;

    &lt;li&gt;未指定scope的范围，会从不同的范围内查找得到相应的值：
        &lt;%=pageContext.findAttribute(&quot;data1&quot;)%&gt;、
        &lt;%=pageContext.findAttribute(&quot;data2&quot;)%&gt;、
        &lt;%=pageContext.findAttribute(&quot;name1&quot;)%&gt;、
        &lt;%=pageContext.findAttribute(&quot;name2&quot;)%&gt;
    &lt;/li&gt;

&lt;/ul&gt;
&lt;hr/&gt;
&lt;h3&gt;操作JavaBean，设置JavaBean的属性值&lt;/h3&gt;
&lt;%--设置JavaBean的属性值，等同与setter方法，Target指向实例化后的对象，property指向要插入值的参数名。
注意：使用target时一定要指向实例化后的JavaBean对象，也就是要跟&lt;jsp:useBean&gt;配套使用，
也可以java脚本实例化，但这就失去了是用标签的本质意义。
使用Java脚本实例化：
&lt;%@page import=&quot;javabean.Person&quot;%
&lt;% Person person=new Person(); %&gt;
 --%&gt;
&lt;c:set target=&quot;${person}&quot; property=&quot;name&quot;&gt;孤傲苍狼&lt;/c:set&gt;
&lt;c:set target=&quot;${person}&quot; property=&quot;age&quot;&gt;25&lt;/c:set&gt;
&lt;c:set target=&quot;${person}&quot; property=&quot;sex&quot;&gt;男&lt;/c:set&gt;
&lt;c:set target=&quot;${person}&quot; property=&quot;home&quot;&gt;中国&lt;/c:set&gt;
&lt;ul&gt;
    &lt;li&gt;使用的目标对象为：${person}&lt;/li&gt;
    &lt;li&gt;从Bean中获得的name值为：&lt;c:out value=&quot;${person.name}&quot;&gt;&lt;/c:out&gt;&lt;/li&gt;
    &lt;li&gt;从Bean中获得的age值为：&lt;c:out value=&quot;${person.age}&quot;&gt;&lt;/c:out&gt;&lt;/li&gt;
    &lt;li&gt;从Bean中获得的sex值为：&lt;c:out value=&quot;${person.sex}&quot;&gt;&lt;/c:out&gt;&lt;/li&gt;
    &lt;li&gt;从Bean中获得的home值为：&lt;c:out value=&quot;${person.home}&quot;&gt;&lt;/c:out&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h3&gt;操作Map&lt;/h3&gt;
 &lt;% 
    Map map = new HashMap();
    request.setAttribute(&quot;map&quot;,map);
 %&gt;
 &lt;%--将data对象的值存储到map集合中 --%&gt;
&lt;c:set property=&quot;data&quot; value=&quot;gacl&quot; target=&quot;${map}&quot;/&gt;
    ${map.data}
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p><strong>jsp页面中使用到的javabean.Person类的代码如下:</strong>  </p>
<pre><code>package javabean;

/**
* 项目名称：JSTLStudy 
* 类名称：Person 
* 类描述：一个只有getter和setter方法的JavaBean或者说一个pojo(简单的Java对象(Plain Old Java Objects))类，
* 作为一个vo（数据传输对象）。定义了四个变量age、name、sex和home。 
*/
public class Person {

    private String age;

    private String home;

    private String name;

    private String sex;

    public String getAge() {
        return age;
    }

    public String getHome() {
        return home;
    }

    public String getName() {
        return name;
    }

    public String getSex() {
        return sex;
   }

    public void setAge(String age) {
        this.age = age;
    }

    public void setHome(String home) {
        this.home = home;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }
}
</code></pre><p>运行结果如下:<br><img src="http://od2xrf8gr.bkt.clouddn.com/2.png" alt=""></p>
<h3 id="3-3表达式控制标签——remove标签的使用"><a href="#3-3表达式控制标签——remove标签的使用" class="headerlink" title="3.3表达式控制标签——remove标签的使用"></a>3.3表达式控制标签——remove标签的使用</h3><h4 id="3-3-1-lt-c-remove-gt-标签的功能"><a href="#3-3-1-lt-c-remove-gt-标签的功能" class="headerlink" title="3.3.1&lt;c:remove&gt;标签的功能"></a>3.3.1<code>&lt;c:remove&gt;</code>标签的功能</h4><p><code>&lt;c:remove&gt;</code>标签主要用来从指定的JSP范围内移除指定的变量。  </p>
<h4 id="3-3-2-lt-c-remove-gt-标签的语法"><a href="#3-3-2-lt-c-remove-gt-标签的语法" class="headerlink" title="3.3.2&lt;c:remove&gt;标签的语法"></a>3.3.2<code>&lt;c:remove&gt;</code>标签的语法</h4><p><code>&lt;c:remove var=&quot;变量名&quot; [scope=”page|request|session|application”]/&gt;</code>其中var属性是必须的，scope可以以省略。  </p>
<h4 id="3-3-3-lt-c-remove-gt-标签的使用范例"><a href="#3-3-3-lt-c-remove-gt-标签的使用范例" class="headerlink" title="3.3.3&lt;c:remove&gt;标签的使用范例"></a>3.3.3<code>&lt;c:remove&gt;</code>标签的使用范例</h4><pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%--引入JSTL核心标签库 --%&gt;
&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;
&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;JSTL: --表达式控制标签“remove”标签的使用&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;ul&gt;
        &lt;c:set var=&quot;name&quot; scope=&quot;session&quot;&gt;孤傲苍狼&lt;/c:set&gt;
        &lt;c:set var=&quot;age&quot; scope=&quot;session&quot;&gt;25&lt;/c:set&gt;
        &lt;li&gt;&lt;c:out value=&quot;${sessionScope.name}&quot;&gt;&lt;/c:out&gt;&lt;/li&gt;
        &lt;li&gt;&lt;c:out value=&quot;${sessionScope.age}&quot;&gt;&lt;/c:out&gt;&lt;/li&gt;
        &lt;%--使用remove标签移除age变量 --%&gt;
        &lt;c:remove var=&quot;age&quot; /&gt;
        &lt;li&gt;&lt;c:out value=&quot;${sessionScope.name}&quot;&gt;&lt;/c:out&gt;&lt;/li&gt;
        &lt;li&gt;&lt;c:out value=&quot;${sessionScope.age}&quot;&gt;&lt;/c:out&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>运行结果如下:<br><img src="http://od2xrf8gr.bkt.clouddn.com/3.png" alt="">  </p>
<h3 id="3-4表达式控制标签——catch标签的使用"><a href="#3-4表达式控制标签——catch标签的使用" class="headerlink" title="3.4表达式控制标签——catch标签的使用"></a>3.4表达式控制标签——catch标签的使用</h3><h4 id="3-4-1-lt-c-catch-gt-标签的功能"><a href="#3-4-1-lt-c-catch-gt-标签的功能" class="headerlink" title="3.4.1&lt;c:catch&gt;标签的功能"></a>3.4.1<code>&lt;c:catch&gt;</code>标签的功能</h4><p><code>&lt;c:catch&gt;</code>标签用于捕获嵌套在标签体中的内容抛出的异常。  </p>
<h4 id="3-4-2-lt-c-catch-gt-标签的语法"><a href="#3-4-2-lt-c-catch-gt-标签的语法" class="headerlink" title="3.4.2&lt;c:catch&gt;标签的语法"></a>3.4.2<code>&lt;c:catch&gt;</code>标签的语法</h4><p>其语法格式如下：<code>&lt;c:catch [var=&quot;varName&quot;]&gt;容易产生异常的代码&lt;/c:catch&gt;</code> </p>
<p>var属性用于标识<code>&lt;c:catch&gt;</code>标签捕获的异常对象，它将保存在page这个Web域中。</p>
<h4 id="3-4-3-lt-c-catch-gt-标签的使用范例"><a href="#3-4-3-lt-c-catch-gt-标签的使用范例" class="headerlink" title="3.4.3&lt;c:catch&gt;标签的使用范例"></a>3.4.3<code>&lt;c:catch&gt;</code>标签的使用范例</h4><pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%--引入JSTL核心标签库 --%&gt;
&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;
&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;JSTL: --表达式控制标签“catch”标签实例&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;h4&gt;catch标签实例&lt;/h4&gt;
    &lt;hr&gt;

    &lt;%--把容易产生异常的代码放在&lt;c:catch&gt;&lt;/c:catch&gt;中，自定义一个变量errorInfo用于存储异常信息 --%&gt;
    &lt;c:catch var=&quot;errorInfo&quot;&gt;
       &lt;%--实现了一段异常代码，向一个不存在的JavaBean中插入一个值--%&gt;
       &lt;c:set target=&quot;person&quot; property=&quot;hao&quot;&gt;&lt;/c:set&gt;
    &lt;/c:catch&gt;

    &lt;%--用EL表达式得到errorInfo的值，并使用&lt;c:out&gt;标签输出 --%&gt;
    异常：&lt;c:out value=&quot;${errorInfo}&quot; /&gt;&lt;br /&gt;
    异常 errorInfo.getMessage：&lt;c:out value=&quot;${errorInfo.message}&quot; /&gt;&lt;br /&gt;
    异常 errorInfo.getCause：&lt;c:out value=&quot;${errorInfo.cause}&quot; /&gt;&lt;br /&gt;
    异常 errorInfo.getStackTrace：&lt;c:out value=&quot;${errorInfo.stackTrace}&quot; /&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>运行结果如下:<br><img src="http://od2xrf8gr.bkt.clouddn.com/4.png" alt=""></p>
<h3 id="3-5流程控制标签——if标签使用总结"><a href="#3-5流程控制标签——if标签使用总结" class="headerlink" title="3.5流程控制标签——if标签使用总结"></a>3.5流程控制标签——if标签使用总结</h3><h4 id="3-5-1-lt-c-if-gt-标签的功能"><a href="#3-5-1-lt-c-if-gt-标签的功能" class="headerlink" title="3.5.1&lt;c:if&gt;标签的功能"></a>3.5.1<code>&lt;c:if&gt;</code>标签的功能</h4><p><code>&lt;c:if&gt;</code> 标签和程序中的if语句作用相同，用来实现条件控制。  </p>
<h4 id="3-5-2-lt-c-if-gt-标签的语法"><a href="#3-5-2-lt-c-if-gt-标签的语法" class="headerlink" title="3.5.2&lt;c:if&gt;标签的语法"></a>3.5.2<code>&lt;c:if&gt;</code>标签的语法</h4><ul>
<li>语法1:没有标签体内容:<code>&lt;c:if test=&quot;testCondition&quot; var=&quot;varName&quot; [scope=&quot;{page|request|session|application}&quot;]/&gt;</code></li>
<li>语法2: 有标签体内容。<code>&lt;c:if test=&quot;testCondition&quot; [var=&quot;varName&quot;] [scope=&quot;{page|request|session|application}&quot;]&gt;标签体内容。&lt;/c:if&gt;</code></li>
</ul>
<p>参数说明:  </p>
<ul>
<li>1）test属性用于存放判断的条件，一般使用EL表达式来编写。</li>
<li>2）var属性用来存放判断的结果，类型为true或false。</li>
<li>3）scopes属性用来指定var属性存放的范围。</li>
</ul>
<h4 id="3-5-3-lt-c-if-gt-标签的属性"><a href="#3-5-3-lt-c-if-gt-标签的属性" class="headerlink" title="3.5.3&lt;c:if&gt;标签的属性"></a>3.5.3<code>&lt;c:if&gt;</code>标签的属性</h4><table>
<thead>
<tr>
<th>属性名</th>
<th style="text-align:center">是否支持EL</th>
<th>属性类型</th>
<th>属性描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>test</td>
<td style="text-align:center">true</td>
<td>boolean</td>
<td>决定是否处理标签体中的内容的条件表达式</td>
</tr>
<tr>
<td>var</td>
<td style="text-align:center">false</td>
<td>String</td>
<td>用于指定将test属性的执行结果保存到某个Web域中的某个属性的名称</td>
</tr>
<tr>
<td>scope</td>
<td style="text-align:center">false</td>
<td>String</td>
<td>指定将test属性的执行结果保存到哪个Web域中</td>
</tr>
</tbody>
</table>
<h4 id="3-5-4-lt-c-if-gt-标签的使用范例"><a href="#3-5-4-lt-c-if-gt-标签的使用范例" class="headerlink" title="3.5.4&lt;c:if&gt;标签的使用范例"></a>3.5.4<code>&lt;c:if&gt;</code>标签的使用范例</h4><pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%--引入JSTL核心标签库 --%&gt;
&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;
&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;JSTL: --流程控制标签 if标签示例&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;h4&gt;if标签示例&lt;/h4&gt;
    &lt;hr&gt;
    &lt;form action=&quot;JSTL_if_tag.jsp&quot; method=&quot;post&quot;&gt;
        &lt;input type=&quot;text&quot; name=&quot;uname&quot; value=&quot;${param.uname}&quot;&gt; 
        &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;
    &lt;/form&gt;

    &lt;%--使用if标签进行判断并把检验后的结果赋给adminchock，存储在默认的page范围中。 --%&gt;
    &lt;c:if test=&quot;${param.uname==&apos;admin&apos;}&quot; var=&quot;adminchock&quot;&gt;
    &lt;%--可以把adminchock的属性范围设置为session，这样就可以在其他的页面中得到adminchock的值，
使用&lt;c:if text=”${adminchock}”&gt;&lt;c:if&gt;判断，实现不同的权限。 --%&gt;
        &lt;c:out value=&quot;管理员欢迎您！&quot;/&gt;
    &lt;/c:if&gt;
    &lt;%--使用EL表达式得到adminchock的值，如果输入的用户名为admin将显示true。 --%&gt;
    ${adminchock}
&lt;/body&gt;
&lt;/html&gt;  
</code></pre><h3 id="3-6流程控制标签——choose标签、when标签、otherwise标签配合使用讲解"><a href="#3-6流程控制标签——choose标签、when标签、otherwise标签配合使用讲解" class="headerlink" title="3.6流程控制标签——choose标签、when标签、otherwise标签配合使用讲解"></a>3.6流程控制标签——choose标签、when标签、otherwise标签配合使用讲解</h3><h4 id="3-6-1-lt-c-choose-gt-、-lt-c-when-gt-和-lt-c-otherwise-gt-标签的功能"><a href="#3-6-1-lt-c-choose-gt-、-lt-c-when-gt-和-lt-c-otherwise-gt-标签的功能" class="headerlink" title="3.6.1&lt;c:choose&gt;、&lt;c:when&gt;和&lt;c:otherwise&gt;标签的功能"></a>3.6.1<code>&lt;c:choose&gt;</code>、<code>&lt;c:when&gt;</code>和<code>&lt;c:otherwise&gt;</code>标签的功能</h4><p><code>&lt;c:choose&gt;</code>、<code>&lt;c:when&gt;</code>和<code>&lt;c:otherwise&gt;</code>这3个标签通常情况下是一起使用的，<code>&lt;c:choose&gt;</code>标签作为<code>&lt;c:when&gt;</code>和<code>&lt;c:otherwise&gt;</code>标签的父标签来使用。  </p>
<p>使用<code>&lt;c:choose&gt;</code>，<code>&lt;c:when&gt;</code>和<code>&lt;c:otherwise&gt;</code>三个标签，可以构造类似 “if-else if-else” 的复杂条件判断结构。  </p>
<h4 id="3-6-2语法"><a href="#3-6-2语法" class="headerlink" title="3.6.2语法"></a>3.6.2语法</h4><pre><code>&lt;c:choose&gt;
     &lt;c:when test=&quot;条件1&quot;&gt;
             //业务逻辑1
     &lt;/c:when&gt;
     &lt;c:when test=&quot;条件2&quot;&gt;
             //业务逻辑2
     &lt;/c:when&gt;
     &lt;c:when test=&quot;条件n&quot;&gt;
             //业务逻辑n
     &lt;/c:when&gt;
     &lt;c:otherwise&gt;
             //业务逻辑
     &lt;/c:otherwise&gt;
&lt;/c:choose&gt;
</code></pre><h4 id="3-6-3使用范例"><a href="#3-6-3使用范例" class="headerlink" title="3.6.3使用范例"></a>3.6.3使用范例</h4><pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%--引入JSTL核心标签库 --%&gt;
&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;
&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;JSTL: -- choose及其嵌套标签标签示例&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;h4&gt;choose及其嵌套标签示例&lt;/h4&gt;
    &lt;hr/&gt;
    &lt;%--通过set标签设定score的值为85 --%&gt;
    &lt;c:set var=&quot;score&quot; value=&quot;85&quot;/&gt;

    &lt;c:choose&gt;

    &lt;%--使用&lt;c:when&gt;进行条件判断。
    如果大于等于90，输出“您的成绩为优秀”；
    如果大于等于70小于90，输出“您的成绩为良好”；
    大于等于60小于70，输出“您的成绩为及格”；
    其他（otherwise）输出“对不起，您没能通过考试”。
 --%&gt;

        &lt;c:when test=&quot;${score&gt;=90}&quot;&gt;
        你的成绩为优秀！
        &lt;/c:when&gt;

        &lt;c:when test=&quot;${score&gt;70 &amp;&amp; score&lt;90}&quot;&gt;
        您的成绩为良好!
        &lt;/c:when&gt;

        &lt;c:when test=&quot;${score&gt;60 &amp;&amp; score&lt;70}&quot;&gt;
        您的成绩为及格
        &lt;/c:when&gt;

        &lt;c:otherwise&gt;
        对不起，您没有通过考试！

        &lt;/c:otherwise&gt;
    &lt;/c:choose&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><h3 id="3-7循环标签——forEach标签的使用"><a href="#3-7循环标签——forEach标签的使用" class="headerlink" title="3.7循环标签——forEach标签的使用"></a>3.7循环标签——forEach标签的使用</h3><h4 id="3-7-1-lt-c-forEach-gt-标签的功能"><a href="#3-7-1-lt-c-forEach-gt-标签的功能" class="headerlink" title="3.7.1&lt;c:forEach&gt;标签的功能"></a>3.7.1<code>&lt;c:forEach&gt;</code>标签的功能</h4><p>该标签根据循环条件遍历集合（Collection）中的元素。</p>
<h4 id="3-7-2-lt-c-forEach-gt-标签的语法"><a href="#3-7-2-lt-c-forEach-gt-标签的语法" class="headerlink" title="3.7.2&lt;c:forEach&gt;标签的语法"></a>3.7.2<code>&lt;c:forEach&gt;</code>标签的语法</h4><pre><code>&lt;c:forEach var=”name” items=”Collection” 
　　varStatus=”StatusName” begin=”begin” 
　　end=”end” step=”step”&gt;

    本体内容

&lt;/c:forEach&gt;
</code></pre><p>参数说明:  </p>
<ul>
<li>1）var设定变量名用于存储从集合中取出元素。</li>
<li>2）items指定要遍历的集合。</li>
<li>3）varStatus设定变量名，该变量用于存放集合中元素的信息。</li>
<li>4）begin、end用于指定遍历的起始位置和终止位置（可选）。</li>
<li>5）step指定循环的步长。</li>
</ul>
<h4 id="3-7-3-lt-c-forEach-gt-标签的属性"><a href="#3-7-3-lt-c-forEach-gt-标签的属性" class="headerlink" title="3.7.3&lt;c:forEach&gt;标签的属性"></a>3.7.3<code>&lt;c:forEach&gt;</code>标签的属性</h4><table>
<thead>
<tr>
<th>属性名</th>
<th style="text-align:center">是否支持EL</th>
<th>属性类型</th>
<th>是否必须</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>var</td>
<td style="text-align:center">false</td>
<td>String</td>
<td>yes</td>
<td>无</td>
</tr>
<tr>
<td>items</td>
<td style="text-align:center">true</td>
<td>Arrays Collection Iterator Enumeration Map String[]args</td>
<td>无</td>
</tr>
<tr>
<td>begin</td>
<td style="text-align:center">true</td>
<td>int</td>
<td>no</td>
<td>0</td>
</tr>
<tr>
<td>end</td>
<td style="text-align:center">true</td>
<td>int</td>
<td>no</td>
<td>集合中最后一个元素</td>
</tr>
<tr>
<td>step</td>
<td style="text-align:center">true</td>
<td>int</td>
<td>no</td>
<td>1</td>
</tr>
<tr>
<td>varStatus</td>
<td style="text-align:center">false</td>
<td>String</td>
<td>no</td>
<td>否</td>
</tr>
</tbody>
</table>
<p>其中varStatus有4个状态属性，如下表所示:  </p>
<table>
<thead>
<tr>
<th>属性名</th>
<th style="text-align:center">类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>index</td>
<td style="text-align:center">int</td>
<td>当前循环的索引值</td>
</tr>
<tr>
<td>count</td>
<td style="text-align:center">int</td>
<td>循环的次数</td>
</tr>
<tr>
<td>first</td>
<td style="text-align:center">boolean</td>
<td>是否为第一个位置</td>
</tr>
<tr>
<td>last</td>
<td style="text-align:center">boolean</td>
<td>是否为最后一个位置</td>
</tr>
</tbody>
</table>
<h4 id="3-7-4-lt-c-forEach-gt-的使用范例"><a href="#3-7-4-lt-c-forEach-gt-的使用范例" class="headerlink" title="3.7.4&lt;c:forEach&gt;的使用范例"></a>3.7.4<code>&lt;c:forEach&gt;</code>的使用范例</h4><pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%--引入JSTL核心标签库 --%&gt;
&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;
&lt;%@page import=&quot;java.util.ArrayList&quot;%&gt;
&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;JSTL: -- forEach标签实例&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;h4&gt;&lt;c:out value=&quot;forEach实例&quot;/&gt;&lt;/h4&gt;
    &lt;% 
       List&lt;String&gt;list = new ArrayList&lt;String&gt;(); 
       list.add(0, &quot;贝贝&quot;); 
       list.add(1, &quot;晶晶&quot;); 
       list.add(2, &quot;欢欢&quot;); 
       list.add(3, &quot;莹莹&quot;); 
       list.add(4, &quot;妮妮&quot;); 
       request.setAttribute(&quot;list&quot;, list); 
    %&gt;
    &lt;B&gt;&lt;c:out value=&quot;不指定begin和end的迭代：&quot; /&gt;&lt;/B&gt;&lt;br&gt;
    &lt;%--不使用begin和end的迭代，从集合的第一个元素开始，遍历到最后一个元素。 --%&gt;

    &lt;c:forEach var=&quot;fuwa&quot; items=&quot;${list}&quot;&gt;
        &amp;nbsp;&lt;c:out value=&quot;${fuwa}&quot;/&gt;&lt;br/&gt;
    &lt;/c:forEach&gt;

    &lt;B&gt;&lt;c:out value=&quot;指定begin和end的迭代：&quot; /&gt;&lt;/B&gt;&lt;br&gt;
    &lt;%--指定begin的值为1、end的值为3、step的值为2，
    从第二个开始首先得到晶晶，每两个遍历一次，
    则下一个显示的结果为莹莹，end为3则遍历结束。 --%&gt;
    &lt;c:forEach var=&quot;fuwa&quot; items=&quot;${list}&quot; begin=&quot;1&quot; end=&quot;3&quot; step=&quot;2&quot;&gt;
       &lt;c:out value=&quot;${fuwa}&quot;/&gt;&lt;br/&gt;
   &lt;/c:forEach&gt;

    &lt;B&gt;&lt;c:out value=&quot;输出整个迭代的信息：&quot; /&gt;&lt;/B&gt;&lt;br&gt;
        &lt;%--指定varStatus的属性名为s，并取出存储的状态信息 --%&gt;
        &lt;c:forEach var=&quot;fuwa&quot; items=&quot;${list}&quot; begin=&quot;3&quot; end=&quot;4&quot; varStatus=&quot;s&quot; step=&quot;1&quot;&gt;
             &lt;c:out value=&quot;${fuwa}&quot; /&gt;的四种属性：&lt;br&gt;

           所在位置，即索引：&lt;c:out value=&quot;${s.index}&quot; /&gt;&lt;br&gt;

             总共已迭代的次数：&lt;c:out value=&quot;${s.count}&quot; /&gt;&lt;br&gt;

             是否为第一个位置：&lt;c:out value=&quot;${s.first}&quot; /&gt;&lt;br&gt;

             是否为最后一个位置：&lt;c:out value=&quot;${s.last}&quot; /&gt;&lt;br&gt;  
        &lt;/c:forEach&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>运行结果如下:<br><img src="http://od2xrf8gr.bkt.clouddn.com/7.png" alt=""></p>
<h3 id="3-8URL操作标签——import标签的使用"><a href="#3-8URL操作标签——import标签的使用" class="headerlink" title="3.8URL操作标签——import标签的使用"></a>3.8URL操作标签——import标签的使用</h3><h4 id="3-8-1-lt-c-import-gt-标签的功能"><a href="#3-8-1-lt-c-import-gt-标签的功能" class="headerlink" title="3.8.1&lt;c:import&gt;标签的功能"></a>3.8.1<code>&lt;c:import&gt;</code>标签的功能</h4><p>该标签可以把其他静态或动态文件包含到本JSP页面，与<code>&lt;jsp:include&gt;</code>的区别为：<code>&lt;jsp:include&gt;</code>只能包含同一个web应用中的文件。而<code>&lt;c:import&gt;</code>可以包含其他web应用中的文件，甚至是网络上的资源。</p>
<h4 id="3-8-2-lt-c-import-gt-标签的语法"><a href="#3-8-2-lt-c-import-gt-标签的语法" class="headerlink" title="3.8.2&lt;c:import&gt;标签的语法"></a>3.8.2<code>&lt;c:import&gt;</code>标签的语法</h4><ul>
<li>语法1:<code>&lt;c:import url=”url” [context=”context”][value=”value”] [scope=”page|request|session|application”] [charEncoding=”encoding”]/&gt;</code></li>
<li>语法2:<code>&lt;c:import url=”url” varReader=”name” [context=”context”] [charEncoding=”encoding”]/&gt;</code></li>
</ul>
<p>参数说明:  </p>
<ul>
<li>1）URL为资源的路径，当引用的资源不存在时系统会抛出异常，因此该语句应该放在<code>&lt;c:catch&gt;&lt;/c:catch&gt;</code>语句块中捕获。</li>
<li>2）引用资源有两种方式：绝对路径和相对路径。  <blockquote>
<p>使用绝对路径的示例如下：<code>&lt;c:import url=”http://www.baidu.com”&gt;</code><br>使用相对路径的示例如下：<code>&lt;c:import url=”aa.txt”&gt;</code>，aa.txt放在同一文件目录。</p>
</blockquote>
</li>
<li>3）如果以“/”开头表示应用的根目录下。例如：tomcat应用程序的根目录文件夹为webapps。导入webapps下的文件bb.txt的编写方式为：<code>&lt;c:import url=”/bb.txt”&gt;</code></li>
<li>4）context属性用于在访问其他web应用的文件时，指定根目录。例如，访问root下的index.jsp的实现代码为：<code>&lt;c:import url=”/index.jsp” context=”/root”&gt;</code>。等同于webapps/root/index.jsp</li>
<li>5）var、scope、charEncoding、varReader是可选属性。</li>
</ul>
<h4 id="3-8-3-lt-c-import-gt-标签使用范例"><a href="#3-8-3-lt-c-import-gt-标签使用范例" class="headerlink" title="3.8.3&lt;c:import&gt;标签使用范例"></a>3.8.3<code>&lt;c:import&gt;</code>标签使用范例</h4><pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%--引入JSTL核心标签库 --%&gt;
&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;
&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;JSTL: -- import标签实例&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;h4&gt;&lt;c:out value=&quot;import实例&quot;/&gt;&lt;/h4&gt;
    &lt;hr/&gt;
    &lt;h4&gt;&lt;c:out value=&quot;绝对路径引用的实例&quot; /&gt;&lt;/h4&gt;
    &lt;%--使用绝对路径导入百度首页,导入时使用&lt;c:catch&gt;&lt;/c:catch&gt;捕获异常。--%&gt;
        &lt;c:catch var=&quot;error1&quot;&gt;
            &lt;c:import url=&quot;http://wwww.baidu.com&quot; charEncoding=&quot;utf-8&quot;/&gt;
        &lt;/c:catch&gt;
            ${error1}
        &lt;hr/&gt;

     &lt;h4&gt;&lt;c:out value=&quot;相对路径引用本应用中的文件&quot; /&gt;&lt;/h4&gt;
     &lt;%--使用相对路径导入同一文件夹下的“JSTL的import标签使用说明”文件，接收的字符编码格式使用charEncoding设置为utf-8。 --%&gt;
         &lt;c:catch var=&quot;error2&quot;&gt;
             &lt;c:import url=&quot;JSTL的import标签使用说明&quot; charEncoding=&quot;utf-8&quot;/&gt;
         &lt;/c:catch&gt;
              ${error2}
         &lt;hr/&gt;

      &lt;h4&gt;&lt;c:out value=&quot;使用字符串输出相对路径引用的实例，并保存在session范围内&quot; /&gt;&lt;/h4&gt;
      &lt;%--导入“JSTL的import标签使用说明.txt”，使用var定义的变量接收要导入的文件，并存储在session中，
      如果在其他页面同样也要导入该文件，只须使用&lt;c:out&gt;输出“JSTL的import标签使用说明.txt”的值即可。--%&gt;
          &lt;c:catch var=&quot;error3&quot;&gt;
           &lt;c:import var=&quot;myurl&quot; url=&quot;JSTL的import标签使用说明&quot; scope=&quot;session&quot; charEncoding=&quot;utf-8&quot;/&gt;
               &lt;c:out value=&quot;${myurl}&quot;&gt;&lt;/c:out&gt;
           &lt;hr/&gt;
            &lt;c:out value=&quot;${myurl}&quot; /&gt;
          &lt;/c:catch&gt;
               ${error3}
       &lt;/body&gt;
    &lt;/html&gt;
</code></pre><h3 id="3-9URL操作符——url标签的使用"><a href="#3-9URL操作符——url标签的使用" class="headerlink" title="3.9URL操作符——url标签的使用"></a>3.9URL操作符——url标签的使用</h3><h4 id="3-9-1-lt-c-url-gt-标签的功能"><a href="#3-9-1-lt-c-url-gt-标签的功能" class="headerlink" title="3.9.1&lt;c:url&gt;标签的功能"></a>3.9.1<code>&lt;c:url&gt;</code>标签的功能</h4><p><c:url>标签用于在JSP页面中构造一个URL地址，其主要目的是实现URL重写。</c:url></p>
<h4 id="3-9-2-lt-c-url-gt-标签的语法"><a href="#3-9-2-lt-c-url-gt-标签的语法" class="headerlink" title="3.9.2&lt;c:url&gt;标签的语法"></a>3.9.2<code>&lt;c:url&gt;</code>标签的语法</h4><ul>
<li>语法1:指定一个url不做修改，可以选择把该url存储在JSP不同的范围中。<code>&lt;c:url value=”value” [var=”name”][scope=”page|request|session|application”] [context=”context”]/&gt;</code></li>
<li><p>语法2:配合 <code>&lt;c:param&gt;</code>标签给url加上指定参数及参数值，可以选择以name存储该url。</p>
<pre><code>&lt;c:url value=”value” [var=”name”] [scope=”page|request|session|application”] [context=”context”] 
    &lt;c:param name=”参数名” value=”值”&gt;
&lt;/c:url&gt;`
</code></pre></li>
</ul>
<h4 id="3-9-3-lt-c-url-gt-标签的主要属性"><a href="#3-9-3-lt-c-url-gt-标签的主要属性" class="headerlink" title="3.9.3&lt;c:url&gt;标签的主要属性"></a>3.9.3<code>&lt;c:url&gt;</code>标签的主要属性</h4><table>
<thead>
<tr>
<th>属性名</th>
<th style="text-align:center">是否支持EL</th>
<th>属性类型</th>
<th>属性描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>value</td>
<td style="text-align:center">true</td>
<td>String</td>
<td>指定要构造的URL</td>
</tr>
<tr>
<td>var</td>
<td style="text-align:center">false</td>
<td>String</td>
<td>指定将构造出的URL结果保存到Web域中的属性名称</td>
</tr>
<tr>
<td>scope</td>
<td style="text-align:center">false</td>
<td>String</td>
<td>指定将构造出的URL结果保存到哪个Web域中</td>
</tr>
</tbody>
</table>
<h4 id="3-9-4-lt-c-url-gt-标签使用范例"><a href="#3-9-4-lt-c-url-gt-标签使用范例" class="headerlink" title="3.9.4&lt;c:url&gt;标签使用范例"></a>3.9.4<code>&lt;c:url&gt;</code>标签使用范例</h4><pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%--引入JSTL核心标签库 --%&gt;
&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;

&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;JSTL: -- url标签实例&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;c:out value=&quot;url标签使用&quot;&gt;&lt;/c:out&gt;
    &lt;h4&gt;使用url标签生成一个动态的url，并把值存入session中.&lt;/h4&gt;
    &lt;hr/&gt;
    &lt;c:url value=&quot;http://www.baidu.com&quot; var=&quot;url&quot; scope=&quot;session&quot;&gt;
    &lt;/c:url&gt;
    &lt;a href=&quot;${url}&quot;&gt;百度首页(不带参数)&lt;/a&gt;
    &lt;hr/&gt;
    &lt;h4&gt;
    配合 &amp;lt;c:param&amp;gt;标签给url加上指定参数及参数值，生成一个动态的url然后存储到paramUrl变量中
    &lt;/h4&gt;
    &lt;c:url value=&quot;http://www.baidu.com&quot; var=&quot;paramUrl&quot;&gt;
        &lt;c:param name=&quot;userName&quot; value=&quot;codingxiaxw&quot;/&gt;
        &lt;c:param name=&quot;pwd&quot;&gt;123456&lt;/c:param&gt;
    &lt;/c:url&gt;
    &lt;a href=&quot;${paramUrl}&quot;&gt;百度首页(带参数)&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p><strong>说明:</strong> 此博客参考大神博客<a href="http://www.cnblogs.com/xdp-gacl/p/3943390.html" target="_blank" rel="external">孤傲苍狼</a></p>
<h2 id="4-联系"><a href="#4-联系" class="headerlink" title="4.联系"></a>4.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">Blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">Github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[玩转AJAX]]></title>
      <url>http://codingxiaxw.com/2016/10/28/28-AJAX%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      <content type="html"><![CDATA[<p>客户端向服务器发送请求，若服务器每次响应过来的结果都要重新加载整个界面的话这样会给服务器带来很大的压力。所以ajax出现了，它是在不重新加载整个页面的情况下与服务器交换数据并更新部分网页的技术，是一种使用现有标准的新方法。  </p>
<a id="more"></a>
<h2 id="AJAX是什么"><a href="#AJAX是什么" class="headerlink" title="AJAX是什么"></a>AJAX是什么</h2><p>1.asynchronous javascript and xml，翻译过来就是异步的js和xml。2.它能使用js语言访问服务器，而且是异步访问。3.服务器给客户端的响应一般是整个页面，一个html完整页面但在ajax中因为是局部刷新，那么服务器就不用再响应整个页面而只是响应局部。  </p>
<h2 id="服务器向客户端返回的数据类型"><a href="#服务器向客户端返回的数据类型" class="headerlink" title="服务器向客户端返回的数据类型"></a>服务器向客户端返回的数据类型</h2><p>一般客户端向服务器发送请求，服务器返回的数据类型有三种:  </p>
<ul>
<li>1.text类型:返回的数据是纯文本。</li>
<li>2.xml类型:返回的数据是xml格式，它是提供js和java交互的数据格式</li>
<li>3.json类型:它也是提供js和java交互的数据格式，在ajax中最受欢迎。</li>
</ul>
<h2 id="理解同步交互和异步交互"><a href="#理解同步交互和异步交互" class="headerlink" title="理解同步交互和异步交互"></a>理解同步交互和异步交互</h2><ul>
<li>同步交互:<ul>
<li>1.发一个请求，就要等待服务器的响应结束，然后才能发送第二个请求。</li>
<li>2刷新的是整个页面。</li>
</ul>
</li>
<li>异步交互:<ul>
<li>1.发一个请求，无需等待服务器的响应，然后就可以发第二个请求。</li>
<li>2.可以使用js来接受服务器的响应，然后使用js来局部刷新界面。</li>
</ul>
</li>
</ul>
<p>附上uml图解释这两者的区别:<br><img src="http://od2xrf8gr.bkt.clouddn.com/ajax.png" alt=""></p>
<h2 id="ajax常见应用情景"><a href="#ajax常见应用情景" class="headerlink" title="ajax常见应用情景"></a>ajax常见应用情景</h2><ul>
<li>1.搜索引擎:在搜索引擎中输入关键字，会出现一个下拉框，列出网络上与关键字相关的字眼。</li>
<li>2.注册:注册页面上填写完用户名后移开光标，会显示该用户名是否已被注册。</li>
<li>3.淘宝某个店铺下方的评论框:翻页时的异步操作。</li>
</ul>
<h2 id="ajax的优缺点"><a href="#ajax的优缺点" class="headerlink" title="ajax的优缺点"></a>ajax的优缺点</h2><ul>
<li>优点:<ul>
<li>异步交互，增强了用户的体验。</li>
<li>性能:因为服务器无需再响应整个页面，只需要响应部分内容，所以服务器的压力减轻了。</li>
</ul>
</li>
<li>缺点:<ul>
<li>ajax不能应用在所有场景</li>
<li>ajax无端的增多了对服务器的访问次数，给服务器带来了压力(比较上述优点，在减少了服务器压力的同时又给服务器带来了压力，不知你理不理解哈哈)</li>
</ul>
</li>
</ul>
<h2 id="如何使用ajax来发送异步请求"><a href="#如何使用ajax来发送异步请求" class="headerlink" title="如何使用ajax来发送异步请求"></a>如何使用ajax来发送异步请求</h2><h3 id="第一步-首先要得到XMLHttpRequest"><a href="#第一步-首先要得到XMLHttpRequest" class="headerlink" title="第一步(首先要得到XMLHttpRequest)"></a>第一步(首先要得到XMLHttpRequest)</h3><p>大多数浏览器都只是得到该对象的方法为:var xmlHttp=new XMLHttpRequest();  </p>
<p>IE6.0得到的方法为:var xmlHttp = new ActiveXObject(“Msxml2.XMLHTTP”);  </p>
<p>IE5.0以及更早版本的IE:var xmlHttp=new ActiveXObject(“Microsoft.XMLHTTP”);</p>
<p>在\<script>中编写创建XMLHttpRequest对象的函数:  </p>
<pre><code>function createXMLHttpRequest(){
        try{
            return new XMLHttpRequest();
        }catch(e){
            try{
                return new ActiveXObject(“Msxml2.XMLHTTP”);
            }catch(e){
                try{
                    return new ActiveXObject(“Microsoft.XMLHTTP”);
                }catch(e){
                    alert(“哥们，你用的是什么浏览器啊”);
                    throw e;
                }
            }
        }
    }
</code></pre><h3 id="第二步-打开与服务器的连接"><a href="#第二步-打开与服务器的连接" class="headerlink" title="第二步(打开与服务器的连接)"></a>第二步(打开与服务器的连接)</h3><p>xmlHttp.open(“”,””,boolean):用来打开与服务器的连接，它需要三个参数。1.请求参数，可以是get可以是post。2.请求的url:指定服务器端资源。3.请求是否异步，如果为true表示发送异步请求，否则发送同步请求。例如xmlHttp.open(“GET”,”项目名称/AServlet”,true);</p>
<h3 id="第三步-发送请求"><a href="#第三步-发送请求" class="headerlink" title="第三步(发送请求)"></a>第三步(发送请求)</h3><p>xmlHttp.send(参数):参数为请求体内容。如果请求方式是get，则参数为null(不可以省略null)，因为get请求方式的请求体为空;如果请求方式为post，则参数为请求体，另外还需要在此方法前面增加一个<code>mlHttp.setRequestHeader(“Content-Type”,”application/x-www-form-urlencoded”);</code>设置请求头的方法。</p>
<h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>给xmlHttp对象注册onreadystatechange监听器，这个方法用于接收从服务器发送过来的响应数据。 在该方法中需要做以下步骤: </p>
<p>1.获取xmlHttp对象的状态，xmlHttp对象一共有5个状态:  </p>
<ul>
<li>0状态:表示xmlHttp对象刚创建，还没有调用open()方法。</li>
<li>1状态：请求开始，调用了open方法，但还没有调用send方法</li>
<li>2状态：调用完了send方法</li>
<li>3状态：服务器已经开始响应，但不表示响应结束了。</li>
<li>4状态：服务器响应结束(通常我们只关心这个状态)</li>
</ul>
<p>该状态通过调用xmlHttp.readyState得到。  </p>
<p>2.得到服务器响应的状态码:通过调用xmlHttp.status得到，例如200，404，500。  </p>
<p>3.得到服务器响应的内容，由于服务器返回的类型不同，所以得到的内容类型也不同，以下3种类型采用3种方法得到: </p>
<ul>
<li>var content=xmlHttp.responseText;//服务器返回的文本为text。</li>
<li>var content=xmlHttp.responseXML;//服务器响应的文本为xml内容。xmlHttp会自动对xml文本进行解析，得到的content为document对象。</li>
<li>var content=eval(“(“+xmlHttp.responsetext+”)”);//服务器返回的文本为json数据。  </li>
</ul>
<p>完成第四步我们需要写的完整代码为:</p>
<pre><code>xmlHttp.onreadystatechange=function(){//xmlHttp的5种状态都会调用本方法
    if(xmlHttp.readState==4&amp;&amp;xmlHttp.status==200){//双重判断:判断是否为4状态，而且还要判断是否为200
        //获取服务器的响应内容
        var content=xmlHttp.responseText;//或var content= xmlHttp.responseXML;
    }
} 
</code></pre><h2 id="案例-省市联动"><a href="#案例-省市联动" class="headerlink" title="案例:省市联动"></a>案例:省市联动</h2><p>说明，该案例就是在网页上显示两个下拉列表，一个列表用于显示中国所有的省份，一个列表用于显示相应省份下的城市，当然这些数据是存在数据库中的，为了方便展示，我只在数据库中列举了两个省份和部分城市。</p>
<p>domain包下的city.java和province.java代码如下:   </p>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/province.png" alt=""><br><img src="http://od2xrf8gr.bkt.clouddn.com/city.png" alt=""></p>
<p>servlet包下的CityServlet.java与ProvinceServlet.java，用于向客户端发送响应数据代码如下:   </p>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/cityservlet.png" alt=""><br><img src="http://od2xrf8gr.bkt.clouddn.com/provinceservlet.png" alt=""></p>
<p>dao包下的ProvinceDao.java代码如下:用于与数据库连接:  </p>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/provincedao.png" alt=""></p>
<p>最终要的界面代码关于ajax的操作,代码如下:  </p>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/ajax1.png" alt=""><br><img src="http://od2xrf8gr.bkt.clouddn.com/ajax2.png" alt=""><br><img src="http://od2xrf8gr.bkt.clouddn.com/ajax3.png" alt=""></p>
<p>数据库中的表有两张，一张是省份表province,一张是城市表city,如下:   </p>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/city2.png" alt=""><br><img src="http://od2xrf8gr.bkt.clouddn.com/province2.png" alt=""></p>
<p>结果如下:  </p>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/jiemian.png" alt=""></p>
<p>当选择了相应的省份时，ajax会立即向服务器发送请求，然后服务器返回该省份下所有的城市，ajax将这些城市动态的显示在”请选择城市”列表中。达到部分刷新界面的效果。</p>
<h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">Blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw">Github@codingXiaxw</a></li>
</ul>
</script></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaWeb三大组件之过滤器(Filter)]]></title>
      <url>http://codingxiaxw.com/2016/10/27/27-JavaWeb%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8B%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>过滤器可以动态的拦截请求和响应，以变换或使用包含在请求或响应中的信息。  </p>
<p>过滤器是可用于Servlet编程的Java类，可以实现以下目的:  </p>
<ul>
<li>在客户端的请求访问后端资源之前，拦截这些请求。</li>
<li>在服务器的响应发送回客户端之前，处理这些响应。</li>
</ul>
<a id="more"></a>
<p>过滤器通过 Web 部署描述符（web.xml）中的 XML 标签来声明，然后映射到你的应用程序的部署描述符中的 Servlet 名称或 URL 模式。  </p>
<p>当 Web 容器启动 Web 应用程序时，它会为你在部署描述符中声明的每一个过滤器创建一个实例。  </p>
<p>Filter的执行顺序与在web.xml配置文件中的配置顺序一致，一般把Filter配置在所有的Servlet之前。  </p>
<h2 id="编写过滤器"><a href="#编写过滤器" class="headerlink" title="编写过滤器"></a>编写过滤器</h2><p>如何编写过滤器?  </p>
<ol>
<li>创建一个类，必须实现Filter接口</li>
<li>在web.xml中进行配置，一般把Filter配置在所有的Servlet配置之前  </li>
</ol>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/filter.png" alt=""></p>
<p>方法介绍:   </p>
<ul>
<li><strong>void init():</strong>Filter的初始化，Filter在服务器启动时就创建，创建之后马上执行这个方法。用来初始化一些参数</li>
<li><strong>void doFilter(req,resp,chain):</strong>当向服务器请求的Servlet或jsp页面在过滤器的过滤范围内时就会执行这个方法。若方法体中没有chain.doFilter()操作，则表示当向服务器请求该过滤器过滤范围内的资源(如Servlet/JSP页面/html页面等)时，这些资源中的所有方法都不会执行(被过滤掉了);若方法体中有chain.doFilter()操作，表示不对过滤器过滤范围内的资源进行过滤。(即你请求的资源下的方法会执行)</li>
<li><strong>void destroy():</strong>在服务器关闭时对Filter进行销毁，在Filter销毁之前会执行这个方法，用来对非内存资源进行释放。</li>
</ul>
<p>对方法中设计到的类介绍:  </p>
<ul>
<li><strong>FilterConfig:</strong>与ServletConfig相似，该类有如下四个方法:  <ul>
<li><strong>getInitParameter():</strong>获取初始化参数。</li>
<li><strong>getInitParameterNames():</strong>获取所有初始化参数的名称。</li>
<li><strong>getFilterName():</strong>获取过滤器的配置名称。</li>
<li><strong>getServletContext():</strong>获取application。</li>
</ul>
</li>
<li><strong>FilterChain类:</strong>该类中有一个方法:  <ul>
<li><strong>doFilter():</strong>是不是会觉得该方法与Filter接口中的doFilter()方法是一样的呢？没错，二者虽然外观看起来一样，但功能却是千差万别的。该方法被FilterChain对象调用，表示对Filter过滤器过滤范围下的资源进行放行。</li>
</ul>
</li>
</ul>
<h2 id="多过滤器的执行顺序"><a href="#多过滤器的执行顺序" class="headerlink" title="多过滤器的执行顺序"></a>多过滤器的执行顺序</h2><p>Web应用程序可以根据特定的目的定义若干个不同的过滤器，那么就需要在web.xml中对多个过滤器进行多个配置。而在web.xml中使用<code>&lt;filter-mapping&gt;</code>来控制多个过滤器的执行顺序，即哪个过滤器的<code>&lt;filter-mapping&gt;</code>配置在web.xml中的顺序排在前面那这个过滤器就先执行。  </p>
<h2 id="过滤器的四种拦截方式"><a href="#过滤器的四种拦截方式" class="headerlink" title="过滤器的四种拦截方式"></a>过滤器的四种拦截方式</h2><ul>
<li>1.拦截直接请求方式:REQUEST</li>
<li>2.拦截请求转发方式:FORWARD</li>
<li>3.拦截请求包含方式:INCLUDE</li>
<li>4.拦截错误转发方式:ERROR</li>
</ul>
<p>实现不同的拦截方式需要在<filter-mapping>中进行不同的配置:  </filter-mapping></p>
<ul>
<li><code>&lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;</code></li>
<li><code>&lt;dispatcher&gt;FORWORD&lt;/dispatcher&gt;</code></li>
<li><code>&lt;dispatcher&gt;INCLUDE&lt;/dispatcher&gt;</code></li>
<li><code>&lt;dispatcher&gt;ERROR&lt;/dispatcher&gt;</code></li>
</ul>
<p>若在web.xml配置文件中没有写出上面四个拦截配置时默认该过滤器只拦截请求。  </p>
<h2 id="过滤器的应用场景"><a href="#过滤器的应用场景" class="headerlink" title="过滤器的应用场景"></a>过滤器的应用场景</h2><p>1.执行目标资源之前做”预处理”工作，例如设置编码，这种通常都会放行，只是在目标资源执行之前做一些准备工作。(例如：几乎是所有的Servlet中都需要写<code>request.setCharacteEncoding()</code>,可以把它放入到一个Filter中。）这种过滤器没有拦截功能。  </p>
<p>2.通过条件判断是否放行，例如校验当前用户是否已经登录，或者用户IP是否已经被禁用。(有拦截操作) (粗粒度权限控制，会员有会员的权利、游客有游客的权利) </p>
<p>3.在目标资源执行后，做一些后续的特殊处理工作。例如把目标资源输出的数据进行处理。</p>
<h2 id="案例-分IP统计网站的访问次数"><a href="#案例-分IP统计网站的访问次数" class="headerlink" title="案例:分IP统计网站的访问次数"></a>案例:分IP统计网站的访问次数</h2><p>功能分析:1.统计工作需要在所有资源之前都执行，那么就可以放到Filter中了。2.我们这个过滤器不打算做拦截操作，因为我们只是用来做统计的。3.用什么东西来装载统计的数据。Map<string ,integer="">，整个网站只需要一个Map即可4.Map什么时候创建(使用ServletContextListener，在服务器启动时完成创建，并保存到SevletContext中)，Map保存到哪里:Map需要在Filter中用来保存数据;Map需要在页面使用，打印Map中的数据。  </string></p>
<p>AListener.java:<br><img src="http://od2xrf8gr.bkt.clouddn.com/AListener.png" alt="">  </p>
<p>AFilter.java:<br><img src="http://od2xrf8gr.bkt.clouddn.com/AFilter.png" alt="">  </p>
<p>show.jsp:<br><img src="http://od2xrf8gr.bkt.clouddn.com/showjsp.png" alt="">  </p>
<p>效果图:<br><img src="http://od2xrf8gr.bkt.clouddn.com/xiaoguo.png" alt=""></p>
<h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">Blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">Github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaWeb三大组件之监听器(Listener)]]></title>
      <url>http://codingxiaxw.com/2016/10/26/26-JavaWeb%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8B%E7%9B%91%E5%90%AC%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>监听器是一个专门用于对其他对象身上发生的事件或状态改变进行监听和相应处理的对象，当被监视的对象发生情况时，立即采取相应的行动。监听器其实就是一个实现特定接口的普通java程序，这个程序专门用于监听另一个java对象的方法调用或属性改变，当被监听对象发生上述事件后，监听器某个方法立即被执行。<br><a id="more"></a></p>
<p>上述概念设计到3个名词概念:</p>
<ul>
<li>1.事件源:即谁产生的事件</li>
<li>2.事件对象:即产生了什么事件</li>
<li>3.监听器:监听事件源的动作</li>
</ul>
<p>由于事件源可以产生多个动作(即产生多个事件)，而监听器中的每一个方法监听一个动作，故每个监听器中都有很多方法。</p>
<h2 id="1-JavaWeb中的监听器"><a href="#1-JavaWeb中的监听器" class="headerlink" title="1.JavaWeb中的监听器"></a>1.JavaWeb中的监听器</h2><h3 id="1-1概念"><a href="#1-1概念" class="headerlink" title="1.1概念"></a>1.1概念</h3><p>JavaWeb中的监听器是Servlet规范中定义的一种特殊类，它用于监听web应用程序中的ServletContext、HttpSession和 ServletRequest这三大域对象的创建、销毁事件以及监听这些域对象中的属性发生修改的事件。</p>
<h3 id="1-2JavaWeb中监听器的分类"><a href="#1-2JavaWeb中监听器的分类" class="headerlink" title="1.2JavaWeb中监听器的分类"></a>1.2JavaWeb中监听器的分类</h3><p>在Servlet规范中定义了多种类型的监听器(一共8个监听器)，它们用于监听的事件源分别为ServletContext，HttpSession和ServletRequest这三个域对象。Servlet规范针对这三个对象上的操作，又把多种类型的监听器划分为三种类型：  </p>
<ul>
<li>1.域对象的生命周期监听:监听域对象自身的创建和销毁。这个监听器需要实现相应的监听器接口:ServletContextListener、HttpSessionListener、ServletRequestListener。</li>
<li>2.域对象的属性监听:监听域对象中属性的增加和删除。这个监听器需要实现的监听器接口为:ServletContextAttributeListener、HttpSessionAttributeListener、ServletRequestAttributeListener</li>
<li>3.感知监听(都与HttpSession域对象有关):监听绑定到HttpSession域中的某个JavaBean对象的状态的监听器。这个监听器需要实现的监听器接口:HttpSessionBindingListener、HttpSessionActiveationListener.</li>
</ul>
<h3 id="1-3第一类-域对象的生命周期监听"><a href="#1-3第一类-域对象的生命周期监听" class="headerlink" title="1.3第一类:域对象的生命周期监听"></a>1.3第一类:域对象的生命周期监听</h3><p>事件源为:三大域<br>事件对象为:创建与销毁<br>监听器为:实现了ServletContextListener、HttpSessionListener、ServletRequestListener这三个接口的监听器  </p>
<h4 id="1-3-1ServletContext的生命周期监听"><a href="#1-3-1ServletContext的生命周期监听" class="headerlink" title="1.3.1ServletContext的生命周期监听"></a>1.3.1ServletContext的生命周期监听</h4><pre><code>public class AListener implements ServletContextListener{

    public void contextInitialized(ServletContextEvent sce)
    {
      //在项目启动时调用
    }

    public void contextDestroyed(ServletContextEvent sce)
    {
      //在项目关闭时调用
    }
}
</code></pre><p>在web.xml文件中对该监听器进行配置:<br><img src="http://od2xrf8gr.bkt.clouddn.com/alistern.png" alt=""></p>
<h4 id="1-3-2HttpSession的生命周期监听"><a href="#1-3-2HttpSession的生命周期监听" class="headerlink" title="1.3.2HttpSession的生命周期监听"></a>1.3.2HttpSession的生命周期监听</h4><p>代码同上述基本一致:  </p>
<pre><code>public class AListener implements HttpSessionListener{

    public void sessionCreated(HttpSessionEvent sce)
    {
      //在会话产生时调用
    }

    public void sessionDestroyed(HttpSessionEvent sce)
    {
      //在会话关闭时调用
    }
}
</code></pre><p>同样需要在web.xml文件中进行配置:<br><img src="http://od2xrf8gr.bkt.clouddn.com/alistern.png" alt=""></p>
<h4 id="1-3-3ServletRequest的生命周期"><a href="#1-3-3ServletRequest的生命周期" class="headerlink" title="1.3.3ServletRequest的生命周期"></a>1.3.3ServletRequest的生命周期</h4><p>代码同上述基本一致:  </p>
<pre><code>public class AListener implements ServletRequestListener{

    public void rquestInitialized(ServletRequestEvent sce)
    {
      //在请求产生时调用
    }

    public void requestDestroyed(ServletRequestEvent sce)
    {
      //在请求关闭时调用
    }
}
</code></pre><p>同样需要在web.xml文件中进行配置:<br><img src="http://od2xrf8gr.bkt.clouddn.com/alistern.png" alt="">  </p>
<h4 id="1-3-4对各个监听器接口的方法中出现的类介绍"><a href="#1-3-4对各个监听器接口的方法中出现的类介绍" class="headerlink" title="1.3.4对各个监听器接口的方法中出现的类介绍"></a>1.3.4对各个监听器接口的方法中出现的类介绍</h4><p>ServletContextEvent类:类中有一个方法getServletContext(),该方法返回ServletContext对象。</p>
<p>HttpSessionEvent类:类中有一个方法getSession()，该方法返回一个HttpSession对象。  </p>
<p>ServletRequestEvent类:类中有两个方法，getServletContext()用于返回一个ServletContext对象，getServletRequest()用于返回一个ServletRequest对象。</p>
<h3 id="1-4第二类-域对象的属性监听"><a href="#1-4第二类-域对象的属性监听" class="headerlink" title="1.4第二类:域对象的属性监听"></a>1.4第二类:域对象的属性监听</h3><p>事件源:三大域<br>事件对象:属性的增加与删除<br>监听器:实现了ServletContextAttributeListener、HttpSessionAttributeListener、ServletRequestAttributeListener接口的监听器  </p>
<h4 id="1-4-1ServletContext的属性监听"><a href="#1-4-1ServletContext的属性监听" class="headerlink" title="1.4.1ServletContext的属性监听"></a>1.4.1ServletContext的属性监听</h4><pre><code>public class AListener implements ServletContextAttributeListener{

    public void attributeAdded(ServletcontextAttribute scab){
      //给ServletContext对象添加属性时调用
    }

    public void attributeRemoved(ServletContextAttributeEvent scab){
    //给ServletContext对象删除属性时调用
    }

    public void attributeReplaced(ServletContextAttributeEvent scab){
    //给ServletContext对象替换属性值时调用
    }
}
</code></pre><p>同样需要在web.xml文件中对AListener进行配置。</p>
<h4 id="1-4-2HttpSession的属性监听"><a href="#1-4-2HttpSession的属性监听" class="headerlink" title="1.4.2HttpSession的属性监听"></a>1.4.2HttpSession的属性监听</h4><pre><code>public class AListener implements HttpSessionAttributeListener{

    public void attributeAdded(HttpSessionAttribute scab){
      //给HttpSession对象添加属性时调用
    }

    public void attributeRemoved(HttpSessionAttributeEvent scab){
    //给HttpSession对象删除属性时调用
    }    

    public void attributeReplaced(HttpSessionAttributeEvent scab){
    //给HttpSession对象替换属性值时调用
    }
}
</code></pre><p>同样需要在web.xml中对AListener进行配置。</p>
<h4 id="1-4-3ServletRequest的属性监听"><a href="#1-4-3ServletRequest的属性监听" class="headerlink" title="1.4.3ServletRequest的属性监听"></a>1.4.3ServletRequest的属性监听</h4><pre><code>public class AListener implements ServletRequestAttributeListener{

    public void attributeAdded(ServletRequestAttribute scab){
      //给ServletRequest对象添加属性时调用
    }

    public void attributeRemoved(ServletRequestAttributeEvent scab){
    //给ServletRequest对象删除属性时调用
    }

    public void attributeReplaced(ServletRequestAttributeEvent scab){
    //给ServletRequest对象替换属性值时调用
    }
}
</code></pre><p>同样需要在web.xml中对AListener进行配置。</p>
<h4 id="1-4-4对各个监听器接口的方法中出现的类介绍"><a href="#1-4-4对各个监听器接口的方法中出现的类介绍" class="headerlink" title="1.4.4对各个监听器接口的方法中出现的类介绍"></a>1.4.4对各个监听器接口的方法中出现的类介绍</h4><p>ServletContextAttributeEvent类:该类对象有三个方法，getSevletContext()用于返回一个ServletContext，getName()用于返回属性名，getValue()用于返回属性值。  </p>
<p>HttpSessionBindingEvent类:该类对象有两个方法，getName()用于获取属性名，getValue()用于获取属性值。  </p>
<p>ServletRequestAttributeEvent类:该类对象有两个方法，getName()用于获取属性名，getValue()用于获取属性值。  </p>
<h3 id="1-5感知监听器"><a href="#1-5感知监听器" class="headerlink" title="1.5感知监听器"></a>1.5感知监听器</h3><p>保存在Session域中的对象可以有多种状态：绑定(session.setAttribute(“bean”,Object))到Session中,随Session对象持久化到一个存储设备中；从Session域中解除(session.removeAttribute(“bean”))绑定,随Session对象从一个存储设备中恢复。  </p>
<p>Servlet 规范中定义了两个特殊的监听器接口”HttpSessionBindingListener和HttpSessionActivationListener”来帮助JavaBean 对象了解自己在Session域中的这些状态，实现这两个接口的类不需要 web.xml 文件中进行注册。  </p>
<h4 id="1-5-1HttpSessionBindingListener接口"><a href="#1-5-1HttpSessionBindingListener接口" class="headerlink" title="1.5.1HttpSessionBindingListener接口"></a>1.5.1HttpSessionBindingListener接口</h4><p>实现了HttpSessionBindingListener接口的JavaBean对象可以感知自己被绑定到Session中和 Session中删除的事件。  </p>
<p>当对象被绑定到HttpSession对象中时，web服务器调用该对象的void valueBound(HttpSessionBindingEvent event)方法。  </p>
<p>当对象从HttpSession对象中解除绑定时，web服务器调用该对象的void valueUnbound(HttpSessionBindingEvent event)方法。</p>
<pre><code>17public class JavaBeanDemo1 implements HttpSessionBindingListener {
18 
19     private String name;
20     
21     @Override
22     public void valueBound(HttpSessionBindingEvent event) {
23         System.out.println(name+&quot;被加到session中了&quot;);
24     }
25 
26     @Override
27     public void valueUnbound(HttpSessionBindingEvent event) {
28         System.out.println(name+&quot;被session踢出来了&quot;);
29     }
30 
31     public String getName() {
32         return name;
33     }
34 
35     public void setName(String name) {
36         this.name = name;
37     }
38 
39     public JavaBeanDemo1(String name) {
40         this.name = name;
41     }
42 }
</code></pre><p>上述的JavaBeanDemo1这个javabean实现了HttpSessionBindingListener接口，那么这个JavaBean对象可以感知自己被绑定到Session中和从Session中删除的这两个操作。  </p>
<h4 id="1-5-2HttpSessionActivationListener接口"><a href="#1-5-2HttpSessionActivationListener接口" class="headerlink" title="1.5.2HttpSessionActivationListener接口"></a>1.5.2HttpSessionActivationListener接口</h4><p>实现了HttpSessionActivationListener接口的JavaBean对象可以感知自己被活化(反序列化)和钝化(序列化)的事件。  </p>
<p>当绑定到HttpSession对象中的javabean对象将要随HttpSession对象被钝化(序列化)之前，web服务器调用该javabean对象的void sessionWillPassivate(HttpSessionEvent event) 方法。这样javabean对象就可以知道自己将要和HttpSession对象一起被序列化(钝化)到硬盘中。  </p>
<p>当绑定到HttpSession对象中的javabean对象将要随HttpSession对象被活化(反序列化)之后，web服务器调用该javabean对象的void sessionDidActive(HttpSessionEvent event)方法。这样javabean对象就可以知道自己将要和 HttpSession对象一起被反序列化(活化)回到内存中。(javabean随着HttpSession对象一起被活化的前提是该javabean对象除了实现该接口外还应该实现Serialize接口)。  </p>
<pre><code>27 public class JavaBeanDemo2 implements HttpSessionActivationListener,
28         Serializable {
29 
30      
31     private static final long serialVersionUID = 7589841135210272124L;
32     private String name;
33     
34     @Override
35     public void sessionWillPassivate(HttpSessionEvent se) {
36         
37         System.out.println(name+&quot;和session一起被序列化(钝化)到硬盘了，session的id是：&quot;+se.getSession().getId());
38     }
39 
40     @Override
41     public void sessionDidActivate(HttpSessionEvent se) {
42         System.out.println(name+&quot;和session一起从硬盘反序列化(活化)回到内存了，session的id是：&quot;+se.getSession().getId());
43     }
44 
45     public String getName() {
46         return name;
47     }
48 
49     public void setName(String name) {
50         this.name = name;
51     }
52 
53     public JavaBeanDemo2(String name) {
54         this.name = name;
55     }
56 }
</code></pre><p>既然这里谈到了session的序列化(钝化)，反序列化(活化)那我们就来具体聊聊。</p>
<h2 id="2-session序列化-钝化"><a href="#2-session序列化-钝化" class="headerlink" title="2.session序列化(钝化)"></a>2.session序列化(钝化)</h2><p>在session上线时，会在tomcat／work／Catalina／localhost／项目名／下生成一个sessions.ser文件，里面存放了所有session的信息，当你正在访问某个网页时若此时服务器关闭(关闭时才生成这个文件)又打开(打开后这个文件会消失)，你依旧能正常访问该网页。(故说session有重生的效果)。<br>若想废掉session的序列化,需要在tomcat／conf／context.xml中添加\<manager pathname="“”/"></manager></p>
<h2 id="3-session的钝化与活化"><a href="#3-session的钝化与活化" class="headerlink" title="3.session的钝化与活化"></a>3.session的钝化与活化</h2><p>Tomcat会在session一段时间内不被使用时钝化session对象，所谓钝化session，就是把session通过序列化的方法保存到硬盘文件中。当用户再使用session时，Tomcat还会把钝化的对象再活化session，所谓活化就是把硬盘文件中的session在反序列化中放回内存。当session被tomcat钝化时，sesseion中存储的对象也被钝化，当session被活化时，也会把session中存储的对象(javabean对象)活化。如果某个类(javabean对象)实现了HttpSessionActiveationListener接口后，当对象随着session被钝化和活化时，下面两个方法就会被调用:</p>
<pre><code>public void sessionWillPassivate(HttpSessionEvent se):当对象感知被活化时调用本方法。  
public void sessionDidActivate(HttpSessionEvent se):当对象感知被钝化时调用本方法。
</code></pre><p>钝化时会在tomcat/work/Catalina/localhost/项目/mysession／文件下生成一个后缀为.session的文件，网页中一个被钝化的session就对应一个.session文件(而上面的序列化是一个.ser文件存在所有的session)，在活化时此文件也不会消失(不同于上述的.ser文件消失)。<br>当然要看到上述效果，应该先配置tomcat钝化session的参数，在tomcat/conf/catalina/localhost目录下，添加以下配置内容(google一下吧)。</p>
<h2 id="4-联系"><a href="#4-联系" class="headerlink" title="4.联系"></a>4.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">Blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">Github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaWeb项目之客户管理系统]]></title>
      <url>http://codingxiaxw.com/2016/10/25/25-JavaWeb%E9%A1%B9%E7%9B%AE%E4%B9%8B%E5%AE%A2%E6%88%B7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<h2 id="1-项目介绍"><a href="#1-项目介绍" class="headerlink" title="1.项目介绍"></a>1.项目介绍</h2><h3 id="1-1功能介绍"><a href="#1-1功能介绍" class="headerlink" title="1.1功能介绍"></a>1.1功能介绍</h3><ul>
<li>添加客户:添加客户的信息，包括姓名，性别，手机，邮箱，自我描述</li>
<li>查询客户:查询数据库中所有的客户，查询结果将客户信息以列表的形式给出，可以对列表中的客户信息进行编辑及删除</li>
<li>高级搜索:多条件组合在数据库中进行客户信息的查询，搜索结果以列表的形式给出，可以对列表中的客户信息进行编辑及删除</li>
<li>10月30日更:新增分页功能，逻辑性很强。</li>
</ul>
<a id="more"></a>
<p>源码见我<a href="https://github.com/codingXiaxw/JavaWeb-Project-CustomerManagement" target="_blank" rel="external">github上的project</a>  </p>
<h3 id="1-2运用知识"><a href="#1-2运用知识" class="headerlink" title="1.2运用知识"></a>1.2运用知识</h3><ul>
<li>数据库基本查询</li>
<li>数据库连接池c3p0</li>
<li>运用dbutil.jar包一键封装表单数据到bean对象中</li>
<li>利用dbutils.jar包简化对数据库增、删、改、查的代码</li>
<li>标签库</li>
<li>JavaWeb三层框架的分离</li>
<li>将servlet的转发、重定向及方法进行封装，这样当设计到多个功能时不用建立多个servlet类。</li>
<li>反射</li>
</ul>
<h2 id="2-准备"><a href="#2-准备" class="headerlink" title="2.准备"></a>2.准备</h2><p>1.导入第三方jar包以及c3p0配置文件。</p>
<ul>
<li>c3p0.jar</li>
<li>mchange-commons.java.jar</li>
<li>commons-beanutils.jar</li>
<li>commons-dbutils.jar</li>
<li>commons-logging.jar</li>
<li>自己写的小工具itcast-tools.jar</li>
<li>jstl.jar</li>
<li>mysql-connector-java.jar</li>
</ul>
<p>2.建包</p>
<ul>
<li>dao</li>
<li>service</li>
<li>servlet</li>
<li>domain</li>
</ul>
<h2 id="3-搭建环境"><a href="#3-搭建环境" class="headerlink" title="3.搭建环境"></a>3.搭建环境</h2><p>IntelliJ IDEA  +  MySQL</p>
<h2 id="4-使用方法"><a href="#4-使用方法" class="headerlink" title="4.使用方法"></a>4.使用方法</h2><p>1.git clone <a href="https://github.com/codingXiaxw/JavaWeb-Project-CustomerManagement.git" target="_blank" rel="external">https://github.com/codingXiaxw/JavaWeb-Project-CustomerManagement.git</a>  </p>
<p>2.使用IntelliJ IDEA导入打开即可。</p>
<h2 id="5-项目功能截图"><a href="#5-项目功能截图" class="headerlink" title="5.项目功能截图"></a>5.项目功能截图</h2><h3 id="5-1添加客户"><a href="#5-1添加客户" class="headerlink" title="5.1添加客户"></a>5.1添加客户</h3><p><img src="http://od2xrf8gr.bkt.clouddn.com/tianjia.png" alt=""></p>
<h3 id="5-2查询客户"><a href="#5-2查询客户" class="headerlink" title="5.2查询客户"></a>5.2查询客户</h3><p><img src="http://od2xrf8gr.bkt.clouddn.com/chaxun.png" alt=""></p>
<h3 id="5-3编辑客户"><a href="#5-3编辑客户" class="headerlink" title="5.3编辑客户"></a>5.3编辑客户</h3><p><img src="http://od2xrf8gr.bkt.clouddn.com/bianji.png" alt=""></p>
<h3 id="5-4高级搜索客户"><a href="#5-4高级搜索客户" class="headerlink" title="5.4高级搜索客户"></a>5.4高级搜索客户</h3><p><img src="http://od2xrf8gr.bkt.clouddn.com/sousuo.png" alt=""></p>
<h3 id="5-5-10月30日更新分页界面"><a href="#5-5-10月30日更新分页界面" class="headerlink" title="5.5 10月30日更新分页界面"></a>5.5 10月30日更新分页界面</h3><p><img src="http://od2xrf8gr.bkt.clouddn.com/fenye.png" alt=""></p>
<h2 id="6-联系"><a href="#6-联系" class="headerlink" title="6.联系"></a>6.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">Blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">Github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用Java实现网络爬虫三之开始爬取]]></title>
      <url>http://codingxiaxw.com/2016/10/23/22-%E7%94%A8Java%E5%86%99%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%89%E4%B9%8B%E5%BC%80%E5%A7%8B%E7%88%AC%E5%8F%96/</url>
      <content type="html"><![CDATA[<p>下面的代码用于爬取知乎推荐页面的所有问题、问题描述、地址、回答内容，爬取地址为<a href="http://www.zhihu.com/explore/recommendations" target="_blank" rel="external">http://www.zhihu.com/explore/recommendations</a>   </p>
<p>项目源代码见我<a href="https://github.com/codingXiaxw/Crawler" target="_blank" rel="external">github上的project</a></p>
<a id="more"></a>
<h2 id="代码介绍"><a href="#代码介绍" class="headerlink" title="代码介绍"></a>代码介绍</h2><p>1.新建Zhihu.java类，它是一个JavaBean类，用于封装我们需要得到的内容。代码如下:  </p>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/zhihu.png" alt="">  </p>
<p>2.新建Spider.java类包括两个方法:  </p>
<ul>
<li>String sendGet(String url):用于获取网页源码。<br><img src="http://od2xrf8gr.bkt.clouddn.com/sendget.png" alt="">  </li>
</ul>
<p>打印出result可以得到网页的源码，会看到下面这一串串代码:<br><img src="http://od2xrf8gr.bkt.clouddn.com/source.png" alt="">  </p>
<p>找到我们需要爬取的标题那一块，可以看到:<br><img src="http://od2xrf8gr.bkt.clouddn.com/lianjie.png" alt="">  </p>
<p>href=””中的内容即是标题的地址链接，而<a></a>中的内容即是我们需要的标题。那我们该如何使用正则表达式爬取到这些内容呢？标题可以使用<code>&quot;question_link.+?&gt;(.+?)&lt;&quot;</code>来匹配得到，而链接可以使用<code>&quot;&lt;h2&gt;.+?question_link.+?href=\&quot;(.+?)\&quot;.+?&lt;/h2&gt;&quot;</code>来匹配得到。下面我们就来看看Spide.java中的第二个方法，如何匹配我们我们的内容。</p>
<ul>
<li>ArrayList<zhihu> regexString(String targetStr,String regex):用于将正则表达式和网页源码进行匹配，将得到的内容封装到Zhihu对象中，然后将对象加入到集合lists中，返回集合。</zhihu></li>
</ul>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/regexstring.png" alt=""></p>
<p>最后我们只需要定义一个测试类，先调用Spider的sendGet(String url)方法中传入目标网页url并得到返回的网页源码，然后调用Spider的regexString(String target)方法得到返回的Zhihu对象的集合，然后将这些内容打印出来，即可看到我们爬取到的内容。  </p>
<p>测试类:<br><img src="http://od2xrf8gr.bkt.clouddn.com/test.png" alt="">  </p>
<p>打印出的内容:<br><img src="http://od2xrf8gr.bkt.clouddn.com/lianjie2.png" alt=""> </p>
<p>这样我们便实现了从一个页面上爬取到我们所需信息的网络爬虫。如何进阶呢？  </p>
<p>问题分析:  </p>
<ul>
<li>1.从打印台的信息我们可以发现，我们爬取到的问题地址链接并不是属于问题的地址链接，而是属于回答的地址链接，那么这里我们就需要截掉链接后半部分的”/answer/数字”部分。  <blockquote>
<p>解决方法如下:对爬取到的链接采取二次正则表达式的方法进行再一次匹配，需要匹配的字符串即为<code>/question/数字部分</code>，这样我们就将链接作为目标字符串，将该数字部分作为正则表达式即可。代码如下:  </p>
<pre><code>在Zhihu.java文件下添加方法:
boolean getRealUrl(String url)
{
    String regex=&quot;question/(.+?)/&quot;;
    Pattern pattern=Pattern.compile(regex);
    Matcher matcher=pattern.matcher(url);
        while (matcher.find())
        {
            zhihuUrl=&quot;http://www.zhihu.com/question/&quot;+matcher.group(1);
            return true;
        }
    return false;
}
</code></pre></blockquote>
</li>
</ul>
<ul>
<li><p>2.我们爬取的只是一个页面的相关内容，并没有发挥爬虫的真正强大之处。所以接下来我们就将从该页面爬取到的链接作为二次起始链接。只需在Zhihu.java的构造函数里添加如下方法即可:  </p>
<pre><code>if (getRealUrl(url))
{
    System.out.println(&quot;正在抓取链接&quot;+zhihuUrl);

    String content=Spider.sendGet(zhihuUrl);

    Pattern pattern;
    Matcher matcher;

    pattern=Pattern.compile(&quot;zh-question-title.+?&lt;h2.+?&gt;(.+?)&lt;/h2&gt;&quot;);
    matcher=pattern.matcher(content);
    if (matcher.find()) {
        title = matcher.group(1);
    }

    pattern=Pattern.compile(&quot;zh-question-detail.+?&lt;div.+?&gt;(.*?)&lt;/div&gt;&quot;);
    matcher=pattern.matcher(content);
    if (matcher.find()) {
        titleDescription=matcher.group(1);
    }

    pattern=Pattern.compile(&quot;/answer/content.+?&lt;div.+?&gt;(.*?)&lt;/div&gt;&quot;);
    matcher=pattern.matcher(content);
    while (matcher.find())
    {
        answers.add(matcher.group(1));
    }

}
</code></pre></li>
</ul>
<p>这样当我们在Spider类的regexString()方法里，每当用构造方法创建一个Zhihu对象时就会执行上述代码生成从一个链接爬取到的文章标题、内容、标题描述即回答内容并封装到该Zhihu对象里，然后继续执行Spider后面的代码时将该对象添加至list集合中。  </p>
<p>最后打印出的内容如下:<br><img src="http://od2xrf8gr.bkt.clouddn.com/printi2.png" alt=""></p>
<p>项目源代码见我<a href="https://github.com/codingXiaxw/Crawler" target="_blank" rel="external">Github</a>,地址为 <a href="https://github.com/codingXiaxw/Crawler" target="_blank" rel="external">https://github.com/codingXiaxw/Crawler</a>  </p>
<h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">Blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">Github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用Java实现网络爬虫二之Java正则表达式]]></title>
      <url>http://codingxiaxw.com/2016/10/23/21-%E7%94%A8Java%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%BA%8C%E4%B9%8BJava%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>正则表达式定义了字符串的模式，可以用来搜索、编辑或处理文本，正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。  </p>
<a id="more"></a>
<p>爬虫项目源代码见我<a href="https://github.com/codingXiaxw/Crawler" target="_blank" rel="external">github上的project</a></p>
<h2 id="1-正则表达式语法"><a href="#1-正则表达式语法" class="headerlink" title="1.正则表达式语法"></a>1.正则表达式语法</h2><table>
<thead>
<tr>
<th>字符</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>\</td>
<td style="text-align:center">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，”n”匹配字符”n”。”\n”匹配换行符。序列”\“匹配”\”，”(“匹配”(“。</td>
</tr>
<tr>
<td>^</td>
<td style="text-align:center">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与”\n”或”\r”之后的位置匹配。</td>
</tr>
<tr>
<td>$</td>
<td style="text-align:center">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与”\n”或”\r”之前的位置匹配。</td>
</tr>
<tr>
<td>*</td>
<td style="text-align:center">零次或多次匹配前面的字符或子表达式。例如，zo<em> 匹配”z”和”zoo”。</em> 等效于 {0,}。</td>
</tr>
<tr>
<td>+</td>
<td style="text-align:center">一次或多次匹配前面的字符或子表达式。例如，”zo+”与”zo”和”zoo”匹配，但与”z”不匹配。+ 等效于 {1,}。</td>
</tr>
<tr>
<td>?</td>
<td style="text-align:center">零次或一次匹配前面的字符或子表达式。例如，”do(es)?”匹配”do”或”does”中的”do”。? 等效于 {0,1}。当此字符紧随任何其他限定符（ * 、+、?、{n}、{n,}、{n,m}）之后时，匹配模式是”非贪心的”。”非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的”贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串”oooo”中，”o+?”只匹配单个”o”，而”o+”匹配所有”o”。</td>
</tr>
<tr>
<td>{n}</td>
<td style="text-align:center">n 是非负整数。正好匹配 n 次。例如，”o{2}”与”Bob”中的”o”不匹配，但与”food”中的两个”o”匹配。</td>
</tr>
<tr>
<td>{n,}</td>
<td style="text-align:center">n 是非负整数。至少匹配 n 次。例如，”o{2,}”不匹配”Bob”中的”o”，而匹配”foooood”中的所有 o。”o{1,}”等效于”o+”。”o{0,}”等效于”o*”。</td>
</tr>
<tr>
<td>{n,m}</td>
<td style="text-align:center">M 和 n 是非负整数，其中 n &lt;= m。匹配至少 n 次，至多 m 次。例如，”o{1,3}”匹配”fooooood”中的头三个 o。’o{0,1}’ 等效于 ‘o?’。注意：不能将空格插入逗号和数字之间。</td>
</tr>
<tr>
<td>.</td>
<td style="text-align:center">匹配除”\r\n”之外的任何单个字符。若要匹配包括”\r\n”在内的任意字符，请使用诸如”[\s\S]”之类的模式。</td>
</tr>
<tr>
<td>x｜y</td>
<td style="text-align:center">匹配 x 或 y。例如，’z｜food’ 匹配”z”或”food”。’(z｜f)ood’ 匹配”zood”或”food”。</td>
</tr>
<tr>
<td>[xyz]</td>
<td style="text-align:center">字符集。匹配包含的任一字符。例如，”[abc]”匹配”plain”中的”a”。</td>
</tr>
<tr>
<td>[^xyz]</td>
<td style="text-align:center">反向字符集。匹配未包含的任何字符。例如，”[^abc]”匹配”plain”中”p”，”l”，”i”，”n”。</td>
</tr>
<tr>
<td>[a-z]</td>
<td style="text-align:center">字符范围。匹配指定范围内的任何字符。例如，”[a-z]”匹配”a”到”z”范围内的任何小写字母。</td>
</tr>
<tr>
<td>[^a-z]</td>
<td style="text-align:center">反向范围字符。匹配不在指定的范围内的任何字符。例如，”[^a-z]”匹配任何不在”a”到”z”范围内的任何字符。</td>
</tr>
<tr>
<td>\b</td>
<td style="text-align:center">匹配一个字边界，即字与空格间的位置。例如，”er\b”匹配”never”中的”er”，但不匹配”verb”中的”er”。</td>
</tr>
<tr>
<td>\B</td>
<td style="text-align:center">非字边界匹配。”er\B”匹配”verb”中的”er”，但不匹配”never”中的”er”。</td>
</tr>
<tr>
<td>\d</td>
<td style="text-align:center">数字字符匹配。等效于 [0-9]。</td>
</tr>
<tr>
<td>\D</td>
<td style="text-align:center">非数字字符匹配。等效于 [^0-9]。</td>
</tr>
<tr>
<td>\n</td>
<td style="text-align:center">换行符匹配。等效于 \x0a 和 \cJ。</td>
</tr>
<tr>
<td>\f</td>
<td style="text-align:center">换页符匹配。等效于 \x0c 和 \cL。</td>
</tr>
<tr>
<td>\r</td>
<td style="text-align:center">匹配一个回车符。等效于 \x0d 和 \cM。</td>
</tr>
<tr>
<td>\s</td>
<td style="text-align:center">匹配任何空白字符，包括空格、制表符、换页符等。与 [ \f\n\r\t\v] 等效。</td>
</tr>
<tr>
<td>\S</td>
<td style="text-align:center">匹配任何非空白字符。与 [^ \f\n\r\t\v] 等效。</td>
</tr>
<tr>
<td>\t</td>
<td style="text-align:center">制表符匹配。与 \x09 和 \cI 等效。</td>
</tr>
<tr>
<td>\w</td>
<td style="text-align:center">匹配任何字类字符，包括下划线。与”[A-Za-z0-9_]”等效。</td>
</tr>
<tr>
<td>\W</td>
<td style="text-align:center">与任何非单词字符匹配。与”[^A-Za-z0-9_]”等效。</td>
</tr>
</tbody>
</table>
<h2 id="2-Pattern类与Matcher类详解"><a href="#2-Pattern类与Matcher类详解" class="headerlink" title="2.Pattern类与Matcher类详解"></a>2.Pattern类与Matcher类详解</h2><p>java.util.regex是一个用正则表达式所订制的模式来对字符串进行匹配工作的类库包。它包括两个类：Pattern和Matcher。一个Pattern对象是一个正则表达式经编译后的表现模式；一个Matcher对象是一个状态机器，它依据Pattern对象做为匹配模式对字符串展开匹配检查。 首先一个Pattern实例订制了一个所用语法与PERL的类似的正则表达式经编译后的模式，然后一个Matcher实例在这个给定的Pattern实例的模式控制下进行字符串的匹配工作。  </p>
<p>以下我们就分别来看看这两个类: </p>
<h3 id="2-1-捕获组的概念"><a href="#2-1-捕获组的概念" class="headerlink" title="2.1 捕获组的概念"></a>2.1 捕获组的概念</h3><p>捕获组可以通过从左到右计算其开括号来编号，编号是从1开始的。例如，在表达式<code>((A)(B(C)))</code>中，存在四个这样的组:  </p>
<pre><code>第0组:    ((A)(B(C)))
第1组:    (A)
第2组:    (B(C))
第3组:    (C)
</code></pre><p>组零始终代表整个表达式，以(?)开头的组是纯的非捕获组，它不捕获文本，也不针对组合进行计数。  </p>
<p>与组关联的捕获输入始终是与组最近匹配的子序列。如果由于量化的缘故再次计算了组，则在第二次计算失败时将保留其以前捕获的值(如果有的话)，例如，将字符串”aba”与表达式(a(b)?)+相匹配，会将第二组设置为”b”。在每个匹配的开头，所有捕获的输入都会被丢弃。</p>
<h3 id="2-3详解Pattern类和Matcher类"><a href="#2-3详解Pattern类和Matcher类" class="headerlink" title="2.3详解Pattern类和Matcher类"></a>2.3详解Pattern类和Matcher类</h3><p>java正则表达式通过java.util.regex包下的Pattern类与Matcher类实现(建议在阅读本文时,打开java API文档,当介绍到哪个方法时,查看java API中的方法说明,效果会更佳).  </p>
<p>Pattern类用于创建一个正则表达式,也可以说创建一个匹配模式,它的构造方法是私有的,不可以直接创建,但可以通过Pattern.complie(String regex)简单工厂方法创建一个正则表达式, Java代码示例:  </p>
<pre><code>Pattern p=Pattern.compile(&quot;\\w+&quot;);

p.pattern();//返回 \w+ 
//或者直接输出p,例如System.out.println(p);得到的也是\w+。
</code></pre><p>pattern() 返回正则表达式的字符串形式,其实就是返回Pattern.complile(String regex)的regex参数(当然regex中的某些特殊字符应在其前加上“\”进行转义)。如上方的”\w”就需要在”w”前面的”\”加上”\”进行转义。</p>
<h4 id="2-3-1Pattern-split-CharSequence-input"><a href="#2-3-1Pattern-split-CharSequence-input" class="headerlink" title="2.3.1Pattern.split(CharSequence input)"></a>2.3.1Pattern.split(CharSequence input)</h4><p>Pattern有一个split(CharSequence input)方法，用于分隔字符串，并返回一个String[]，我猜String.split(String regex)就是通过该方法来实现的。代码示例:  </p>
<pre><code>Pattern p=Pattern.compile(&quot;\\d+&quot;); 

String[] str=p.split(&quot;我的QQ是:456456我的电话是:0532214我的邮箱是:aaa@aaa.com&quot;); 
</code></pre><p>结果:str[0]=”我的QQ是:” str[1]=”我的电话是:” str[2]=”我的邮箱是:aaa@aaa.com” 。</p>
<h4 id="2-3-2Pattern-matches-String-regex-CharSequence-input"><a href="#2-3-2Pattern-matches-String-regex-CharSequence-input" class="headerlink" title="2.3.2Pattern.matches(String regex,CharSequence input)"></a>2.3.2Pattern.matches(String regex,CharSequence input)</h4><p>是一个静态方法，用于快速匹配字符串，该方法适合用于只匹配一次，且匹配全部字符串。代码示例:  </p>
<pre><code>Pattern.matches(&quot;\\d+&quot;,&quot;2223&quot;);//返回true 
Pattern.matches(&quot;\\d+&quot;,&quot;2223aa&quot;);//返回false,需要匹配到所有字符串才能返回true,这里aa不能匹配到 
Pattern.matches(&quot;\\d+&quot;,&quot;22bb23&quot;);//返回false,需要匹配到所有字符串才能返回true,这里bb不能匹配到 
</code></pre><h4 id="2-3-3Pattern-matcher-charSequence-input"><a href="#2-3-3Pattern-matcher-charSequence-input" class="headerlink" title="2.3.3Pattern.matcher(charSequence input)"></a>2.3.3Pattern.matcher(charSequence input)</h4><p>说了这么多，终于轮到Matcher类登场了，Pattern.matcher(CharSequence input)返回一个Matcher对象。Matcher类的构造方法也是私有的，不能随意创建，只能通过Pattern.matcher(CharSequence input)方法得到该类的实例。Pattern类只能做一些简单的匹配操作，要想得到更强更便捷的正则匹配操作，那就需要将Pattern与Matcher一起合作。Matcher类提供了对正则表达式的分组支持，以及对正则表达式的多次匹配支持。代码示例:  </p>
<pre><code>Pattern p=Pattern.compile(&quot;\\d+&quot;); 
Matcher m=p.matcher(&quot;22bb23&quot;); 
m.pattern();//返回正则表达式，等同于System.out.println(p)中的p或者System.out.println(p.pattern())中的p.pattern()
System.out.println(m);//返回p 也就是返回该Matcher对象是由哪个Pattern对象的创建的 
</code></pre><h4 id="2-3-4Matcher-matches-Matcher-lookingAt-Matcher-find"><a href="#2-3-4Matcher-matches-Matcher-lookingAt-Matcher-find" class="headerlink" title="2.3.4Matcher.matches()/Matcher.lookingAt()/Matcher.find"></a>2.3.4Matcher.matches()/Matcher.lookingAt()/Matcher.find</h4><p>Matcher类提供三个匹配操作方法，三个方法均返回boolean类型，当匹配到时返回true，没匹配到则返回false。  </p>
<p><strong>matches()</strong>方法对整个字符串进行匹配，只有整个字符串都匹配了才返回true。代码示例:  </p>
<pre><code>Pattern p=Pattern.compile(&quot;\\d+&quot;); 
Matcher m=p.matcher(&quot;22bb23&quot;); 
m.matches();//返回false,因为bb不能被\d+匹配,导致整个字符串匹配未成功. 

Matcher m2=p.matcher(&quot;2223&quot;); 
m2.matches();//返回true,因为\d+匹配到了整个字符串
</code></pre><p>我们现在回头看一下Pattern.matches(String regex,CharSequence input),它与下面这段代码等价:<code>Pattern.compile(String regex).matcher(String input).matches();</code>  </p>
<p><strong>lookingAt()</strong>对前面的字符串进行匹配，只有匹配到的字符串在最前面才返回true。代码示例:  </p>
<pre><code>Pattern p=Pattern.compile(&quot;\\d+&quot;); 
Matcher m=p.matcher(&quot;22bb23&quot;); 
m.lookingAt();//返回true,因为\d+匹配到了前面的22 

Matcher m2=p.matcher(&quot;aa2223&quot;); 
m2.lookingAt();//返回false,因为\d+不能匹配前面的aa 
</code></pre><p><strong>find()</strong>对字符串进行匹配，匹配到的字符串可以在字符串的任何位置。代码示例:</p>
<pre><code>Pattern p=Pattern.compile(&quot;\\d+&quot;); 
Matcher m=p.matcher(&quot;22bb23&quot;); 
m.find();//返回true 

Matcher m2=p.matcher(&quot;aa2223&quot;); 
m2.find();//返回true 

Matcher m3=p.matcher(&quot;aa2223bb&quot;); 
m3.find();//返回true 

Matcher m4=p.matcher(&quot;aabb&quot;); 
m4.find();//返回false 
</code></pre><h4 id="2-3-5Matcher-start-Matcher-end-Matcher-group"><a href="#2-3-5Matcher-start-Matcher-end-Matcher-group" class="headerlink" title="2.3.5Matcher.start()/Matcher.end()/Matcher.group()"></a>2.3.5Matcher.start()/Matcher.end()/Matcher.group()</h4><p>当使用matches()、lookingAt()、find()执行匹配操作并返回的值为true后，就可以利用以上三个方法得到更详细的信息。(若上述三个方法matches()、lookingAt()、find()返回的是false或者根本没有调用过上述三个方法则不能进行这三个查找方法)  </p>
<p>start()返回匹配到的子字符串在字符串中的索引位置。<br>end()返回匹配到的子字符串的最后一个字符的后一个字符在字符串中的索引位置。<br>group()返回匹配到的子字符串。(group()等同与group(0)方法)。代码示例:  </p>
<pre><code>Pattern p=Pattern.compile(&quot;\\d+&quot;); 
Matcher m=p.matcher(&quot;aaa2223bb22&quot;); 
m.find();//匹配2223 ，匹配的是一个和正则表达式相匹配的字符串，返回true
m.start();//返回3 
m.end();//返回7,返回的是2223后的索引号 
m.group();//返回2223，返回的是第一个和正则表达式相匹配的字符串，若想全部输出应采用while(m.find){System.out.println(m.group());}的形式将全部匹配到的字符串返回

Mathcer m2=p.matcher(&quot;2223bb&quot;); 
m2.lookingAt();   //匹配2223，返回true
m2.start();   //返回0,由于lookingAt()只能匹配前面的字符串,所以当使用lookingAt()匹配时,start()方法总是返回0 
m2.end();   //返回4 
m2.group();   //返回2223 

Matcher m3=p.matcher(&quot;2223bb&quot;);
m3.matches();   //匹配整个字符串,返回false;
m3.start();   //出现异常，因为m3.matches()返回的是false，故不能用start()、end()、group()方法。
m3.end();   //出现异常 
m3.group();   //出现异常
</code></pre><p>说了这么多,相信大家都明白了以上几个方法的使用,该说说正则表达式的分组在java中是怎么使用的。start(),end(),group()均有一个重载方法，它们是start(int i),end(int i),group(int i)专用于分组操作,Mathcer类还有一个groupCount()用于返回此正则表达式有多少分组(实际上组的数量等于groupCount返回的分组＋1)。代码示例:</p>
<pre><code>Pattern p=Pattern.compile(&quot;([a-z]+)(\\d+)&quot;); 
Matcher m=p.matcher(&quot;aaa2223bb&quot;); 
m.find();   //匹配aaa2223 
m.groupCount();   //返回2,但此正则表达式中有3组，因为默认0组是(([a-z]+)(\\d+)). 
m.start(1);   //返回0 返回第一组匹配到的子字符串在字符串中的索引号 
m.start(2);   //返回3 

m.end(1);   //返回3 返回第一组匹配到的子字符串的最后一个字符在字符串中的索引位置. 
m.end(2);   //返回7 

m.group(1);   //返回aaa,返回第一组匹配到的子字符串 
m.group(2);   //返回2223,返回第二组匹配到的子字符串 
m.group();//返回aaa2223,返回的是第0组匹配到的子字符串
m.group(0);//等同于m.group(),返回aaa2223,返回的是第0组匹配到的子字符串
</code></pre><p>现在我们使用一下稍微高级点的正则匹配操作,例如有一段文本,里面有很多数字,而且这些数字是分开的,我们现在要将文本中所有数字都取出来,利用java的正则操作是那么的简单. 代码示例:</p>
<pre><code>Pattern p=Pattern.compile(&quot;\\d+&quot;); 
Matcher m=p.matcher(&quot;我的QQ是:456456 我的电话是:0532214 我的邮箱是:aaa123@aaa.com&quot;); 

while(m.find()) { 
     System.out.println(m.group()); 
 }
</code></pre><p>输出:</p>
<pre><code>456456 
0532214 
123 
</code></pre><p>如将以上while()循环替换成:</p>
<pre><code>while(m.find()) { 
     System.out.println(m.group()); 
     System.out.print(&quot;start:&quot;+m.start()); 
     System.out.println(&quot; end:&quot;+m.end()); 
 } 
</code></pre><p>则输出:  </p>
<pre><code>456456 
start:6 end:12 
0532214 
start:19 end:26 
123 
start:36 end:39 
</code></pre><p>现在大家应该知道,每次执行匹配操作后start(),end(),group()三个方法的值都会改变,改变成匹配到的子字符串的信息,以及它们的重载方法,也会改变成相应的信息.  </p>
<p><strong>注意:</strong>只有当匹配操作成功,才可以使用start(),end(),group()三个方法,否则会抛出java.lang.IllegalStateException,也就是当matches(),lookingAt(),find()其中任意一个方法返回true时,才可以使用.</p>
<h2 id="3-贪婪模式和懒惰模式"><a href="#3-贪婪模式和懒惰模式" class="headerlink" title="3.贪婪模式和懒惰模式"></a>3.贪婪模式和懒惰模式</h2><h3 id="3-1概述"><a href="#3-1概述" class="headerlink" title="3.1概述"></a>3.1概述</h3><p>贪婪与非贪婪模式影响的是被量词修饰的子表达式的匹配行为，贪婪模式在整个表达式匹配成功的前提下，尽可能多的匹配，而非贪婪模式在整个表达式匹配成功的前提下，尽可能少的匹配。非贪婪模式只被部分NFA引擎所支持。  </p>
<p>属于贪婪模式的量词，也叫做匹配优先量词，包括：<br><code>{m,n}”、“{m,}”、“?”、“*”和“+”。</code>  </p>
<p>在一些使用NFA引擎的语言中，在匹配优先量词后加上“?”，即变成属于非贪婪模式的量词，也叫做忽略优先量词，包括：  </p>
<p><code>“{m,n}?”、“{m,}?”、“??”、“*?”和“+?”。</code>  </p>
<p>从正则语法的角度来讲，被匹配优先量词修饰的子表达式使用的就是贪婪模式，如“(Expression)+”；被忽略优先量词修饰的子表达式使用的就是非贪婪模式，如“(Expression)+?”。  </p>
<p>对于贪婪模式，各种文档的叫法基本一致，但是对于非贪婪模式，有的叫懒惰模式或惰性模式，有的叫勉强模式，其实叫什么无所谓，只要掌握原理和用法，能够运用自如也就是了。个人习惯使用贪婪与非贪婪的叫法，所以文中都会使用这种叫法进行介绍。  </p>
<h3 id="3-2什么是贪婪模式与非贪婪模式"><a href="#3-2什么是贪婪模式与非贪婪模式" class="headerlink" title="3.2什么是贪婪模式与非贪婪模式"></a>3.2什么是贪婪模式与非贪婪模式</h3><p>示例:  </p>
<pre><code>源字符串：aa&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;cc
正则表达式一：&lt;div&gt;.*&lt;/div&gt;
匹配结果一：&lt;div&gt;test1&lt;/div&gt;bb&lt;div&gt;test2&lt;/div&gt;

正则表达式二：&lt;div&gt;.*?&lt;/div&gt;
匹配结果二：&lt;div&gt;test1&lt;/div&gt;（这里指的是一次匹配结果，所以没包括&lt;div&gt;test2&lt;/div&gt;）  
</code></pre><p>根据上面的例子，从匹配行为上分析一下，什是贪婪与非贪婪模式。  </p>
<p>正则表达式一采用的是贪婪模式，在匹配到第一个“”时已经可以使整个表达式匹配成功，但是由于采用的是贪婪模式，所以仍然要向右尝试匹配，查看是否还有更长的可以成功匹配的子串，匹配到第二个“”后，向右再没有可以成功匹配的子串，匹配结束，匹配结果为“<div>test1</div>bb<div>test2</div>”。  </p>
<p>仅从应用角度分析，可以这样认为，贪婪模式，就是在整个表达式匹配成功的前提下，尽可能多的匹配，也就是所谓的“贪婪”，通俗点讲，就是看到想要的，有多少就捡多少，除非再也没有想要的了。  </p>
<p>正则表达式二采用的是非贪婪模式，在匹配到第一个“”时使整个表达式匹配成功，由于采用的是非贪婪模式，所以结束匹配，不再向右尝试，匹配结果为“<div>test1</div>”。  </p>
<p>仅从应用角度分析，可以这样认为，非贪婪模式，就是在整个表达式匹配成功的前提下，尽可能少的匹配，也就是所谓的“非贪婪”，通俗点讲，就是找到一个想要的捡起来就行了，至于还有没有没捡的就不管了。</p>
<h2 id="4-联系"><a href="#4-联系" class="headerlink" title="4.联系"></a>4.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">Blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">Github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用Java实现网络爬虫一之项目介绍]]></title>
      <url>http://codingxiaxw.com/2016/10/20/20-%E7%94%A8Java%E5%86%99%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%80%E4%B9%8B%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>网络爬虫(Web crawler)也叫网络爬虫(Web spider)、蚂蚁（ant）、自动检索工具(automatic indexer)，或者(在FOAF软件概念中)网络疾走(WEB scutter)，是一种“自动化浏览网络”的程序，或者说是一种网络机器人。它们被广泛用于互联网搜索引擎或其他类似网站，以获取或更新这些网站的内容和检索方式。它们可以自动采集所有其能够访问到的页面内容，以供搜索引擎做进一步处理（分检整理下载的页面），而使得用户能更快的检索到他们需要的信息。  </p>
<a id="more"></a>
<h2 id="用Java实现网络爬虫系列"><a href="#用Java实现网络爬虫系列" class="headerlink" title="用Java实现网络爬虫系列"></a>用Java实现网络爬虫系列</h2><p>这系列文章我打算用5篇博客来完成，源代码见我<a href="https://github.com/codingXiaxw/Crawler" target="_blank" rel="external">github上的project</a>  </p>
<p>一览表:</p>
<ul>
<li>1.<a href="http://codingxiaxw.cn/2016/10/20/20-%E7%94%A8Java%E5%86%99%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%80%E4%B9%8B%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/" target="_blank" rel="external">用Java实现网络爬虫一之项目介绍</a></li>
<li>2.<a href="http://codingxiaxw.cn/2016/10/23/21-%E7%94%A8Java%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%BA%8C%E4%B9%8BJava%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/" target="_blank" rel="external">用Java实现网络爬虫二之Java正则表达式</a></li>
<li>3.<a href="http://codingxiaxw.cn/2016/10/23/22-%E7%94%A8Java%E5%86%99%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%89%E4%B9%8B%E5%BC%80%E5%A7%8B%E7%88%AC%E5%8F%96/" target="_blank" rel="external">用Java实现网络爬虫三之开始爬取</a></li>
<li>4.<a href="">进阶段:用Java实现网络爬虫四之将爬取内容存入数据库</a></li>
<li>5.<a href="">进阶段:开始使用框架实现网络爬虫</a></li>
</ul>
<p>制作网络爬虫主要的步骤就是:  </p>
<ul>
<li>1.通过输入流获取到网页源码</li>
<li>2.利用正则表达式在源码中找到自己想要的内容  <blockquote>
<p>正因为正则表达式在制作网络爬虫中的重要，所以这里我有必要把Java正则表达式拿出来单独写篇博客，当然基础好的可以直接忽略跳到第三篇。</p>
</blockquote>
</li>
<li>3.将自己找到的内容输出来并查看</li>
</ul>
<p>后续进阶可以对第三步进行改善，如将自己爬到的内容不是打印出来，而是通过JDBC存入MySQL中然后在MySQL中进行查看(见第四篇文章)。  </p>
<h2 id="需要用到的知识"><a href="#需要用到的知识" class="headerlink" title="需要用到的知识"></a>需要用到的知识</h2><ul>
<li>Java IO流</li>
<li>Java 正则表达式</li>
<li>html/css 的基本了解</li>
</ul>
<h2 id="我的爬虫目标"><a href="#我的爬虫目标" class="headerlink" title="我的爬虫目标"></a>我的爬虫目标</h2><p>制作网络爬虫爬取知乎网上提的问题、问题链接、问题描述以及回答内容，并将它们打印在输出台。(后续进阶我选择将这些内容存入MySQL数据库，而不是)</p>
<h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">Blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">Github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java之IO流详解]]></title>
      <url>http://codingxiaxw.com/2016/10/17/19-Java%E4%B9%8BIO%E6%B5%81%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>大多数应用程序都需要实现与设备之间的数据传输，例如键盘可以输入数据，显示器可以显示程序的运行结果等。在Java中，将这种通过不同输入输出设备(键盘，内存，显示器，网络等)之间的数据传输抽象表述为”流”，程序允许通过流的方式与输入输出设备进行数据传输。Java中的”流”都位于java.io包中，称为IO(输入输出)流。  </p>
<a id="more"></a>
<p>IO流四大家族:</p>
<ul>
<li>1.InputStream:输入字节流。</li>
<li>2.OutputStream:输出字节流。</li>
<li>3.Reader:输入字符流。</li>
<li>4.Writer:输出字符流。</li>
</ul>
<p>其中1、2统称字节流，3、4统称字符流。接下来就来详细介绍这四大家族流的用法。</p>
<h2 id="1-字节流"><a href="#1-字节流" class="headerlink" title="1.字节流"></a>1.字节流</h2><h3 id="1-1概念"><a href="#1-1概念" class="headerlink" title="1.1概念"></a>1.1概念</h3><p>在计算机中，无论是文本、图片、音频、还是视频，所有的文件都是以二进制(字节)形式存在，IO流中针对字节的输入输出提供了一系列的流，统称为字节流。字节流是程序中最常用的流，根据数据的传输方向可将其分为字节输入流和字节输出流。在JDK中，提供了两个抽象类InputStream和OutputStream，它们是字节流的顶级父类，所有的字节输入流都继承自InputStream，所有的字节输出流都继承自OutputStream。  </p>
<p><strong>注意:</strong>以上所说的所有”输入”、”输出”都是相对于程序而言。数据通过输入流从源设备输入到程序，通过输出流从程序输出到目标设备，从而实现数据的传输。  </p>
<h3 id="1-2字节输入流-InputStream"><a href="#1-2字节输入流-InputStream" class="headerlink" title="1.2字节输入流(InputStream)"></a>1.2字节输入流(InputStream)</h3><p><strong>常用方法:</strong>  </p>
<ul>
<li>int read();从输入流读取一个8位的字节，把它转换成0~255之间的整数，并返回这一整数。</li>
<li>int read(byte[] b);从输入流读取若干字节，把它们保存到参数b指定的字节数组中，返回的整数表示读取字节数。</li>
<li>int read(byte[] b,int off,int len);从输入流读取若干字节，把它们保存到参数b指定的字节数组中，off指定字节数组开始保存数据的起始下标，len表示读取的字节数目。</li>
<li>void close();关闭此输入流并释放与该流关联的所有系统资源。</li>
</ul>
<p>前三个read()方法都是用来读数据的，其中，第一个read()方法是从输入流中逐个读入字节，而第二个和第三个read()方法则将若干字节以字节数组的形式一次性读入，从而提高读数据的效率。在进行IO流操作时，当前IO流会占用一定的内存，由于系统资源宝贵，因此，在IO流操作结束后，应该调用close()方法关闭流，从而释放当前IO流所占的系统资源。 </p>
<p><strong>Demo:读取文件text.txt中的内容</strong>  </p>
<pre><code>import java.io.*;
public class Example{
    public static void main(String[] args){
        FileInputStream in=new FileInputStream(&quot;text.txt&quot;);
        int b;//定义一个int类型的变量，记住每次读取的一个字节。
        while((b=in.read())!=-1)
        {
            System.out.prinln(b);//逐个打印出读取的每一个字节
        }
        in.close();
    }
}
</code></pre><h3 id="1-3字节输出流-OutputStream"><a href="#1-3字节输出流-OutputStream" class="headerlink" title="1.3字节输出流(OutputStream)"></a>1.3字节输出流(OutputStream)</h3><p><strong>常用方法:</strong>  </p>
<ul>
<li>void write(int b);向输出流写入一个字节。</li>
<li>void write(byte[] b);把参数b指定的字节数组的所有字节写到输出流。</li>
<li>void write(byte[] b,int off,int len);将指定byte数组中从偏移量off开始的len个字节写入输出流。</li>
<li>void flush();刷新此输出流并强制写出所有缓冲的输出字节。</li>
<li>void close();关闭此输出流并释放与此流相关的所有系统资源。</li>
</ul>
<p>前三个是重载的write()方法，都是用于向输出流写入字节，其中，第一个方法逐个写入字节，后两个方法是将若干个字节以字节数组的形式一次性写入，从而提高写数据的效率。flush()方法用来将当前输出流缓冲区(通常是字节数组)中的数据强制写入目标设备，此过程称为刷新。close()方法是用来关闭流并释放与当前IO流相关的系统资源。  </p>
<p><strong>Demo:将字符串(首先要将字符串转换为字节)写入到文件中</strong>  </p>
<pre><code>import java.io.*;
public class Example{
    public static void main(String[] args){
        FileOutputStream out=new FileOutputStream(目标文件的路径);
        String str=&quot;hello world&quot;;
        byte[] b=str.getBytes();//字符串调用getBytes()方法即可转换成字节数组。
        for(int i=0;i&lt;b.length;i++)
        {
            out.write(b[i]);
        }
        out.close();
    }
}
</code></pre><p>InputStream和OutputStream这两个类虽然提供了一系列和读写数据有关的方法，但是这两个类都是抽象类，不能被实例化。因此，针对不同的功能，二者提供了不同的子类。</p>
<h3 id="1-4代码示例"><a href="#1-4代码示例" class="headerlink" title="1.4代码示例"></a>1.4代码示例</h3><p>下面这个例子通过对文件的复制来讲解InputStream和OutputStream的用法。  </p>
<pre><code>import java.io.*;
public class Example{
     public static void main(String[] args){
         String fileName=&quot;/Users/codingBoy/Desktop/example1.jpg&quot;;//源文件路径
         String fileName2=&quot;/Users/codingBoy/Desktop/example2.jpg&quot;;//目标文件路径
         InputStream in=null;
         OutputStream out=null;
         try {
             in = new FileInputStream(fileName);
             out = new FileOutputStream(fileName2);
             int b;
             while ((b = in.read())!= -1) {
                 out.write(b);
             }
         }catch (Exception e)
         {
             throw new RuntimeException(e);
          }finally {
             try {
                 if (in != null) in.close();
                if (out!=null) out.close();
             }catch (Exception e)
             {
                 throw new RuntimeException(e);
            }
         }
    }
}
</code></pre><h3 id="1-5字节缓冲流"><a href="#1-5字节缓冲流" class="headerlink" title="1.5字节缓冲流"></a>1.5字节缓冲流</h3><p>上面的例子实现了对文件的复制，但是一个字节一个字节的读写，需要频繁的操作文件，效率非常低。为了提高效率，需要使用两个带缓冲的字节流，分别是BufferedInputStream和BufferedOutputStream,它们两个同时也属于上文<a href="http://codingxiaxw.cn/2016/10/16/18-JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8BJdbc%E4%BA%8C/" target="_blank" rel="external">JavaWeb学习笔记之Jdbc二</a>中讲到的装饰流。下面通过增加字节缓冲流来对上述例子进行变动:  </p>
<p><strong>Demo:</strong>  </p>
<pre><code>import java.io.*;
public class Example{
     public static void main(String[] args){
        String fileName=&quot;/Users/codingBoy/Desktop/example1.jpg&quot;;//源文件路径
         String fileName2=&quot;/Users/codingBoy/Desktop/example2.jpg&quot;;//目标文件路径
         InputStream in=null;
         OutputStream out=null;
         BufferedInputStream bis=null;
         BufferedOutputStream bos=null;
         try {
             in = new FileInputStream(fileName);
             bis = new BufferedInputStream(in);//将输入流对象作为参数传递给输入缓冲流
             out = new FileOutputStream(fileName2);
             bos = new BufferedOutputStream(out);

             int len;
             while((len=bis.read())!=-1)                 {
                 bos.write(len);
             }
         catch (Exception e)
         {
             throw new RuntimeException(e);
          }finally {
             try {
                 if (in != null) in.close();
                 if (bis!=null) bis.close();
                if (out!=null) out.close();
                if (bos!=null) bos.close();
             }catch (Exception e)
             {
                 throw new RuntimeException(e);
            }
         }
    }
}
</code></pre><h2 id="2-字符流"><a href="#2-字符流" class="headerlink" title="2.字符流"></a>2.字符流</h2><h3 id="2-1定义"><a href="#2-1定义" class="headerlink" title="2.1定义"></a>2.1定义</h3><p>前面我们讲过的InputStream和OutputStream类在读写文件时操作的都是字节，如果希望在程序中操作字符，使用这两个类就不太方便，为此JDK提供了字符流。同字节流一样，字符流也有两个抽象的顶级父类，分别是Reader和Writer。其中Reader是字符输入流，用于从某个源设备读取字符，Writer是字符输出流，用于向某个目标设备写入字符。其API跟字节流的类似。  </p>
<h3 id="2-2输入字符流-Reader"><a href="#2-2输入字符流-Reader" class="headerlink" title="2.2输入字符流(Reader)"></a>2.2输入字符流(Reader)</h3><p><strong>Demo:读取reader.txt中的字符串</strong>  </p>
<pre><code>import java.io.*;
public class Example{
     public static void main(String[] args){
         FileReader reader=new FileReader(&quot;reader.txt&quot;);
         int ch;
         while((ch=reader.read())!=-1)
         {
             System.out.println((char)ch);//通过reader()方法读取到的是int类型的值，所以需要进行强制转换。
         }
         reader.close();
     }
}
</code></pre><h3 id="2-3输出字符流-Writer"><a href="#2-3输出字符流-Writer" class="headerlink" title="2.3输出字符流(Writer)"></a>2.3输出字符流(Writer)</h3><p><strong>Demo:将字符串输出到目标文件中</strong>  </p>
<pre><code>import java.io.*;
public class Example{
    public static void main(String[] args){
        FileWrite out=new FileWrite(目标文件的路径);
        String str=&quot;hello world&quot;;

        out.write(str);
        out.close();
    }
}
</code></pre><h3 id="2-4字符缓冲流"><a href="#2-4字符缓冲流" class="headerlink" title="2.4字符缓冲流"></a>2.4字符缓冲流</h3><p>字符流同样提供了带缓冲区的包装流，分别是BufferedWriter和BufferedReader,其中BufferedReader用于对字符输入流的包装，BufferedWriter用于对字符输出流的包装。需要注意的是，在BufferedReader中有一个重要的方法readLine()，该方法用于一次读取一行文本。接下来通过一个例子学习如何使用这两个包装流实现文件的复制。  </p>
<pre><code>import java.io.*;
public class Example{
     public static void main(String[] args){
         String fileName=&quot;/Users/codingBoy/Desktop/example1.jpg&quot;;//源文件路径
         String fileName2=&quot;/Users/codingBoy/Desktop/example2.jpg&quot;;//目标文件路径
         Reader reader=null;
         BufferedReader bf=null;
         Writer writer=null;
         BufferedWriter bw=null;
         try {
             reader = new Reader(fileName);
             br=new BufferedReader(reader);
             writer = new Writer(fileName2);
             bw=new BufferedWriter(writer);
             String str;
             while ((str = bf.readLine())!= null) {
                 bw.write(str);
                 bw.newLine();//写入一个换行符，该方法会根据不同的操作系统生成相应的换行符。
             }
         }catch (Exception e)
         {
             throw new RuntimeException(e);
          }finally {
             try {
                 if (reader != null) reader.close();
                 if (br !=null) br.close();
                if (writer!=null) writer.close();
                if (bw !=null) bw.close();
             }catch (Exception e)
             {
                 throw new RuntimeException(e);
            }
         }
    }
}
</code></pre><h2 id="3-转换流"><a href="#3-转换流" class="headerlink" title="3.转换流"></a>3.转换流</h2><p>前面提到IO流可分为字节流和字符流，有时自己流和字符流之间也需要进行转换。在JDK中提供了两个类可以将字节流转换为字符流，它们分别是InputStreamReader和OutputStreamWriter。  </p>
<p>转换流也是一种包装流，其中OutputStreamWriter是Writer的子类，它可以将一个字节输出流包装成字符输出流，方便直接写入字符，而InputStreamReader是Reader的子类，它可以将一个字节输入流包装成字符输入流，方便直接读取字符。  </p>
<p><strong>Demo:将字节流转换为字符流</strong>  </p>
<pre><code>import java.io.*;
public class Example{
     public static void main(String[] args){
         String fileName=&quot;/Users/codingBoy/Desktop/example1.jpg&quot;;//源文件路径
         String fileName2=&quot;/Users/codingBoy/Desktop/example2.jpg&quot;;//目标文件路径
         InputStreamReader isr=new InputStreamReader(new FileInputStream(fileName1));
         BufferedReader br=new BufferedReader(isr);

         OutputStreamWriter osw=new OutputStreamWriter(new FileOutputStream(fileName2));
         BufferedWriter bw=new BufferedWriter(osw);

         String line;
         while((line=br.readLine())!=null)
         {
             bw.write(line);
         }

         br.close();
         bw.close();
     }
}
</code></pre><h2 id="4-其他IO流"><a href="#4-其他IO流" class="headerlink" title="4.其他IO流"></a>4.其他IO流</h2><h4 id="4-1ByteArrayInputStream和ByteArrayOutputStream"><a href="#4-1ByteArrayInputStream和ByteArrayOutputStream" class="headerlink" title="4.1ByteArrayInputStream和ByteArrayOutputStream"></a>4.1ByteArrayInputStream和ByteArrayOutputStream</h4><p>在前面的学习中，都是将文件直接存储到硬盘，但有时候我们希望将文件临时存储到缓冲区，方便以后读取。为此JDK中提供了一个ByteArrayOutputStream类。该类会在创建对象时就创建一个byte型数组的缓冲区，当向数组中写数据时，该对象会把所有的数据先写入缓冲区，最后一次行写入文件。<br><strong>Demo:将数据写入缓冲区</strong>  </p>
<pre><code>import java.io.*;
public class Example{
     public static void main(String[] args){
         String fileName1=&quot;/Users/codingBoy/Desktop/example1.jpg&quot;;//源文件路径
         String fileName2=&quot;/Users/codingBoy/Desktop/example2.jpg&quot;;//目标文件路径
         FileInputStream in=new FileInputStream(fileName1);
         ByteArrayOutputStream bos=new ByteArrayOutputStream();
         FileOutputStream out=new FileOutputStream(fileName2);

         int b;
         while((b=in.read())!=-1)
         {
             bos.write(b);//先将数据写入缓冲区，当需要写入目标文件中的时候再调用输出流的write(bos.toByteArray())方法。
         }

         in.close();
         bos.close();
         out.write(bos.toByteArray());
         out.close();
}
</code></pre><p>在该例中，定义了一个ByteArrayOutputStream对象，将从fileName1文件中读取的字节全部写入该对象的缓冲区，通过FileOutputStream对象将缓冲区的数据一次性写入fileName2文件。  </p>
<p>与ByteArrayOutputStream类似，ByteArrayInputStream是从缓冲区中读取数据，接下来通过一个案例来演示ByteArrayInputStream如何读取缓冲区的数据。  </p>
<p><strong>Demo:</strong></p>
<pre><code>import java.io.*;
public class Example{
     public static void main(String[] args){
         byte[] bytes=new byte[]{97,98,99,100};
         ByteArrayInputStream bis=new ByteArrayInputStream(bytes);

         int b;
         while((b=bis.read())!=-1)
         {
             System.out.println((char)b);
         }
}
</code></pre><h2 id="5-联系"><a href="#5-联系" class="headerlink" title="5.联系"></a>5.联系</h2><p>If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><p><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a> </p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaWeb学习笔记之Jdbc(二)]]></title>
      <url>http://codingxiaxw.com/2016/10/16/18-JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8BJdbc%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h2 id="1-事务"><a href="#1-事务" class="headerlink" title="1.事务"></a>1.事务</h2><h3 id="1-1事务的四大特性-ACID"><a href="#1-1事务的四大特性-ACID" class="headerlink" title="1.1事务的四大特性(ACID)"></a>1.1事务的四大特性(ACID)</h3><ul>
<li>1.原子性:事务中的所有操作要么全部执行成功，要么执行全部失败。</li>
<li>2.一致性:事务执行后，数据库状态与其它业务规则保持一致。</li>
<li>3.隔离性:隔离性是指在并发操作中，不同事务之间应该隔离开来，使每个并发中的事务不会相互干扰。</li>
<li>4.持久性:一旦事务提交成功，事务中所有的数据操作都必须被持久化到数据库中。即使提交事务后数据库马上崩溃，在数据库重启后，也必须能保证通过某种机制恢复数据。  </li>
</ul>
<a id="more"></a>
<h3 id="1-2mysql中操作事务"><a href="#1-2mysql中操作事务" class="headerlink" title="1.2mysql中操作事务"></a>1.2mysql中操作事务</h3><p>在控制台中输入语句:<code>start transaction;</code>即开始事务。  </p>
<p>在控制台中输入语句:<code>commit transaction;</code>即提交事务。  </p>
<p>在控制台中输入语句:<code>rollback;</code>回滚事务，即在此事务中执行的操作全部无效，数据库回到<code>start transaction;</code>之前(前提是使用该语法前没有执行<code>commit transaction;</code>操作)。  </p>
<h3 id="1-3Jdbc中操作事务"><a href="#1-3Jdbc中操作事务" class="headerlink" title="1.3Jdbc中操作事务"></a>1.3Jdbc中操作事务</h3><p>在Jdbc中处理事务都是通过Connection对象完成的，同一事务中的所有操作，都在使用同一个Connection对象。  </p>
<p><code>setAutoCommit(boolean);</code>设置是否自动提交事务，如果为true表示自动提交(默认值就是true)，也就是每条执行的sql语句都是一个单独的事务，如果设置false，那么就相当于开启了事务了。<code>con.setAutoCommit(false);</code>语句表示开启事务。  </p>
<p><code>con.commit();</code>提交并结束事务。</p>
<p><code>con.rollback();</code>回滚事务。</p>
<h2 id="2-事务的隔离级别"><a href="#2-事务的隔离级别" class="headerlink" title="2.事务的隔离级别"></a>2.事务的隔离级别</h2><h3 id="2-1事务的并发读问题"><a href="#2-1事务的并发读问题" class="headerlink" title="2.1事务的并发读问题"></a>2.1事务的并发读问题</h3><ul>
<li>脏读:读取到另一份事务未提交数据，即读到了脏数据。</li>
<li>不可重复读：两次读取不一致。对统一记录的两次读取不一致，因为另一事务对该记录做了修改。</li>
<li>幻读：又叫虚读。对同一张表的两次查询不一致，因为另一事务进行了插入了一条记录的操作。</li>
</ul>
<h3 id="2-2四大隔离级别-防止上述问题"><a href="#2-2四大隔离级别-防止上述问题" class="headerlink" title="2.2四大隔离级别(防止上述问题)"></a>2.2四大隔离级别(防止上述问题)</h3><ul>
<li>a.SERIALIZABLE(串行化)：不会出现任何并发问题，因为它是对同一数据的访问是串行的，非并发访问的。性能最差，可能导致死锁。</li>
<li>b.REPEATABLE READ(可重复读)(mysql默认级别)：防止脏读和不可重复读，不能处理幻读问题。性能比a的好。</li>
<li>c.READ COMMITTED(读已提交数据)(Oracle默认级别)：防止脏读，没有处理不可重复读，也没有处理幻读。性能比上述b好。</li>
<li>d.READ UNCOMMITTED(读未提交数据):可能出现任何事务并发问题。性能最好。但基本没人用。  </li>
</ul>
<h3 id="2-3查看mysql的隔离级别"><a href="#2-3查看mysql的隔离级别" class="headerlink" title="2.3查看mysql的隔离级别"></a>2.3查看mysql的隔离级别</h3><p>在控制台中输入语句:<code>select @@tx_isolation;</code>  </p>
<p>也可以通过下面命令来设置隔离级别:<code>set transaction isolationlevel[4选1];</code></p>
<h3 id="2-4在Jdbc中设置隔离级别"><a href="#2-4在Jdbc中设置隔离级别" class="headerlink" title="2.4在Jdbc中设置隔离级别"></a>2.4在Jdbc中设置隔离级别</h3><p><code>con.setTransactionisolation[int lever];</code>  </p>
<h2 id="3-数据库连接池"><a href="#3-数据库连接池" class="headerlink" title="3.数据库连接池"></a>3.数据库连接池</h2><p>用户每次请求都需要向数据库获得链接，而数据库创建连接通常需要消耗相对较大的资源，创建时间也较长。假设网站一天10万访问量，数据库服务器就需要创建10万次连接，极大的浪费数据库的资源，并且极易造成数据库服务器内存溢出、拓机。如下图所示:<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E6%B2%A1%E6%9C%89%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0.png" alt="">  </p>
<p>数据库连接是一种关键的有限的昂贵的资源,这一点在多用户的网页应用程序中体现的尤为突出.。对数据库连接的管理能显著影响到整个应用程序的伸缩性和健壮性，影响到程序的性能指标。数据库连接池正式针对这个问题提出来的。数据库连接池负责分配，管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个。如下图所示:<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0.png" alt="">  </p>
<p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中, 这些数据库连接的数量是由最小数据库连接数来设定的.无论这些数据库连接是否被使用,连接池都将一直保证至少拥有这么多的连接数量.连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数,当应用程序向连接池请求的连接数超过最大连接数量时,这些请求将被加入到等待队列中。  </p>
<p>数据库连接池的最小连接数和最大连接数的设置要考虑到以下几个因素:  </p>
<ul>
<li><p>1.最小连接数(MinActive):是连接池一直保持的数据库连接,所以如果应用程序对数据库连接的使用量不大,将会有大量的数据库连接资源被浪费。</p>
</li>
<li><p>2.最大连接数(MaxActive):是连接池能申请的最大连接数,如果数据库连接请求超过次数,后面的数据库连接请求将被加入到等待队列中,这会影响以后的数据库操作。</p>
</li>
<li><p>3.如果最小连接数与最大连接数相差很大:那么最先连接请求将会获利,之后超过最小连接数量的连接请求等价于建立一个新的数据库连接.不过,这些大于最小连接数的数据库连接在使用完不会马上被释放,他将被放到连接池中等待重复使用或是空间超时后被释放。  </p>
</li>
</ul>
<h3 id="3-1池参数-所有池参数都有默认值"><a href="#3-1池参数-所有池参数都有默认值" class="headerlink" title="3.1池参数(所有池参数都有默认值)"></a>3.1池参数(所有池参数都有默认值)</h3><pre><code>设置初始化大小:connection.setInitialSize();
设置最小空闲连接数:connection.setMinIdle();
设置最大空闲连接数:connection.setMaxIdle();
设置最小连接数:connection.setMinActive();
设置最大连接数:connection.setMaxActive();
设置增量:一次创建的最小单位。
设置最大的等待时间:connection.setMaxWait();
</code></pre><h3 id="3-2四大连接参数"><a href="#3-2四大连接参数" class="headerlink" title="3.2四大连接参数"></a>3.2四大连接参数</h3><p>连接池也是使用Jdbc中的四大连接参数和驱动jar包来完成创建连接对象。</p>
<h3 id="3-3实现的接口"><a href="#3-3实现的接口" class="headerlink" title="3.3实现的接口"></a>3.3实现的接口</h3><p>连接池必须实现javax.sql.DataSource接口。  </p>
<p>从连接池返回的Connection对象，它的close()方法与众不同。调用它的close()方法不是关闭，而是把连接归还给池。  </p>
<h3 id="3-4DBCP数据库连接池"><a href="#3-4DBCP数据库连接池" class="headerlink" title="3.4DBCP数据库连接池"></a>3.4DBCP数据库连接池</h3><p>DBCP是Apache软件基金组织下的开源连接池实现，要使用DBCP数据源，需要应用程序应在系统中增加如下两个jar文件:</p>
<ul>
<li>Commons-dbcp.jar：连接池的实现</li>
<li>Commons-pool.jar：连接池实现的依赖库</li>
</ul>
<p><strong>Demo:</strong></p>
<pre><code>public class Demo{
    public static void main(String[] args)
    {
        /*
         *1.创建连接池对象
         *2.配置四大参数
         *3.配置池参数
         *4.得到连接对象
         */
        BasicDataSource dataSource=new BasicDataSource();

        dataSource.setDriverClassName(“com.mysql.jdbc.Driver”);
        dataSource.setUrl(“jdbc:mysql://localhost:3306/mydb”);
        dataSource.setUsername(“root”);
        dataSource.setPassword(123);

        dataSource.setMaxActive(20);
        dataSource.setMinIdle(3);
        dataSource.setMaxWait(1000);

        Connection con=dataSource.getConnection();
        System.out.println(con);

      /*
        *连接池内部使用四大参数创建了连接对象，即mysql驱动提供的Connection
        *连接池使用mysql的连接对象进行了装饰，只对close()方法进行了增强！
        *装饰之后的Connection的close()方法，用来把当前连接归还给池
        */
        con.close();//把连接归还给池。
    }
}
</code></pre><p>既然谈到装饰，那下面我们就在下文3.7中来谈谈装饰者模式。  </p>
<h3 id="3-5c3p0数据库连接池"><a href="#3-5c3p0数据库连接池" class="headerlink" title="3.5c3p0数据库连接池"></a>3.5c3p0数据库连接池</h3><p>c3p0,全名叫ComboPooledDataSource;   </p>
<p>需要导入的jar包:</p>
<ul>
<li>连接池的实现:c3p0-0.9.5.2.jar</li>
<li>依赖库:mchange－commons.jar   </li>
</ul>
<p><strong>Demo:</strong></p>
<pre><code>public class Demo{
    public static void main(String[] args)
    {
        //创建连接池对象
        ComboPooledDataSource dataSource=new ComboPooledDataSource();

        //进行四大参数的配置
        dataSource.setDriverClass(“com.mysql.jdbc.Driver”);
        dataSource.setJdbcUrl(“jdbc:mysql://localhost:3306/mydb”);
        dataSource.setUser(&quot;root&quot;);
        dataSource.setPassword(&quot;123&quot;);

        //池配置
        dataSource.setAcquireIncrement(5);
        dataSource.setInitialPoolSize(20);
        dataSource.setMinPoolSize(2);
        dataSource.setMaxPoolSize(50);

        Connection con=dataSource.getConnection();
        System.out.println(con);

        con.close();
    }
}
</code></pre><h4 id="3-5-1c3p0配置文件的使用"><a href="#3-5-1c3p0配置文件的使用" class="headerlink" title="3.5.1c3p0配置文件的使用"></a>3.5.1c3p0配置文件的使用</h4><p>配置文件要求:</p>
<blockquote>
<p>文件名称:必须叫c3p0-config.xml。<br>文件的位置:必须在src下。  </p>
</blockquote>
<p><strong>c3p0配置文件:</strong><br><img src="http://od2xrf8gr.bkt.clouddn.com/c3p0%E9%85%8D%E7%BD%AE.png" alt="">  </p>
<p><strong>写入配置文件后的Demo:</strong>  </p>
<pre><code>public class Demo{
    public static void main(String[] args)
    {
        //在创建连接池对象时，这个对象就会自动加载配置文件，不用我们来指定。
        ComboPooledDataSource data=new comboPooledDataSource();
        Connection con=data.getConnection();
        System.out.println(con);
    }
}
</code></pre><h3 id="3-6Tomcat配置数据库连接池"><a href="#3-6Tomcat配置数据库连接池" class="headerlink" title="3.6Tomcat配置数据库连接池"></a>3.6Tomcat配置数据库连接池</h3><h4 id="3-6-1Tomcat配置JNDI资源"><a href="#3-6-1Tomcat配置JNDI资源" class="headerlink" title="3.6.1Tomcat配置JNDI资源"></a>3.6.1Tomcat配置JNDI资源</h4><p><strong>JNDI:</strong>java命名和目录接口。作用:在服务器上配置资源，然后通过统一的方式来获取配置的资源。  </p>
<p>首先需要在Tomcat/conf/Catelina/localhost目录下新建文件名: 项目名.xml  </p>
<p>在该.xml文件中写入以下内容<br><img src="http://od2xrf8gr.bkt.clouddn.com/jdni.png" alt="">  </p>
<h4 id="3-6-1获取资源的代码"><a href="#3-6-1获取资源的代码" class="headerlink" title="3.6.1获取资源的代码"></a>3.6.1获取资源的代码</h4><pre><code>Context initCtx=new InitialContext();//创建一个上下文。

Context envCtx=(Context) initCtx.lookup(“java:comp/env”);//这个路径是固定的不能改。

MyBean bean=(MyBean)envCtx.lookup(“bean/MyBeanFactory”);//通过该上下文进行二次查找才能找到资源。
</code></pre><p><strong>Demo:测试类</strong></p>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-17%20%E4%B8%8B%E5%8D%888.43.16.png" alt=""></p>
<h3 id="3-7装饰者模式"><a href="#3-7装饰者模式" class="headerlink" title="3.7装饰者模式"></a>3.7装饰者模式</h3><p>将对象增强的手段有:</p>
<ul>
<li>继承  <blockquote>
<p>缺点:1.增强的内容是死的，不能动。2.被增强的对象也是死的。</p>
</blockquote>
</li>
<li>装饰者模式<blockquote>
<p>特点:1.增强的内容是不能修改的。2.被增强的对象可以是任意的。</p>
</blockquote>
</li>
<li>动态代理(AOP):以后再详讲，博客出来后会给出链接。</li>
</ul>
<p><strong>下面通过一个简单的例子来对装饰者模式进行讲解</strong></p>
<pre><code>class 咖啡类 {};
class 加奶咖啡 extends 咖啡类 {};
class 加糖咖啡 extends 咖啡类 {};
class 加盐咖啡 extends 咖啡类 {};

咖啡 a＝new 加糖咖啡();
咖啡 b＝new 加盐咖啡(a);//对a进行装饰，就是给a加盐
咖啡 c＝new 加奶咖啡(b);//对b进行装饰，就是给b加奶
</code></pre><p>装饰者模式在Java API中的IO流中用到的很多。如BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter、ObjectInputStream、ObjectOutputStream这几个都是运用了装饰模式的装饰流。关于的IO流的详情见下篇博客<a href="http://codingxiaxw.cn/2016/10/17/19-Java%E4%B9%8BIO%E6%B5%81%E8%AF%A6%E8%A7%A3/" target="_blank" rel="external">Java之IO流详解</a>。</p>
<h2 id="4-ThreadLocal"><a href="#4-ThreadLocal" class="headerlink" title="4.ThreadLocal"></a>4.ThreadLocal</h2><p>早在JDK 1.2的版本中就提供Java.lang.ThreadLocal，ThreadLocal为解决多线程程序的并发问题提供了一种新的思路。使用这个工具类可以很简洁地编写出优美的多线程程序。</p>
<h3 id="4-1Thread-API"><a href="#4-1Thread-API" class="headerlink" title="4.1Thread API"></a>4.1Thread API</h3><ul>
<li>void set(Object value);设置当前线程的线程局部变量的值。</li>
<li>Object get();该方法返回当前线程所对应的线程局部变量。</li>
<li>void remove();将当前线程局部变量的值删除，目的是为了减少内存的占用。需要指出的是，当线程结束后，对应该线程的局部变量将自动被垃圾回收，所以显式调用该方法清除线程的局部变量并不是必须的操作，但它可以加快内存回收的速度。  </li>
</ul>
<h3 id="4-2ThreadLocal内部结构"><a href="#4-2ThreadLocal内部结构" class="headerlink" title="4.2ThreadLocal内部结构"></a>4.2ThreadLocal内部结构</h3><p>ThreadLocal内部用Map来保存数据。虽然在使用上述API时没有给出键，但其实它内部使用了当前线程作为键。内部结构见下面demo:</p>
<pre><code>class ThreadLocal
{
    private Map&lt;Thread,T&gt; map=new HashMap&lt;Thread,T&gt;();

    public void set(T value){

        map.put(Thread.currentThread(),value);
    }

    public void remove(){
        map.remove(Thread.currentThread());
    }

    public T get(){
        return map.get(Thread.currentThread());
    }
}
</code></pre><h2 id="5-dbtils结果集处理器介绍"><a href="#5-dbtils结果集处理器介绍" class="headerlink" title="5.dbtils结果集处理器介绍"></a>5.dbtils结果集处理器介绍</h2><p>需要导入的jar包:</p>
<ul>
<li>common-dbutil.jar</li>
<li>c3p0.jar</li>
<li>mchange-commons.jar</li>
</ul>
<p>关键要得到QueryRunner对象，然后调用其各种方法。</p>
<ul>
<li><p>update()方法:</p>
<blockquote>
<p>1.int update(String sql,Object… params)  可执行增删改语句。<br>2.重载方法int update(Connection con,String sql, Object… params)需要调用者提供Connection，这说明本方法不再管理Connection了。本重载方法支持事务。</p>
</blockquote>
</li>
<li><p>query()方法:</p>
<blockquote>
<p>1.T query (String sql,ResultSetHandler rsh,Object… params)可执行查询操作。<br>2.重载方法:T query(Connection con,String sql,ResultSetHandler rsh,Object… params);  本重载方法支持事务。它会先得到ResultSet，然后调用rsh的handle()把rs转换成需要的类型。</p>
</blockquote>
</li>
<li><p>ResultSetHandler接口</p>
<blockquote>
<p>1.BeanHandler(单行)－－&gt;构造器需要一个class类型的参数，用来把一行结果转换成指定类型的javaBean对象。<br>2.BeanListHandler(多行)—&gt;构造器也是需要一个Class类型的参数，用来把一行结果集转换成一个javabean，哪么多行就是转换成List对象，一堆javabean。<br>3.MapHandler(单行)—&gt;把一行结果集转换成Map对象。<br>4.MapListHandler(多行)—&gt;把一行记录转换成一个Map，多行就是多个Map，即List<map>。<br>5.ScalarHandler(单行单列)－&gt;同来用于select count(＊)from t_stu语句，结果集是单行单列的，它返回一个Object，就是count(*)的值，为long类型。  </map></p>
</blockquote>
</li>
</ul>
<p><strong>dbutil结果处理集原理代码:</strong>  </p>
<pre><code>package demo;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Created by codingBoy on 16/10/19.
 */
 public class QR&lt;T&gt;
 {
    private DataSource dataSource;

public QR(DataSource dataSource)
{
    this.dataSource=dataSource;
}

public QR(){
    super();
}

public int update(String sql,Object... params)
{
    Connection con=null;
    PreparedStatement pstmt=null;

    try
    {
        con=dataSource.getConnection();//通过连接池得到连接对象
        pstmt=con.prepareStatement(sql);

        initParams(pstmt,params);//给出参数

        return pstmt.executeUpdate();//调用update执行增、删、该
    }catch (Exception e)
    {
        throw new RuntimeException(e);
    }finally {
        try{
            if (pstmt!=null) pstmt.close();
            if (con!=null) con.close();
        }catch (SQLException e){}
    }
}

//给参数赋值
public void initParams(PreparedStatement pstmt,Object... params) throws SQLException {
    for (int i = 0; i &lt; params.length; i++)
    {
        pstmt.setObject(i+1,params[i]);
    }
}

public T query(String sql,RsHandler&lt;T&gt; rh,Object... params) throws SQLException {
    Connection con=null;
    PreparedStatement pstmt=null;
    ResultSet rs=null;

    try
    {
        con=dataSource.getConnection();//通过连接池得到连接对象
        pstmt=con.prepareStatement(sql);

        initParams(pstmt,params);//给出参数

        rs=pstmt.executeQuery();//调用update执行增、删、该

        return rh.handle(rs);
    }catch (Exception e)
    {
        throw new RuntimeException(e);
    }finally {

        if (rs!=null) rs.close();
        if (pstmt!=null) pstmt.close();
        if (con!=null) con.close();

    }
}

interface RsHandler&lt;T&gt;
{
    public T handle(ResultSet rs);
}
}
</code></pre><p>这样我们以后对数据库进行增、删、改操作时，只需写以下代码即可:</p>
<pre><code>1.QueryRunner qr=new QueryRunner(JdbcUtils.getDataSource);//创建QueryRunner对象，并传入连接池对象

2.String sql=&quot;insert into user values(?,?,?,?);//给出sql语句模板
3.Object[] params={参数1，参数2，参数3，参数4};//传入参数
4.qr.update(sql,params);//调用qr方法。
</code></pre><p>通过这简单的四步就可以对数据库进行增删改了。  </p>
<p>对数据库进行查询操作时，只需写以下代码:  </p>
<pre><code>1.QueryRunner qr=new QueryRunner(JdbcUtils.getDataSource);//创建QueryRunner对象，并传入连接池对象
2.String sql=&quot;select * from user where id=?&quot;;//给出sql语句模板
3. Object[] params={参数};//传入参数
//4. ResultSetHandler&lt;Object&gt; rsh=new ResultSetHandler(){
//        @Override
//        public Object handle(Result rs) throws SQLException{
//            return null;
//        }
//    };
5.Object object=qr.query(sql,new BeanHandler&lt;Object&gt;(Object.class),params);
</code></pre><p>通过这几步即可实现对数据的查询操作了。  </p>
<p><strong>下面的解释写给自己看的:关于connection是否关闭的问题</strong>  </p>
<p>在jar包中，QueryRunner类的update(没有connection参数的)方法，在finally中将connection进行了关闭;在update(有connection参数的)方法中，在finally中没有对connection进行关闭(暂时这么记吧，不然要是进行关闭了的话，在传智播客写的小工具封装类TxQueryRunner中将connection传入JdbcUtils的releaseConnecion()方法中对connection进行关闭时会出现报错)。</p>
<p>在讲到事务时，我们会对QueryRunner进行再次封装。上述写出的QueryRunner的代码只是包中的QueryRunner源码方法的一部分(因为源码中还有很多的重载方法)，我们会通过另一个类TxQueryRunner(较QueryRunner多出的一个功能就是它支持事务)继承该类，在TxQueryrunner类中，对connection进行了判断:若connection为事务中的connection则在TxqueryRunner的update()方法中不对connection进行关闭，而是在commitTransaction()即提交事务时进行关闭;若connection为普通连接，则将connection进行关闭。那么以后我们在DAO中要获取的就不是QueryRunner对象，而是通过<code>QueryRunner qr=new TxQueryRunner();</code>获取TxQueryRunner对象了。</p>
<h2 id="6-联系"><a href="#6-联系" class="headerlink" title="6.联系"></a>6.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">Blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">Github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaWeb学习笔记之Jdbc(一)]]></title>
      <url>http://codingxiaxw.com/2016/10/12/17-JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8BJdbc%E4%B8%80/</url>
      <content type="html"><![CDATA[<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>Jdbc(java database connectivity):Java数据库连接，就是用Java语言来操作数据库。原来我们操作数据库是在控制台中通过sql语句来操作数据库，而Jdbc是用Java语言来向数据库发送sql语句来操作数据库。</p>
<a id="more"></a>
<h2 id="2-流程"><a href="#2-流程" class="headerlink" title="2.流程"></a>2.流程</h2><h3 id="2-1得到Connection对象"><a href="#2-1得到Connection对象" class="headerlink" title="2.1得到Connection对象"></a>2.1得到Connection对象</h3><ul>
<li>1.导jar包。mysql-connector-java jar</li>
<li>2.加载驱动类:Class.forName(“类名”);</li>
<li>3.给出url、username、password等参数。</li>
<li>4.使用DriverManager类来的到Connection对象。</li>
</ul>
<p><strong>时刻牢记Jdbc中的四大参数:</strong></p>
<ul>
<li>driverClassName:com.mysql.jdbc.Driver</li>
<li>url:jdbc:mysql://localhost:3306/数据库名</li>
<li>username:mysql用户名</li>
<li>password:mysql密码</li>
</ul>
<p><strong>Demo:</strong></p>
<pre><code>public class Demo{
    public void main(String[] args) throws ClassNotFoundException,SQLException{

        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);//加载驱动类。
        String url=&quot;jdbc:mysql://localhost:3306/数据库名&quot;;
        String username=&quot;root&quot;;
        String password=&quot;123&quot;;

        Connection con=DriverManager.getConnection(url,username,password);
    }
}
</code></pre><p><strong>代码分析:</strong>  </p>
<ol>
<li>url的格式为–jdbc:厂商名称:子协议(由厂商自己来规定)。对于mysql而言，它的子协议结构的格式为://localhost:3306/数据库名。</li>
<li>出现SQLException的原因:1.url username password 是否正确。2.检查是否打开了sql服务器</li>
<li>出现ClassNotFoundException的原因:1.没导入驱动包。2.Class.forName()传入的字符串参数错误。</li>
</ol>
<h2 id="3-Jdbc对数据库进行增、删、改、查"><a href="#3-Jdbc对数据库进行增、删、改、查" class="headerlink" title="3.Jdbc对数据库进行增、删、改、查"></a>3.Jdbc对数据库进行增、删、改、查</h2><h3 id="3-1增、删、改"><a href="#3-1增、删、改" class="headerlink" title="3.1增、删、改"></a>3.1增、删、改</h3><pre><code>public class Demo{
    public void main(String[] args) throws ClassNotFoundException,SQLException{

        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);//加载驱动类。
        String url=&quot;jdbc:mysql://localhost:3306/数据库名&quot;;
        String username=&quot;root&quot;;
        String password=&quot;123&quot;;

        Connection con=DriverManager.getConnection(url,username,password);

        Statement stmt=con.createStatement();//调用Connection的方法创建Statement对象，它是sql语句的发送器，功能就是向数据库发送sql语句
        String sql＝&quot;insert into stu values(&apos;...&apos;,&apos;...&apos;,&apos;...&apos;,&apos;...&apos;)&quot;;//右括号不需要打分号，打了就会出错，因为程序会自动帮我们加。
        stmt.executeUpdate(sql);//调用此方法向数据库发送sql语句。该语句返回的值为改变数据库的行数。
    }
}
</code></pre><p><strong>注意:</strong>上述中出现的Connection和Statement都应该导入java.mysql下的包，而不是java.jdbc下的包。</p>
<h3 id="3-2查询"><a href="#3-2查询" class="headerlink" title="3.2查询"></a>3.2查询</h3><p><strong>Demo:</strong></p>
<pre><code>public class Demo{
    public void main(String[] args) throws ClassNotFoundException,SQLException{

        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);//加载驱动类。
        String url=&quot;jdbc:mysql://localhost:3306/数据库名&quot;;
        String username=&quot;root&quot;;
        String password=&quot;123&quot;;

        Connection con=DriverManager.getConnection(url,username,password);

        Statement stmt=con.createStatement();

        String sql=&quot;selece * from stu&quot;;

        ResultSet rs=stmt.execute(sql);

        /*
         *解析ResultSet
         *ResultSet提供了一系列的getXxx()方法
         */
         while(rs.next())//第一次调用next()方法是将光标移动到该表的第一行
         {
             rs.getInt(1);//通过列编号来获取该列的值
             rs.getString(&quot;name&quot;);//通过列名称来获取该列的值。
         }
    }
}
</code></pre><h2 id="4-关闭资源"><a href="#4-关闭资源" class="headerlink" title="4.关闭资源"></a>4.关闭资源</h2><p>关闭资源时采用倒关的手法将对象进行处理:即先得到的对象后关，后得到的对象先关。  </p>
<pre><code>rs.close();
stmt.close();
con.close();
</code></pre><p>为了注意代码的规范化:在try外给出引用的定义，在try内位对象实例化，在finally中对资源进行关闭。</p>
<h2 id="5-PreparedStatement-预处理"><a href="#5-PreparedStatement-预处理" class="headerlink" title="5.PreparedStatement(预处理)"></a>5.PreparedStatement(预处理)</h2><h3 id="5-1介绍"><a href="#5-1介绍" class="headerlink" title="5.1介绍"></a>5.1介绍</h3><p>PrepaerdStatement是Statement的子接口。下面通过一个例子学习PreparedStatement，注意与上述例子中Statement的区别。             </p>
<pre><code>public class Demo{
    public void main(String[] args) throws ClassNotFoundException,SQLException{

        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);//加载驱动类。
        String url=&quot;jdbc:mysql://localhost:3306/数据库名&quot;;            String username=&quot;root&quot;;
        String password=&quot;123&quot;;

        Connection con=DriverManager.getConnection(url,username,password);

        String sql=&quot;insert into stu where username=? and password=?&quot;;//定义sql模板，即参数以问号的形式给出

        PreparedStatement pst=con.prepaerStatement(sql);
        pst.setString(1,username);//数字1代表第一个问号
        pst.setString(2.password);//数字2代表第二个问号
        pst.executeUpdate();//向数据库发送sql语句
    }
}
</code></pre><h3 id="5-2预处理的原理"><a href="#5-2预处理的原理" class="headerlink" title="5.2预处理的原理"></a>5.2预处理的原理</h3><p>服务器的工作:</p>
<ul>
<li>1.检验sql语句的语法</li>
<li>2.编译：一个与函数相似的东西</li>
<li>3.执行：调用函数</li>
</ul>
<p>PreparedStatement使用的前提就是:连接的数据库必须支持预处理。</p>
<p>以后我们要学的DAO模式就是写一个类，把访问数据库的代码封装起来，DAO在数据库与业务逻辑层之间。</p>
<h2 id="6-Java中的时间类型和mysql中的时间类型转换"><a href="#6-Java中的时间类型和mysql中的时间类型转换" class="headerlink" title="6.Java中的时间类型和mysql中的时间类型转换"></a>6.Java中的时间类型和mysql中的时间类型转换</h2><h3 id="6-1数据库类型与Java中类型的对应关系"><a href="#6-1数据库类型与Java中类型的对应关系" class="headerlink" title="6.1数据库类型与Java中类型的对应关系"></a>6.1数据库类型与Java中类型的对应关系</h3><p>数据库中的DATE–&gt;java.sql.Date–&gt;java.util.Date;  </p>
<p>数据库中的TIME–&gt;java.sql.Time–&gt;java.util.Date;  </p>
<p>数据库中的TIMESTAMP–&gt;java.sql.Timestamp–&gt;java.util.Date;  </p>
<p><strong>需要注意的是:</strong></p>
<ul>
<li>1.领域对象(domain)中的所有属性不能出现java.sql包下的东西，即不能使用java.sql.Date、java.sql.Time、java.sql.TimeStamp。</li>
<li>2.ResultSet的getDate()返回的是java.sql.Date()。</li>
<li>3.PreparedStatment的setDate(int,Date),其中第二个参数是sql包下的java.sql.Date()。为了在java中使用sql包下的时间类型，这是就出现了时间类型的转换。</li>
</ul>
<h3 id="6-2转换"><a href="#6-2转换" class="headerlink" title="6.2转换"></a>6.2转换</h3><h4 id="6-2-1将util包下的Date转换为sql包下的Date、Time、Timestamp"><a href="#6-2-1将util包下的Date转换为sql包下的Date、Time、Timestamp" class="headerlink" title="6.2.1将util包下的Date转换为sql包下的Date、Time、Timestamp"></a>6.2.1将util包下的Date转换为sql包下的Date、Time、Timestamp</h4><p><strong>步骤如下:</strong></p>
<ul>
<li>1.把util的的Date转换成毫秒值。</li>
<li>2.使用毫秒值创建sql的Date、Time、Timestamp  <blockquote>
<p>java.util.Date date=new java.util.Date();<br>long l=date.getTime();<br>java.sql.Date sqlDate=new java.sql.Date(l);</p>
</blockquote>
</li>
</ul>
<h4 id="6-2-2将sql包下的Date、Time、Timestamp转换为util包下的Date"><a href="#6-2-2将sql包下的Date、Time、Timestamp转换为util包下的Date" class="headerlink" title="6.2.2将sql包下的Date、Time、Timestamp转换为util包下的Date"></a>6.2.2将sql包下的Date、Time、Timestamp转换为util包下的Date</h4><p>这一步不需要处理了，因为sql包下的Date、Time、和Timestamp继承自util包下的Date。所以可以直接用:  </p>
<pre><code>new java.util.Date()=new java.sql.Date();或
new java.util.Date()=new java.sql.Time();或
new java.util.Date()=new java.sql.Timestamp();  
</code></pre><h2 id="7-大数据"><a href="#7-大数据" class="headerlink" title="7.大数据"></a>7.大数据</h2><p>将大数据的歌曲存入数据库。代码日后补上。</p>
<h2 id="8-批处理"><a href="#8-批处理" class="headerlink" title="8.批处理"></a>8.批处理</h2><h3 id="8-1Statement批处理"><a href="#8-1Statement批处理" class="headerlink" title="8.1Statement批处理"></a>8.1Statement批处理</h3><p>批处理就是一批一批的处理，而不是一个一个的处理。  </p>
<p>当你有10条sql语句要执行时，一次向服务器发送一条语句，这么做效率很差。处理的方案是用批处理，即一次向服务器发送多条sql语句，然后由服务器一次性处理。  </p>
<p>批处理只针对更新(增、删、改),没有查询什么事。  </p>
<p>添加批的语句:PreparedStatement.addBatch();<br>执行批的语句:PreparedStatement.executeBatch();  </p>
<p>mysql默认批处理是关闭的，需要在url参数后面加上?rewriteBatchedStatement=true;</p>
<h2 id="9-联系"><a href="#9-联系" class="headerlink" title="9.联系"></a>9.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="codingxiaxw.cn">blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL学习笔记二之单表查询与多表查询]]></title>
      <url>http://codingxiaxw.com/2016/10/10/16-SQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h2 id="1-编码问题"><a href="#1-编码问题" class="headerlink" title="1.编码问题"></a>1.编码问题</h2><h3 id="1-1查看MySQL数据库编码"><a href="#1-1查看MySQL数据库编码" class="headerlink" title="1.1查看MySQL数据库编码"></a>1.1查看MySQL数据库编码</h3><p>在命令行中输入:<code>SHOW VARIABLES LIKE &#39;CHAR%&#39;;</code>  回车可看到如下内容:  </p>
<a id="more"></a>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%98%E5%90%97.png" alt="">  </p>
<h3 id="1-2编码解释"><a href="#1-2编码解释" class="headerlink" title="1.2编码解释"></a>1.2编码解释</h3><ul>
<li>character_set_client: mysql使用该编码来解读客户端发送过来的数据，例如该编码为utf，那么如果客户端发送过来的数据不是utf，就会出现乱码。</li>
<li>character_set_results：mysql会把数据转换成该编码后，再发送给客户端，例如该编码为utf，那么如果客户端不使用utf来解读，那么就会出现乱码，其它编码只要支持中文即可。</li>
</ul>
<h3 id="1-3控制台乱码问题"><a href="#1-3控制台乱码问题" class="headerlink" title="1.3控制台乱码问题"></a>1.3控制台乱码问题</h3><ul>
<li>插入或修改时出现乱码：因为控制台默认使用gbk，而character_set_client不是gbk的原因。</li>
<li>查询出的数据为乱码，因为character_set_results不是gbk而控制台默认使用gbk。</li>
<li>解决方法:通过在命令行中输入代码<code>set character_set_client=gbk;</code>和<code>set character_set_results=gbk;</code>来设置编码。<blockquote>
<p>注意：设置编码只对当前连接有效，当退出mysql后再次登陆mysql时又回到utf了。解决方法:window系统下是找到my.ini配置文件，在配置文件中设置<code>set default_character=gbk</code>即可；mac用户我不知道用什么办法，希望知道的人在下方评论区得以告知，谢谢。  </p>
</blockquote>
</li>
</ul>
<h2 id="2-备份数据库与恢复数据库"><a href="#2-备份数据库与恢复数据库" class="headerlink" title="2.备份数据库与恢复数据库"></a>2.备份数据库与恢复数据库</h2><h3 id="2-1备份数据库"><a href="#2-1备份数据库" class="headerlink" title="2.1备份数据库"></a>2.1备份数据库</h3><p>备份就是将数据库导出为sql脚本。在命令行中输入:<code>mysqldump -u用户名 -p密码 数据库名&gt;导出文件路径</code>  </p>
<blockquote>
<p>注意:1.末尾不要打分号。2.执行此语句前应该先退出mysql客户端。3.导出的内容不包括创建数据库的语句只包含数据库里面的内容。</p>
</blockquote>
<h3 id="2-2恢复数据库"><a href="#2-2恢复数据库" class="headerlink" title="2.2恢复数据库"></a>2.2恢复数据库</h3><p>就是将导出的sql脚本插入到数据库中。有如下两种实现方式:  </p>
<ul>
<li>第一种方式:1.登录mysql:<code>mysql -u用户名 -p密码</code>。2.创建数据库:<code>create database 数据库名</code>。3.输入命令:<code>mysql -uroot -p密码 数据库名&lt;备份的数据路径</code>并回车。</li>
<li>第二种方式:1.删除数据库:<code>drop database 数据库名</code>。2.重新创建数据库:<code>create database 数据库名</code>。3.切换到数据库:<code>use 数据库名</code>。4.输入命令:<code>source sql脚本路径</code>并回车。</li>
</ul>
<h2 id="3-约束"><a href="#3-约束" class="headerlink" title="3.约束"></a>3.约束</h2><p>约束是添加在列上用来约束列的。</p>
<h3 id="3-1主键约束-primary-key"><a href="#3-1主键约束-primary-key" class="headerlink" title="3.1主键约束(primary key)"></a>3.1主键约束(primary key)</h3><p>特点:1.非空。2.唯一。3.可被引用。当表的某一列被指定为主键后，该列的值就不能为空，也不能有重复值出现。  </p>
<ul>
<li><p>创建表时指定主键的两种方式:  </p>
<pre><code>1.create table emp(
  empno int primary key,
  ename varchar(50)
);

2.create table emp(
  empno int,
  ename varchar(50),
  primary key(empno)
 );
</code></pre></li>
<li><p>修改表时指定主键的方式:</p>
<pre><code>alter table emp
add primary key(empno);
</code></pre></li>
<li><p>修改表时删除主键的方式:</p>
<pre><code>alter table emp
drop primary key;
</code></pre></li>
</ul>
<h3 id="3-2主键自增长-auto-increment"><a href="#3-2主键自增长-auto-increment" class="headerlink" title="3.2主键自增长(auto_increment)"></a>3.2主键自增长(auto_increment)</h3><pre><code>create table student(
id int primary key auto_increment,
name varchar(50)
);
</code></pre><p>注意:auto_increment必须添加在int类型后，指定主键自增长后，插入数据时便可以给该主键设置null值。  </p>
<p>限制:主键自增长在群集环境下不好使，所以大部分情况下我们使用UUID来作主键。  </p>
<h3 id="3-3非空约束-not-null"><a href="#3-3非空约束-not-null" class="headerlink" title="3.3非空约束(not null)"></a>3.3非空约束(not null)</h3><p>因为某些列不能设置为null值，所以可以对列添加非空约束。  </p>
<pre><code>create table student(
id int primary key auto_increment,
name varchar(50) not null
);
</code></pre><h3 id="3-4唯一约束-unique"><a href="#3-4唯一约束-unique" class="headerlink" title="3.4唯一约束(unique)"></a>3.4唯一约束(unique)</h3><p>数据库中某些列不能设置重复的值，所以可以对列添加唯一约束。</p>
<pre><code>create table student(
id int primary key auto_increment,
name varchar(50) not null unique
);
</code></pre><h3 id="3-5概念模型"><a href="#3-5概念模型" class="headerlink" title="3.5概念模型"></a>3.5概念模型</h3><ul>
<li>在java中表现为对象模型：在java中是domain。例如：User、Student。</li>
<li>在数据库中表现为关系模型：在数据库中表现为 表。  </li>
</ul>
<p>当我们要完成一个软件系统时，需要把系统中的实体抽取出来，形成概念模型。例如部门、员工都是系统中的实体。概念模型中的实体最终会成为java中的类、数据库中的表。实体之间还存在着关系，关系有三种:</p>
<ul>
<li>1对多:例如员工和部门的关系</li>
<li>1对1:例如老公和老婆的关系</li>
<li>多对1:例如老师与学生的关系</li>
</ul>
<p>对象模型：可以双向关联，而且引用的是对象，而不是一个主键。  </p>
<p>关系模型：只能多方引用一方，而且引用的是主键，而不是一整行记录。</p>
<h3 id="3-6外键约束"><a href="#3-6外键约束" class="headerlink" title="3.6外键约束"></a>3.6外键约束</h3><ul>
<li>1.外键必须是另一表(或自己表)的主键的值(即外键要引用主键的值)。</li>
<li>2.外键可以为空。</li>
<li>3.外键可重复。</li>
<li><p>4.一张表可以有多个外键。</p>
<pre><code>create table dept(
deptno int primary key auto_increment,
name varchar(50)
);

create table emp(
empno int primary key auto_increment,
name varchar(50), 
dno int,
constraint fk_emp_dept  foreign key(dno)  references dept (deptno)
);
</code></pre></li>
</ul>
<p>最后一行就是给emp表添加外键约束，添加外键约束后，在emp表中对dno列进行赋值时就应该考虑外键约束的三个条件了。(上图创建的两张表演示的也是数据库中1对多的关系。)</p>
<h3 id="3-7数据库中1对1的关系"><a href="#3-7数据库中1对1的关系" class="headerlink" title="3.7数据库中1对1的关系"></a>3.7数据库中1对1的关系</h3><pre><code>create table husband (
hid int primary key auto_increment,
hname varchar(50)
);

insert into husband values(null,’刘备’);
insert into husband values(null,’张飞’);
insert into husband values(null,’关羽’);

create table wife(
wid int primary key auto_increment,
wname varchar(50),
constraint fk_wife_husband foreign key (wid)  references husband(hid)
);
</code></pre><p>特点:外键引用自身表的主键。</p>
<h3 id="3-8数据库中多对多的关系"><a href="#3-8数据库中多对多的关系" class="headerlink" title="3.8数据库中多对多的关系"></a>3.8数据库中多对多的关系</h3><p>在表中建立多对多关系需要使用中间表(关联表)，即需要三张表，在中间表中使用两个外键，分别引用其它两个表的主键。</p>
<pre><code>create table student(
sid int primary key auto_increment,
sname varchar(50)
);

create table teacher (
tid int primary key auto_increment,
name varchar(50)
);

create table stu_tea(
sid int,
tid int,
constraint fk_student foreign key(sid) references student(sid),
constraint fk_teacher foreign key(tid) references student(tid)
);

insert into student values(null,’刘德华’);
insert into student values(null,’梁朝伟);
insert into student values(null,’黄日华’);
insert into student values(null,’苗侨伟’);
insert into student values(null,’汤镇业’);

insert into teacher values(null,’崔老师’);
insert into teacher values(null,’刘老师’);
insert into teacher values(null,’石老师’);

insert into stu_tea values(1,1);
insert into stu_tea values(2,1);
insert into stu_tea values(3,1);
insert into stu_tea values(4,1);
insert into stu_tea values(5,1);
insert into stu_tea values(1,2);
insert into stu_tea values(2,2);
insert into stu_tea values(3,2);
insert into stu_tea values(3,3);
insert into stu_tea values(4,3);
insert into stu_tea values(5,3);

select * from stu_tea;
</code></pre><h2 id="4-多表查询"><a href="#4-多表查询" class="headerlink" title="4.多表查询"></a>4.多表查询</h2><h3 id="4-1分类"><a href="#4-1分类" class="headerlink" title="4.1分类"></a>4.1分类</h3><ul>
<li>合并结果集(了解)</li>
<li>连接查询</li>
<li>子查询</li>
</ul>
<h3 id="4-2合并结果集"><a href="#4-2合并结果集" class="headerlink" title="4.2合并结果集"></a>4.2合并结果集</h3><p>要求两个结果集(注意这里强调的是结果集，而不是两张表)的列数、列类型完全相同。关键字union:去除重复行;关键字union all:不去除重复行。</p>
<pre><code>create table ab(
a int, 
b,varchar(50)
);

insert into ab values(1,’1’);
insert into ab values(2,’2’);
insert into ab values(3,’3’);

create table cd(
c int,
d varchar(50)
);

insert into cd values (3,’3’);
insert into cd values (5,’5’);
insert into cd values (5,’5’);
</code></pre><p>合并操作为:</p>
<pre><code>select * from ab
union (all)
select * from cd;
</code></pre><h3 id="4-3连接查询"><a href="#4-3连接查询" class="headerlink" title="4.3连接查询"></a>4.3连接查询</h3><ul>
<li>内连接</li>
<li>外连接  <blockquote>
<p>外连接又包括左外连接、右外连接、全外连接(mysql不支持这个)</p>
</blockquote>
</li>
</ul>
<h4 id="4-3-1内连接"><a href="#4-3-1内连接" class="headerlink" title="4.3.1内连接"></a>4.3.1内连接</h4><p>方言语法:<code>select * from 表1 别名1，表2 别名2 where 别名1.xx＝别名2.xx;</code>例如:<code>select * from emp,dept  where emp.deptno=dept.deptno;</code>去除无用行后的笛卡尔积，where后的条件是主外键。  </p>
<p>标准语法:<code>select * from 表1 别名1 inner join 表2 别名2，on 别名1.xx＝别名2.xx;</code>例如:<code>:select * from emp inner join dept on emp.deptno=dept.deptno;</code>  就是把方言版的逗号改为inner join ，把where改为on了。</p>
<p>自然连接语法:<code>select * from 表1 别名1 natural  join 表2 别名2;</code>自然连接特有的特点就是它能够自己找到两个表中相同的列 即自己填全where条件。</p>
<p>内连接的特点:内连接查询出的所有记录都是满足条件的记录，不满足条件的记录不显示出来。</p>
<h4 id="4-3-2外连接"><a href="#4-3-2外连接" class="headerlink" title="4.3.2外连接"></a>4.3.2外连接</h4><p>特点:外连接有一主一次。</p>
<ul>
<li>左外连接左表为主，那么左表中所有的记录无论满足不满足条件，都打印出来。不满足条件的值用null填补。语法为:<code>select * from emp left outer join dept on emp.deptno=dept.deptno;</code></li>
<li>右外连接右表为主，那么右表中所有的记录无论满足不满足条件，都打印出来。不满足条件的值用null填补。语法为:<code>:select * from amp right outer join dept on emp.deptno=dept.deptno;</code></li>
<li>全外连接：左右表都为主，左表和右表中的记录都要打印出来，不满足条件的值用null填补。使用union将左外连接和右外连接的结果集合并起来就是全外连接。  </li>
</ul>
<h3 id="4-4子查询"><a href="#4-4子查询" class="headerlink" title="4.4子查询"></a>4.4子查询</h3><p>子查询通俗来讲，就是查询中有查询。  </p>
<p>见例子:</p>
<pre><code>/*查询本公司工资最高的员工的详细信息*/

select * 
from amp
where sal=max(sal);

此种写法错误，因为where条件中不能有聚合函数。所以想到要用子查询。

思路:首先查出最高工资:select max(sal) from amp;然后查询该工资的员工:select * from amp where sal=刚刚的查询结果。所以合并起来为：select * from amp where sal=(select max(sal) from amp);
</code></pre><h4 id="4-4-1子查询能出现的位置"><a href="#4-4-1子查询能出现的位置" class="headerlink" title="4.4.1子查询能出现的位置"></a>4.4.1子查询能出现的位置</h4><ul>
<li>where后作为条件(上述例子)</li>
<li>from后作为二次查询(下面例子)<blockquote>
<p><code>select e.empno,e.ename from (select * from amp where deptno=30) as e where 条件;</code></p>
</blockquote>
</li>
</ul>
<h4 id="4-4-2子查询的结果集"><a href="#4-4-2子查询的结果集" class="headerlink" title="4.4.2子查询的结果集"></a>4.4.2子查询的结果集</h4><ul>
<li>单行单列:<code>select * from 表1 where 列1 [=、&gt;、&lt;、&gt;=、&lt;=、!=] （select 列 from 表2  where 条件);</code></li>
<li>多行单列:<code>:select * from 表1 where 列1 [=、&gt;、&lt;、&gt;=、&lt;=、!=] ［any、all、in］（select 列 from 表2  where 条件;</code></li>
<li>单行多列:<code>select * from 表1 where （列1，列2） in (select 列1，列2 from 表2 where 条件);</code></li>
<li>多行多列:该结果集用在from后作为二次查询。<code>select * from 表1,(select …) 别名 where 条件;</code></li>
</ul>
<h2 id="5-联系"><a href="#5-联系" class="headerlink" title="5.联系"></a>5.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="http://codingxiaxw.cn" target="_blank" rel="external">blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL学习笔记一之MySQL语法]]></title>
      <url>http://codingxiaxw.com/2016/10/09/15-SQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      <content type="html"><![CDATA[<h2 id="1-SQL语句分类"><a href="#1-SQL语句分类" class="headerlink" title="1.SQL语句分类"></a>1.SQL语句分类</h2><ul>
<li>1.DDL(Data Definition Language):数据定义语言，用来定义数据库对象：库、表、列等。功能：创建、删除、修改库和表结构。</li>
<li>2.DML(Data Manipulation Language):数据操作语言，用来定义数据库记录:增、删、改表记录。</li>
<li>3.DCL(Data Control Language):数据控制语言，用来定义访问权限和安全级别。</li>
<li>4.DQL(Data Query Language):数据查询语言，用来查询记录。也是本章学习的重点。  </li>
</ul>
<a id="more"></a>
<h2 id="2-SQL数据中的属性类型"><a href="#2-SQL数据中的属性类型" class="headerlink" title="2.SQL数据中的属性类型"></a>2.SQL数据中的属性类型</h2><ul>
<li>TINYINT:1字节，小整数值。</li>
<li>SMALLINT:2字节，大整数值。</li>
<li>MEDIUMINT:3字节，大整数值。</li>
<li>INT或INTEGER:4字节，整型,大整数值。</li>
<li>FLOAT:单精度浮点数值。</li>
<li>DOUBLE(5,2):双精度浮点型数值，参数表示该浮点型数值最多有5位，其中必须有2位小数。</li>
<li>DECIMAL(M,D):小数值,参数表示该数值最多有M位，其中必须有D位小数。</li>
<li>CHAR:字符型，固定长度字符串类型:char(255)。你存入一个a字符，虽然a只占一个字符，但是它会自动给你加254个空格凑成255个长度。即数据的长度不足指定长度，它会补足到指定长度。</li>
<li>VARCHAR:可变长度字符串类型：varchar(65535),你存入的数据多长它就是多长。它会抽出几个字节来记录数据的长度。</li>
<li>TEXT(CLOB):mysql独有的数据类型，字符串类型。</li>
<li>BLOB:字节类型。</li>
<li>YEAR:年份值，格式为:YYYY</li>
<li>DATA:日期类型，格式为:yyyy-MM-dd。</li>
<li>TIME:时间类型，格式为:hh:mm:ss。</li>
<li>TIMESTAMP:时间戳类型，格式为上面二者的综合。</li>
<li>DATETIME:混合日期和时间值，格式为:YYYYMMDD HHMMSS.</li>
</ul>
<h2 id="3-SQL语句详解"><a href="#3-SQL语句详解" class="headerlink" title="3.SQL语句详解"></a>3.SQL语句详解</h2><p>当然首先需要再命令行中输入<code>mysql -uroot -p</code>来进入mysql。注意:1.MySQL语法不区分大小写，但是建议在写关键字时用大写。2.每一条语句后面以分号结尾。  </p>
<h3 id="3-1DDL-数据定义语言-语法"><a href="#3-1DDL-数据定义语言-语法" class="headerlink" title="3.1DDL(数据定义语言)语法"></a>3.1DDL(数据定义语言)语法</h3><p>该语言用来对数据库和表结构进行操作。  </p>
<p><strong>对数据库的操作:</strong>  </p>
<p>查看所有数据库:<code>SHOW DATABASES;</code>  </p>
<p>使用数据库:<code>USE 数据库名;</code>  </p>
<p>创建数据库:<code>CREATE DATABASE [IF NOT EXISTS] 数据库名 [CHARSET=UTF-8];</code>  </p>
<p>删除数据库:<code>DROP DATABASE 数据库名;</code>  </p>
<p>修改数据库的编码:<code>ALTER DATABASE 数据库名 CHARACTER SET UTF-8;</code>  </p>
<p><strong>对表结构的操作</strong><br>创建表:  </p>
<pre><code>CREATE TABLE (IF NOT EXISTS) 表名(
列名 列类型，
...，
列名 列类型
)；  
</code></pre><p>查看当前数据库中所有表:<code>SHOW TABLES;</code>  </p>
<p>查看表结构:<code>DESC 表名;</code>  </p>
<p>删除表:<code>DROP 表名;</code>  </p>
<p>修改表:修改表有5个操作，但前缀都是一样的:<code>ALTER TABLE 表名...</code>  </p>
<ul>
<li>修改表之添加列:<code>ALTER TABLE 表名 add (列名 列类型，...，列名 列类型);</code></li>
<li>修改表之修改列类型:<code>ALTER TABLE 表名 MODIFY 列名 列的新类型;</code></li>
<li>修改表之列名称列类型一起修改:<code>ALTER TABLE 表名 CHANGE 原列名 新列名 列名类型;</code></li>
<li>修改表之删除列:<code>ALTER TABLE 表名 DROP 列名;</code></li>
<li>修改表之修改表名:<code>ALTER TABLE 表名 RENAME TO 新表名</code></li>
</ul>
<h3 id="3-2DML-数据操作语言-语法"><a href="#3-2DML-数据操作语言-语法" class="headerlink" title="3.2DML(数据操作语言)语法"></a>3.2DML(数据操作语言)语法</h3><p>该语言用来对表记录操作(增、删、改)。  </p>
<h4 id="3-2-1插入数据-一次插入就是插入一行"><a href="#3-2-1插入数据-一次插入就是插入一行" class="headerlink" title="3.2.1插入数据(一次插入就是插入一行)"></a>3.2.1插入数据(一次插入就是插入一行)</h4><p><code>insert into 表名 (列名1，列名2，列名3) values (列值1，列值2，列值3)</code>  </p>
<p>说明:1.在数据库中所有的字符串类型，必须使用单引号。2.(列名1，列名2，列名3)可省略，表示按照表中的顺序插入。但不建议采取这种写法，因为降低了程序的可读性。3.在命令行插入记录不要写中文，否则会出现乱码。  </p>
<h4 id="3-2-2修改记录-不会修改一行"><a href="#3-2-2修改记录-不会修改一行" class="headerlink" title="3.2.2修改记录(不会修改一行)"></a>3.2.2修改记录(不会修改一行)</h4><p>修改某列的全部值:<code>update 表名 set 列名1=列值1(，列名2=列值2);</code>  </p>
<p>修改(某行或者多行记录的)列的指定值:<code>update 表名 set 列名1=列值1 where 列名2=列值2 or 列名3=列值3;</code>  </p>
<p>运算符:<code>=、!=、&lt;&gt;、&lt;、&gt;、&gt;=、&lt;=、between...and、in(…)、is null、not、or、and</code>，其中in(…)的用法表示集合。例如:<code>update 表名 set 列名1=列值1 where 列名2=列值2 or 列名2=列值22</code>用in(…)写成<code>update 表名 set 列名1=列值1 where 列名2 in(列值2，列值3)</code>  </p>
<h4 id="3-2-3删除数据-删除整行"><a href="#3-2-3删除数据-删除整行" class="headerlink" title="3.2.3删除数据(删除整行)"></a>3.2.3删除数据(删除整行)</h4><p><code>delete from 表名 (where 条件);</code>不加where条件时会删除表中所有的记录，所以为了防止这种失误操作，很多数据库往往都会有备份。</p>
<h3 id="3-3DCL-数据控制语言-语法"><a href="#3-3DCL-数据控制语言-语法" class="headerlink" title="3.3DCL(数据控制语言)语法"></a>3.3DCL(数据控制语言)语法</h3><p>该语言用来定义访问权限，理解即可，以后不会多用。需要记住的是，一个项目创建一个用户，一个项目对应的数据库只有一个。这个用户只能对这个数据库有权限，其它数据库该用户就操作不了。  </p>
<h4 id="3-3-1创建用户"><a href="#3-3-1创建用户" class="headerlink" title="3.3.1创建用户"></a>3.3.1创建用户</h4><p>用户只能在指定ip地址上登录mysql:<code>create user 用户名@IP地址 identified by  ‘密码’；</code>  </p>
<p>用户可以在任意ip地址上登录:<code>create user 用户名@‘％’ identified by ‘密码’；</code>  </p>
<h4 id="3-3-2给用户授权"><a href="#3-3-2给用户授权" class="headerlink" title="3.3.2给用户授权"></a>3.3.2给用户授权</h4><p>语法:<code>grant 权限1，…，权限n on 数据库.* to 用户名@IP地址；</code>其中权限1、2、n可以直接用all关键字代替。权限例如:create,alter,drop,insert,update,delete,select。  </p>
<h4 id="3-3-3撤销授权"><a href="#3-3-3撤销授权" class="headerlink" title="3.3.3撤销授权"></a>3.3.3撤销授权</h4><p>语法:<code>revoke 权限1，…，权限n  on  数据库.*   from 用户名@ ip地址；</code>撤销指定用户在指定数据库上的指定权限。撤销例如:<code>revoke create,delete on mydb1.*  form user@localhost;</code>表示的意思是撤消user用户在数据库mydb1伤的create、alter权限。  </p>
<h4 id="3-3-4查看权限"><a href="#3-3-4查看权限" class="headerlink" title="3.3.4查看权限"></a>3.3.4查看权限</h4><p>查看指定用户的权限:<code>show grants for 用户名@ip地址；</code>  </p>
<h4 id="3-3-5删除用户"><a href="#3-3-5删除用户" class="headerlink" title="3.3.5删除用户"></a>3.3.5删除用户</h4><p><code>drop user 用户名@ip地址；</code></p>
<h3 id="3-4DQL-数据查询语言-语法"><a href="#3-4DQL-数据查询语言-语法" class="headerlink" title="3.4DQL(数据查询语言)语法"></a>3.4DQL(数据查询语言)语法</h3><p>重点，该语言用来查询记录，不会修改数据库和表结构。  </p>
<h4 id="3-4-1基本查询-后缀都是统一为from-表名"><a href="#3-4-1基本查询-后缀都是统一为from-表名" class="headerlink" title="3.4.1基本查询(后缀都是统一为from 表名)"></a>3.4.1基本查询(后缀都是统一为from 表名)</h4><ul>
<li>1.字段(列)控制  <blockquote>
<p>1.查询所有列:<code>select * from 表名;</code>其中＊表示查询所有列，而不是所有行的意思。<br>2.查询指定列:<code>select 列1，列2，列n  from 表名；</code><br>3.完全重复的记录只显示一次:在查询的列之前添加distinct:<code>select distinct $ from 表名；</code>缺省值为all。<br>4.列运算<br>a.数量类型的列可以做加、减、乘、除:<code>SELECT sal*5 from 表名；</code>说明:1.遇到null加任何值都等于null的情况，需要用到ifnull()函数。2.将字符串做加减乘除运算，会把字符串当作0。<br>b.字符串累类型可以做连续运算(需要用到concat()函数):<code>select concat(列名1，列名2) from 表名;</code>其中列名的类型要为字符串。<br>c. 给列名起别名:<code>select 列名1 (as) 别名1,列名2 (as) 别名2   from 表名；</code></p>
</blockquote>
</li>
<li>2.条件控制<blockquote>
<p>1.条件查询。在后面添加where指定条件:<code>select * from 表名 where 列名＝指定值;</code><br>2.模糊查询：当你想查询所有姓张的记录。用到关键字like。eg:<code>select * from 表名 where 列名 like ‘张_’;</code>(_代表匹配任意一个字符，％代表匹配0～n个任意字符)。  </p>
</blockquote>
</li>
</ul>
<h4 id="3-4-2排序-所谓升序和降序都是从上往下排列"><a href="#3-4-2排序-所谓升序和降序都是从上往下排列" class="headerlink" title="3.4.2排序(所谓升序和降序都是从上往下排列)"></a>3.4.2排序(所谓升序和降序都是从上往下排列)</h4><ul>
<li>1.升序:<code>select * form 表名 order by 列名 (ASC );</code> ()里面的内容为缺省值；</li>
<li>2.降序:<code>select * from 表名 order by 列名 DESC;</code></li>
<li>3.使用多列作为排序条件: 当第一列排序条件相同时，根据第二列排序条件排序(当第二列依旧相同时可视情况根据第三例条件排序)。eg:<code>select * from 表名 order by 列名1 ASC, 列名2 DESC;</code>意思是当列名1的值相同时按照列名2的值降序排。</li>
</ul>
<h4 id="3-4-3聚合函数"><a href="#3-4-3聚合函数" class="headerlink" title="3.4.3聚合函数"></a>3.4.3聚合函数</h4><ul>
<li>1.count:<code>select count(列名) from 表名；</code>,纪录有效行数。</li>
<li>2.max:<code>select count(列名) from 表名；</code>,列中最大值。</li>
<li>3.min:<code>select sum(列名) from 表名；</code>,列中最小值。</li>
<li>4.sum:<code>select sum(列名) from 表名；</code>,求列的总值，null 和字符串默认为0。</li>
<li>5.avg:<code>select avg(列名) from 表名;</code>,一列的平均值。</li>
</ul>
<h4 id="3-4-4分组查询"><a href="#3-4-4分组查询" class="headerlink" title="3.4.4分组查询"></a>3.4.4分组查询</h4><p>分组查询的信息都是组的信息，不能查到个人的信息，其中查询组的信息是通过聚合函数得到的。  </p>
<p>语法：<code>select 分组列名，聚合函数1,聚合函数2  from 表名 group by 该分组列名；</code>其中分组列名需要的条件是该列名中有重复的信息。  </p>
<p>查询的结果只能为：作为分组条件的列和聚合函数；查处的信息都是组的信息。  </p>
<p>分组查询前，还可以通过关键字where先把满足条件的人分出来，再分组。语法为:<code>select 分组列，聚合函数 from 表名 where 条件 group by  分组列；</code>  </p>
<p>分组查询后，也可以通过关键字having把组信息中满足条件的组再细分出来。语法为：<code>select 分组列，聚合函数 from 表名 where 条件 group by  分组列 having 聚合函数或列名(条件)；</code>  </p>
<h4 id="3-4-5LIMIT子句-mysql中独有的语法"><a href="#3-4-5LIMIT子句-mysql中独有的语法" class="headerlink" title="3.4.5LIMIT子句(mysql中独有的语法)"></a>3.4.5LIMIT子句(mysql中独有的语法)</h4><p>LIMIT用来限定查询结果的起始行，以及总行数。  </p>
<p>例如：<code>select * from 表名  limit 4，3；</code>表示起始行为第5行，一共查询3行记录。  </p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>学过的关键字：<code>select,from,where,group by,having ,order by。</code>当一条查询语句中都包含所有这些关键字时它们的优先级是<code>select&gt;from&gt;where&gt;group by&gt;having&gt;order by</code>。</p>
<h2 id="5-联系"><a href="#5-联系" class="headerlink" title="5.联系"></a>5.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="http://codingxiaxw.cn" target="_blank" rel="external">blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a> </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Java中使用dom4j来解析及生成xml文件]]></title>
      <url>http://codingxiaxw.com/2016/10/04/14-%E5%9C%A8Java%E4%B8%AD%E4%BD%BF%E7%94%A8dom4j%E6%9D%A5%E8%A7%A3%E6%9E%90xml%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>在Java中解析xml文件的方式有四种，分别是:Dom、Sax、Jdom、Dom4j。鉴于目前的趋势，我们这里来讲讲Dom4J的用法，不涉及递归等复杂操作。  </p>
<a id="more"></a>
<h2 id="2-示例—解析xml文件"><a href="#2-示例—解析xml文件" class="headerlink" title="2.示例—解析xml文件"></a>2.示例—解析xml文件</h2><p>首先我们需要创建一个文档，然后才能对其解析。  </p>
<h3 id="2-1xml文档"><a href="#2-1xml文档" class="headerlink" title="2.1xml文档"></a>2.1xml文档</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;books&gt;
    &lt;book id=&quot;001&quot;&gt;
        &lt;title&gt;Harry Potter&lt;/title&gt;
        &lt;author&gt;J K.Rowling&lt;/author&gt;
    &lt;/book&gt;
    &lt;book id=&quot;002&quot;&gt;
        &lt;title&gt;Learning XML&lt;/title&gt;
        &lt;author&gt;Erik T.Ray&lt;/author&gt;
    &lt;/book&gt;
&lt;/books&gt;  
</code></pre><h3 id="2-2示例一、使用List列表方式来解析xml"><a href="#2-2示例一、使用List列表方式来解析xml" class="headerlink" title="2.2示例一、使用List列表方式来解析xml"></a>2.2示例一、使用List列表方式来解析xml</h3><p><img src="http://od2xrf8gr.bkt.clouddn.com/%E4%BD%BF%E7%94%A8list%E9%9B%86%E5%90%88%E6%96%B9%E6%B3%95%E6%9D%A5%E8%A7%A3%E6%9E%90xml%28%E5%B7%B2%E7%9F%A5%E5%B1%9E%E6%80%A7%29.png" alt="">  </p>
<p>以上方式是我们在知道xml文件中的详细内容(如根元素名字、根元素中包含的子元素、子元素的属性名、子元素中又包含子元素的元素名即文本内容)时采用的代码。但当我们不知道xml中的详细信息时，我们应该采用如下方式来解析xml。  </p>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/%E4%B8%8D%E7%9F%A5%E9%81%93%E5%AD%90%E5%85%83%E7%B4%A0%20%E7%94%A8list%E9%81%8D%E5%8E%86xml%E5%85%83%E7%B4%A0.png" alt=""></p>
<h3 id="2-3示例二、使用迭代器Iterator来解析xml"><a href="#2-3示例二、使用迭代器Iterator来解析xml" class="headerlink" title="2.3示例二、使用迭代器Iterator来解析xml"></a>2.3示例二、使用迭代器Iterator来解析xml</h3><p><img src="http://od2xrf8gr.bkt.clouddn.com/%E7%9F%A5%E9%81%93%E5%B1%9E%E6%80%A7%E4%BD%BF%E7%94%A8iterator.png" alt=""></p>
<p>同示例一，以上代码也是我们在知道xml文本详细内容后采用的代码。当我们不知道xml中的详细信息时，我们应该采用如下代码方式来解析xml。<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E4%B8%8D%E7%9F%A5%E9%81%93%E5%B1%9E%E6%80%A7%E7%A7%81%E7%94%A8iterator.png" alt="">  </p>
<p>运行结果如下:  </p>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt=""></p>
<h2 id="3-示例—生成xml文件"><a href="#3-示例—生成xml文件" class="headerlink" title="3.示例—生成xml文件"></a>3.示例—生成xml文件</h2><p><img src="http://od2xrf8gr.bkt.clouddn.com/%E7%94%9F%E6%88%90xml%E6%96%87%E4%BB%B6.png" alt="">  </p>
<p>运行代码后在桌面的dom4j种即可看到如下内容:  </p>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C2.png" alt="">  </p>
<p><strong>说明:</strong>我这里用的是mac系统，文件路径是:/Users/codingBoy/Desktop/dom4j.xml，上图中的路径打错，这个才是正确的路径.</p>
<h2 id="4-联系"><a href="#4-联系" class="headerlink" title="4.联系"></a>4.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="http://codingxiaxw.cn" target="_blank" rel="external">blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaWeb学习笔记之EL表达式]]></title>
      <url>http://codingxiaxw.com/2016/10/03/12-EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>EL，即Expression Language。在JavaWeb中属于JSP技术。  </p>
<p>JSP中的表达式:Java脚本表达式<code>&lt;%=Java表达式%&gt;</code>;EL表达式<code>${EL表达式}</code>。  </p>
<a id="more"></a>
<p>JavaWeb中最好不要在JSP中写Java代码，所以用EL表达式来替代Java表达式。  </p>
<h2 id="2-语法及用法"><a href="#2-语法及用法" class="headerlink" title="2.语法及用法"></a>2.语法及用法</h2><h3 id="2-1获取某个对象的值，并将其输出到页面上。"><a href="#2-1获取某个对象的值，并将其输出到页面上。" class="headerlink" title="2.1获取某个对象的值，并将其输出到页面上。"></a>2.1获取某个对象的值，并将其输出到页面上。</h3><ul>
<li>1.点运算符:<code>${stu.name}</code>，即调用域中<code>stu</code>对应的对象的<code>name</code>的读属性<code>getName()</code>。但，若stu在4个域中没有绑定相应对象，那么就在网页上输出空字符串(即什么都不输出)。  </li>
</ul>
<p><code>${stu.name}</code>相当于:  </p>
<pre><code>&lt;%  
Student stu=pageContext.getAttribute(&quot;stu&quot;);  
if(stu!=null) out.println(stu.getName());  
%&gt;
</code></pre><ul>
<li>2.[]运算符:<code>${stu[&#39;name&#39;]}</code>或者<code>${stu[&quot;name&quot;]}</code>。与点运算符作用一样，但当索引或者名称不符合Java名称规范时(如，获取数组中的某个值)，只能用[]运算符。</li>
<li>3.获取集合中的元素:List按照索引来获取元素:<code>${obj.list[1]}</code>，Map按照指定的key来获取元素:<code>${obj.map.key}</code>或者<code>${obj.map[&#39;key&#39;]}</code>。</li>
</ul>
<h3 id="2-2逻辑和数学运算"><a href="#2-2逻辑和数学运算" class="headerlink" title="2.2逻辑和数学运算"></a>2.2逻辑和数学运算</h3><ul>
<li>1.empty运算符:判断一个对象是否为null或者””，是则返回true，否则返回false。也可以判断一个数组和集合，当数组或集合对象不是null，但对象中没有原素也返回true。</li>
<li>2.数学运算符:<code>+-*/</code>。如<code>${i+1}</code></li>
<li>3.三元运算符:<code>${表达式?T表达式:F表达式}</code>。如<code>${a&gt;1?a+1:a-1}</code></li>
<li>4.不支持字符串连接。如<code>${str+str}</code>，这是错误的。</li>
</ul>
<h3 id="2-3、11个内置对象"><a href="#2-3、11个内置对象" class="headerlink" title="2.3、11个内置对象"></a>2.3、11个内置对象</h3><p>EL内置对象(或隐式对象)，即在EL表达式中可以直接调用的对象。总结起来就是有一个JSP对象，十个Map对象。</p>
<ul>
<li>pageContext:与JSP内置对象pageContext完全一样。</li>
<li>pageScope:当前页面的域对象的Map。</li>
<li>requestScope:请求域对象的Map。</li>
<li>sessionScope:会话域对象的Map。</li>
<li>applicationScope:应用域对象的Map。</li>
<li>param:请求参数的Map，key为请求参数名，value为请求参数的值。</li>
<li>paramValues:请求参数(可重名)的<code>Map&lt;String,String[])</code>，key为请求参数名，value为请求参数的值数组。</li>
<li>header:请求消息头Map，key为请求头名，value为对应的值。</li>
<li>headerValues:请求消息头(可重名)的<code>Map&lt;String,String[]&gt;</code>，key为请求名，value为请求头值数组。</li>
<li>cookie:封装cookie的<code>Map&lt;String,Cookie&gt;</code>，key为cookie的name属性，value为cookie对象本身。</li>
<li>initParam:初始化参数的Map，在web.xml中的context-param元素中定义的初始化参数。</li>
</ul>
<h3 id="2-4自定义EL函数。"><a href="#2-4自定义EL函数。" class="headerlink" title="2.4自定义EL函数。"></a>2.4自定义EL函数。</h3><h4 id="第一步：定义一个有静态方法的类。"><a href="#第一步：定义一个有静态方法的类。" class="headerlink" title="第一步：定义一个有静态方法的类。"></a>第一步：定义一个有静态方法的类。</h4><pre><code>package net.codingXiax.util;  

public class StringUtil{  
  public static String toUppercase(String str){  
     return &quot;字符串&quot;;  
     }  
   }
</code></pre><h4 id="第二步-配置tld。"><a href="#第二步-配置tld。" class="headerlink" title="第二步:配置tld。"></a>第二步:配置tld。</h4><p>在Web-INF目录下(也可以在其他目录下，该目录下建立安全性更高)，建立一个扩展名为tld的xml文件。  </p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  
&lt;taglib xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot;  
        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  
        xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd&quot;  
        version=&quot;2.0&quot;&gt;  
        &lt;tlib-version&gt;1.0&lt;/tlib-version&gt;  
        &lt;short-name&gt;myfn&lt;/short-name&gt;  
        &lt;uri&gt;http://www.yrom.net/jsp/string/fn&lt;/uri&gt;  
        &lt;function&gt;  
              &lt;name&gt;toUppercase&lt;/name&gt;  
              &lt;function-class&gt;net.yrom.util.StringUtil&lt;/function-class&gt;  
              &lt;function-signature&gt;java.lang.String toUpperCase( java.lang.String )&lt;/function-signature&gt;  
        &lt;/function&gt;  
&lt;/taglib&gt;
</code></pre><h4 id="第三步-配置web-xml"><a href="#第三步-配置web-xml" class="headerlink" title="第三步:配置web.xml."></a>第三步:配置web.xml.</h4><p>如果tld文件是在Web-INF目录或类路径下，此步可跳过。  </p>
<pre><code>&lt;jsp-config&gt;
&lt;taglib&gt;
    &lt;taglib-uri&gt;http://www.yrom.net/jsp/string/fn&lt;/taglib-uri&gt;
    &lt;taglib-location&gt;/WEB-INF/myfn.tld&lt;/taglib-location&gt;
&lt;/taglib&gt;  
&lt;/jsp-config&gt;
</code></pre><h4 id="第四步：在JSP中使用。"><a href="#第四步：在JSP中使用。" class="headerlink" title="第四步：在JSP中使用。"></a>第四步：在JSP中使用。</h4><p>注意应先用taglib指令引入该uri。  </p>
<pre><code>&lt;%@ taglib uri=&quot;/该tld所在位置&quot; prefix=&quot;myfn&quot; %&gt;  
...  
&lt;body&gt;  
&lt;%  
   pageContext.setAttribute(&quot;a&quot;,&quot;aaa&quot;);  
%&gt;  
   ${myfn:toUppercase(a)}  
&lt;/body&gt;  
...  
</code></pre><h3 id="2-5JSTL标签库"><a href="#2-5JSTL标签库" class="headerlink" title="2.5JSTL标签库"></a>2.5JSTL标签库</h3><p>JSTL标签库将在下篇文章<a href="">JavaWeb学习笔记之JSTL标签库</a>中详细介绍。</p>
<hr>
<h2 id="3-联系"><a href="#3-联系" class="headerlink" title="3.联系"></a>3.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="http://codingxiaxw.cn" target="_blank" rel="external">blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java学习笔记之反射机制]]></title>
      <url>http://codingxiaxw.com/2016/10/02/11-java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h2 id="理论介绍"><a href="#理论介绍" class="headerlink" title="理论介绍"></a>理论介绍</h2><p>为了便于理解，在给出代码例子之前，首先用文字给大家说说关于”Java反射机制”的理论介绍。  </p>
<p>Java反射是Java语言的一个很重要的特征，它使得Java具有了“动态性”。  </p>
<a id="more"></a>
<p>在Java运行时环境中，对于一个类，能否知道这个类有哪些属性和方法？对于任意一个对象，能否调用它的任意一个方法？答案是肯定的。这种动态获取类的信息以及动态调用对象的方法的功能来自于Java语言的反射(Reflection)机制。  </p>
<p>Java反射机制主要提供了以下功能:  </p>
<ul>
<li>在运行时判断任意一个对象所属的类。</li>
<li>在运行时构造任意一个类的对象。</li>
<li>在运行时判断任意一个类所具有的成员变量和方法。</li>
<li>在运行时调用任意一个对象的方法。  </li>
</ul>
<p>Reflection是Java被视为动态(或准动态)语言的一个关键性质。这个机制允许程序在运行时透过Reflection APIs取得任何一个已知名称的class的内部信息，包括modifiers(诸如public,static等等)、superclass(例如Object)、实现之interfaces(例如Serializable)，也包括fields和methods的所有信息，并可于运行时改变fields内容或调用methods。  </p>
<p>一般而言，开发者社群说到动态语言，大致认同的一个定义是:“程序运行时，允许改变程序结构或变凉类型，这种语言成为动态语言”。从这个观点看，Java就不是动态语言。  </p>
<p>尽管在这样的定义与分类下Java不是动态语言，它却有着一个非常突出的动态相关机制:Reflection。这个字的意思是“反射、映像、倒影”，用在Java身上指的是我们可以于运行时加载、探知、使用编译器件完全未知的classes。换句话说，Java程序可以加在一个运行时才得知名称的class，获悉其完整构造(但不包括methods定义)，并生成其对象实体、或对其fields设值、或唤起其methods。这种“看透class”的能力(the ability of the program to examine itselt)被称为introspection(内省、内观、反省)。Reflection和introspection是常被并提的两个术语。  </p>
<p>在JDK中，主要由以下类来实现Java反射机制，这些类都位于java.lang.reflet包中:  </p>
<ul>
<li>Class类：代表一个类。</li>
<li>field类：代表类的成员变量(成员变量也被称为类的属性)</li>
<li>Method类：代表类的方法。</li>
<li>Constructor类：代表类的构造方法。</li>
<li>Array类：提供了动态创建数组，以及访问数组的元素的静态方法。  </li>
</ul>
<h3 id="获得Class对象"><a href="#获得Class对象" class="headerlink" title="获得Class对象"></a>获得Class对象</h3><p>Java中每个类被加载之后，系统就会为该类声称一个对应的Class对象，通过该Class对象就可以访问到JVM中的这个类。在Java程序中获得Class对象通常有如下三种方式。  </p>
<ul>
<li><p>1.使用Class类的forName(String clazzName)静态方法。该方法需要传入字符串参数，该字符串参数的值是某个类的全限定类名(必须包括完整包名)。  </p>
<blockquote>
<p>代码示例：Class clazz=Class.forName(“demo.Person”);”Demo”代表包名，”Person”代表类名。  </p>
</blockquote>
</li>
<li><p>2.调用某个类的class属性来获取该类对应的Class对象，例如，Person.class将会返回Person类对应的Class对象。  </p>
<blockquote>
<p>代码示例：Class clazz=Person.class;  </p>
</blockquote>
</li>
<li><p>3.调用某个对象的getClass()方法，该方法是java.lang.Object类中的一个方法，所以所有的Java对象都可以调用该方法，该方法将会返回该对象所属类对应的Class对象。  </p>
<blockquote>
<p>代码示例:Person person=new Person();<br>Class clazz=person.getClass();  </p>
</blockquote>
</li>
</ul>
<p>Class对象可以获得该类里的方法(由Method对象表示)、构造器(由Constructor对象表示)、成员变量(由Field)对象表示，这三个类都位于java.lang.reflect包下并实现了java.lang.reflect.Member接口。程序可以通过Method对象来执行对应的方法，通过Constructor对象来调用对应的构造器创建实例，能通过Field对象直接访问并修改对象的成员变量值。  </p>
<h3 id="创建实例对象"><a href="#创建实例对象" class="headerlink" title="创建实例对象"></a>创建实例对象</h3><p>通过反射来生成实例对象有如下两种方式。  </p>
<ul>
<li><p>1.使用Class对象的newInstance()方法来创建该Class对应类的实例，这种方式要求该Class对象的对应类有默认构造器，而执行newInstance()时实际上是利用默认构造器来创建该类的实例。  </p>
<blockquote>
<p>代码示例:Class clazz=Person.class;<br>Object obj=clazz.newInstance();  </p>
</blockquote>
</li>
<li><p>2.先使用Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法来创建该Class对象对应类的实例。通过这种方式可以选择使用指定的构造器来创建实例。  </p>
<blockquote>
<p>代码示例:Class clazz=Person.class;<br>Constructor constructor=clazz.getConstructor(String.class);<br>Object obj=constructor.newInstance();  </p>
</blockquote>
</li>
</ul>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>理论说了这么多，接下来给个很全的案例大家看，毕竟”Talk is cheap,show me your code”。相信看了这个案例你们就会掌握对Java的反射机制了，我这里参考的是CSDN上的一篇文章，就不重复造轮子了直接给链接你们去看他写的代码。<a href="http://blog.csdn.net/ljphhj/article/details/12858767" target="_blank" rel="external">一个例子让你了解Java反射机制</a>。</p>
<hr>
<h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p> If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by clicking these links.</p>
<ul>
<li><p><a href="http://codingxiaxw.cn" target="_blank" rel="external">blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a> </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java随机生成图片与HTML表单中的验证码实现]]></title>
      <url>http://codingxiaxw.com/2016/09/30/10-Java%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87%E4%B8%8EHTML%E8%A1%A8%E5%8D%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h2 id="Java随机生成图片"><a href="#Java随机生成图片" class="headerlink" title="Java随机生成图片"></a>Java随机生成图片</h2><p>用Java语言生成一个带有字符串文本的图片总结来说只需要如下四步:</p>
<ul>
<li>1.创建图片缓冲区</li>
<li>2.设置图片缓冲区的宽高及保存图片的类型</li>
<li>3.得到这个图片的绘制环境(拿到画笔)</li>
<li>4.将图片保存起来</li>
</ul>
<p>代码如下:<br><a id="more"></a></p>
<pre><code>//第一、二步，传入参数为缓冲区宽、高、保存图片类型
BufferedImage image=new BufferedImage(width1,height1,BufferedImage.TYPE_INT_RGB);

//第三步，得到绘制环境(需要用到Graphics类)
Graphics paint=image.getGraphics();
paint.setColor(Color.WHITE);//设置画笔颜色为白色
paint.fillRect(start,end,width2,height2);//绘制矩形并填充，将图片缓冲区的(start,end)坐标作为绘制图片的左上角坐标，绘制图片宽为width2、高为height2
paint.setColor(Color.RED);//设置画笔颜色为红色
paint.drawString(str,x,y);//设置需要绘制在图片上的文本，参数为字符串、字符串所在的x坐标和y坐标

//第四步，将图片保存起来(需要用到ImageIO类)
ImageIO.write(image,&quot;JPEG&quot;,out);//参数为图片缓冲区、图片类型、输出流  
</code></pre><p>通过以上代码便可实现用java语言生成一个简易的带有字符串文本的图片，具体实现如下，首先在IDEA中创建VerifyCode.java类:<br>    <img src="http://od2xrf8gr.bkt.clouddn.com/verify1.png" alt=""><br>    有错误，请将g.drawStrig(sb.toString(),width/4,height-5);改为g.drawString(str,i*width/4,height-5);<br>    <img src="http://od2xrf8gr.bkt.clouddn.com/verify2.png" alt=""><br>    <img src="http://od2xrf8gr.bkt.clouddn.com/verify3.png" alt="">  </p>
<p>通过代码<code>VerifyCode vc=new VerifyCode();</code>创建VerifyCode对象后就可以调用上述所有方法便可以实现随机验证码的图片了。  </p>
<h2 id="在HTML表单中实现验证码"><a href="#在HTML表单中实现验证码" class="headerlink" title="在HTML表单中实现验证码"></a>在HTML表单中实现验证码</h2><p>借用上篇<a href="">Java Web学习笔记之session入门</a>中的保存用户登录信息案例中的代码，新增:  </p>
<ul>
<li>VerifyServlet.java:生成图片，保存图片上的文本到session域中，将图片响应给客户端。</li>
<li>LoginServlet.java中新增作用:判断用户输入的验证码是否正确，若正确则跳转至下一链接，若错误则保存错误信息到request域中，然后请求转发至login.jsp登录页面。  </li>
</ul>
<p>代码如下图:  </p>
<div align="center">VerifyServlet.java</div>

<p><img src="http://od2xrf8gr.bkt.clouddn.com/verifyServlet.png" alt="">  </p>
<div align="center">LoginServlet.java</div>  

<p><img src="http://od2xrf8gr.bkt.clouddn.com/LoginServlet2.png" alt="">  </p>
<p><div align="center">login.jsp(用到了javascript语法来更换验证码)</div><br><img src="http://od2xrf8gr.bkt.clouddn.com/loginJsp.png" alt=""><br>10月8日更正:途中的js代码有错误，将”ducument”改为”document”。  </p>
<p>通过如上代码便可实现HTML中的验证码效果。</p>
<hr>
<h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="http://codingxiaxw.cn" target="_blank" rel="external">blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Web学习笔记之session入门]]></title>
      <url>http://codingxiaxw.com/2016/09/27/9-java-web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bsession%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="1-HttpSession概述"><a href="#1-HttpSession概述" class="headerlink" title="1.HttpSession概述"></a>1.HttpSession概述</h2><ul>
<li>HttpSession是由JavaWeb提供的，用来会话跟踪的类。session是服务器端对象，保存在服务器端。</li>
<li>HttpSession是Servlet三大域对象(request、session、application)之一，所以它也有setAttribute()、getAttribute()、removeAttribute()三个方法。</li>
<li><p>HttpSession底层依赖Cookie，或是URL重写。 </p>
<a id="more"></a> 
</li>
</ul>
<h2 id="2-HttpSession的作用"><a href="#2-HttpSession的作用" class="headerlink" title="2.HttpSession的作用"></a>2.HttpSession的作用</h2><ul>
<li>会话范围:会话范围是某个用户从首次访问服务器开始，到该用户关闭浏览器结束。(会话:一个用户对服务器的多次连贯性请求！所谓连贯请求，就是该用户多次请求 中间没有关闭浏览器)  </li>
<li>服务器会为每个客户端创建一个session对象，session就好比客户在服务器端的账户，它们被服务器保存到一个Map中，这个Map被称之为session缓存。  <ul>
<li>Servlet中得到session对象的方法为:HttpSession session=request.getSession();</li>
<li>Jsp中得到session对象的方法:session是JSP内置对象之一，不用创建就可以直接使用。  </li>
</ul>
</li>
<li>session域相关方法:  <ul>
<li>void setAttribute(String name,Object value);</li>
<li>Object getAttribute(String name);</li>
<li>void removeAttribute(String name);  </li>
</ul>
</li>
</ul>
<h2 id="3-案例-演示保存用户登录信息"><a href="#3-案例-演示保存用户登录信息" class="headerlink" title="3.案例:演示保存用户登录信息"></a>3.案例:演示保存用户登录信息</h2><ul>
<li>案例相关页面和Servlet:  <ul>
<li>login.jsp:登录页面</li>
<li>succ1.jsp:只有登录成功才能访问的页面</li>
<li>LoginServlet:效验用户是否登录成功(这里随便判断的，以后学了数据库后可以根据该用户名和密码是否和数据库中的用户名和密码匹配来判断)</li>
</ul>
</li>
<li>各页面和Servlet内容:  <ul>
<li>login.jsp:提供登录表单，提交表单请求至LoginServlet</li>
<li>LoginServlet：获取请求参数，效验用户是否登录成功  <blockquote>
<p>失败:保存错误信息到request域，转发到login.jsp。(login.jsp中显示request域中的错误信息)<br>成功:保存用户信息到sussion域中，重定向到succ1.jsp页面，显示session域中的用户信息。</p>
</blockquote>
</li>
<li>succ1.jsp:从session域中获取用户信息，如果不存在，显示“您还没有登录”，存在则显示用户信息。  </li>
</ul>
</li>
</ul>
<h3 id="各页面代码如下"><a href="#各页面代码如下" class="headerlink" title="各页面代码如下:"></a>各页面代码如下:</h3><p><font align="center">login.jsp</font><br><img src="http://od2xrf8gr.bkt.clouddn.com/login.png" alt="">  </p>
<p><font align="center">LoginServlet.java</font><br><img src="http://od2xrf8gr.bkt.clouddn.com/loginservlet.png" alt="">  </p>
<p><font align="center">succ1.jsp</font><br><img src="http://od2xrf8gr.bkt.clouddn.com/succ1.png" alt="">  </p>
<h2 id="4-HttpSession的原理-需要理解"><a href="#4-HttpSession的原理-需要理解" class="headerlink" title="4.HttpSession的原理(需要理解)"></a>4.HttpSession的原理(需要理解)</h2><h3 id="初入HttpSession原理"><a href="#初入HttpSession原理" class="headerlink" title="初入HttpSession原理"></a>初入HttpSession原理</h3><blockquote>
<p>1.每当客户端与服务器建立了一个会话，服务器就会为该客户端建立一个session对象，将session对象保存在服务器端的同时服务器还会给客户端发送一个带有JSESSIONID的Cookie(放在响应头中)；2.当客户端在不关闭浏览器的情况下再次访问该服务器时，客户端就会通过这个JSESSIONID来取出保存在服务器端相应session对象。3.当客户关闭了浏览器时，意味着与服务器断开连接然后会话session也随着就结束了，此时能识别存在服务器端的HttpSession对象的JSESSIONID也就跟着丢失了。4.但是此HttpSession对象依旧保存在服务器端。5.当再次打开浏览器时，就会重新建立新连接，服务器给过来的JSESSIONID也是新的了。  </p>
<p>这就好比你第一次去银行办卡，1.银行给你办了一张带有独特帐号的银行卡(JSESSIONID)然后你回家了，你存在银行卡里的钱保存在银行里(相应的HttpSession对象)(对应上面的步骤1)；2.当你再次访问该银行取钱时，你首先要给银行你的带有独特帐号的银行卡(将JSESSIONID给服务器),然后银行会给你要取的钱(获取相应的HttpSession对象)(对应上面的步骤2)。3.当你丢失了你的银行卡，而银行的工作人员又不小心在数据库中删除了你银行卡对应的帐号(对应上面的步骤3关闭浏览器)。4.但是你的钱还保存在银行里(对应上面的步骤4)。5.这时当你再次返回该银行时，你就需要重新办一张银行卡(由于工作人员删除了你原先的帐号所以不能补办),并且新办理的银行卡会对应新的帐号(新的JSESSIONID)。  </p>
</blockquote>
<p>对于断开连接后保存在服务器端的HttpSession对象不会一直存在，它有它的生命时间，一般为30分钟，到达这个时间后服务器端就会将它删除。还有一种情况就是当客户端与服务器建立一个会话后，但是该客户却很长时间不对服务器发请求，当时间到达该session对象存活的时间后服务器也会删除该session对象。就比如你登录了淘宝的主页，然后你半天时间不去碰电脑，当你想起要去购物时，你点击一个超链接后服务器就会要求你重新登录，因为由于你长时间不给服务器发起请求，服务器就误认为这是一个没用的session，然后服务器就将它删了。  </p>
<h3 id="深入HttpSession原理"><a href="#深入HttpSession原理" class="headerlink" title="深入HttpSession原理"></a>深入HttpSession原理</h3><p>首先纠正下上面的一句话，其实当客户端与服务器建立连接时，虽然会话是建立了但是服务器不会立刻建立HttpSession对象(因为对象在服务器端存活时间较长，所以服务器没那么傻)，只有当客户端请求的Servlet中调用了request.getSession()方法要求获取HttpSession对象时服务器才会创建；但是若请求的是jsp页面，则服务器会立刻创建HttpSession对象，因为jsp对应的Servlet类中已经默认调用了request.getSession()。  </p>
<p>调用request.getSession()方法后服务器的做法  </p>
<ul>
<li>获取Cookie中的JSESSIONID，需要判断:  <ol>
<li>如果JSESSIONID不存在，则创建session，把session保存起来并把新创建的JSESSIONID保存到Cookie中。</li>
<li>如果JSESSIONID存在，通过JSESSIONID查找session对象，如果没有查找到，则创建session并保存起来，把新创建的JSESSIONID保存到Cookie中。</li>
<li>如果JSESSIONID存在，通过JSESSIONID查找到了session对象，那么就不会再创建session对象了。  </li>
</ol>
</li>
</ul>
<h2 id="5-HttpSession的其它方法"><a href="#5-HttpSession的其它方法" class="headerlink" title="5.HttpSession的其它方法"></a>5.HttpSession的其它方法</h2><ul>
<li>String getId():获取JSESSIONID。</li>
<li>int getMaxInactiveInterval():获取session可以的最大不活动时间(秒),默认为30分钟，当session在30分钟内没有使用，哪么Tomcat会在session缓存中删掉这个session。</li>
<li>void invalidate():让session失效。调用这个方法会被session失效，当session失效后，客户端再次请求，服务器会给客户端创建一个新的session，并在响应中创建一个新的JSESSIONID。</li>
<li>boolean isNew():查看session是否为新。当客户端第一次请求时，服务器为客户端创建session，并把JSESSIONID存在Cookie中发给客户端，这时调用这个方法返回的就是新session；当再次发起请求时，JSESSIONID放在Cookie中作为请求头发给服务器，这时调用此方法，返回的就是false，即此session不是新的。  </li>
</ul>
<hr>
<h2 id="6-联系"><a href="#6-联系" class="headerlink" title="6.联系"></a>6.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="http://codingxiaxw.cn" target="_blank" rel="external">blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Web读书笔记之Cookie入门]]></title>
      <url>http://codingxiaxw.com/2016/09/27/8-java-web%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8BCookie%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="1-Http协议与Cookie-了解"><a href="#1-Http协议与Cookie-了解" class="headerlink" title="1.Http协议与Cookie(了解)"></a>1.Http协议与Cookie(了解)</h2><ol>
<li>Cookie是Http协议制定的。先有服务器保存Cookie到浏览器，再下次浏览器请求服务器时把上一次请求得到的Cookie归还给服务器。</li>
<li><p>由服务器创建保存到客户端的一个键值对。服务器保存Cookie的响应头,使用response发送响应头:Set-Cookie:aaa=AAA;Set-Cookie:bbb=BBB;例如:  </p>
<pre><code>response.addHeader(&quot;Set-Cookie&quot;,&quot;aaa=AAA&quot;);
response.addHeader(&quot;Set-Cookie&quot;,&quot;bbb=BBB&quot;);
</code></pre></li>
</ol>
 <a id="more"></a>
<ol>
<li>当浏览器请求服务器时，会把该服务器保存的Cookie随请求发送给服务器。浏览器归还Cookie的请求头:Cookie:aaa=AAA;bbb=BBB。多个键值对间用分号隔开。</li>
<li>Http协议规定(为了不给浏览器太大压力)  <ul>
<li>1个Cookie最大4KB</li>
<li>1个服务器最多向1个浏览器保存20个Cookie</li>
<li>1个浏览器最多可以保存300个Cookie  </li>
</ul>
</li>
</ol>
<h2 id="2-Cookie的用途"><a href="#2-Cookie的用途" class="headerlink" title="2.Cookie的用途"></a>2.Cookie的用途</h2><ul>
<li>服务器使用Cookie来跟踪客户端状态。</li>
<li>保存购物车(购物车中的商品不能使用request域来保存，因为它是一个用户向服务器发送的多个请求信息)</li>
<li>显示上次登录用户名(并记住密码)  </li>
</ul>
<h2 id="3-Java-Web中使用Cookie"><a href="#3-Java-Web中使用Cookie" class="headerlink" title="3.Java Web中使用Cookie"></a>3.Java Web中使用Cookie</h2><ul>
<li>原始的方式:  <ul>
<li>使用response发送Set-Cookie响应头。</li>
<li>使用request获取请求头。</li>
</ul>
</li>
<li>便捷方式:<ul>
<li>使用response.addCookie()方法向浏览器保存Cookie。</li>
<li>使用request.getCookies()方法获取浏览器归还的Cookie，返回的对象为Cookie数组。若没有Cookie则返回NULL。  </li>
</ul>
</li>
</ul>
<h2 id="4-Cookie详解"><a href="#4-Cookie详解" class="headerlink" title="4.Cookie详解"></a>4.Cookie详解</h2><ol>
<li>Cookie不只有name和value两个属性。</li>
<li>Cookie的maxAge:指Cookie的最大生命，即Cookie可保存在客户端中的最大时长，以秒为单位。<ul>
<li>maxAge&gt;0:浏览器会把Cookie保存到客户端硬盘上，有效时长为maxAge的值决定，例如:cookie.setMaxAge(60)表示这个Cookie会被浏览器保存到硬盘上60秒。</li>
<li>maxAge&lt;0:Cookie只会在浏览器内存中存在，当用户关闭浏览器时浏览器进程结束，同时Cookie也就死亡了。</li>
<li>maxAge=0:浏览器会马上删除这个Cookie。  </li>
</ul>
</li>
</ol>
<hr>
<h2 id="5-联系"><a href="#5-联系" class="headerlink" title="5.联系"></a>5.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="http://codingxiaxw.cn" target="_blank" rel="external">blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Web中的Servlet请求转发和请求包含]]></title>
      <url>http://codingxiaxw.com/2016/09/26/7-java-web%E4%B8%AD%E7%9A%84Servlet%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E4%B8%8E%E8%AF%B7%E6%B1%82%E5%8C%85%E5%90%AB/</url>
      <content type="html"><![CDATA[<p>为什么需要这样的操作呢？因为很多时候一个请求需要多个Servlet协作才能完成，所以需要在一个Servlet中跳转到另一个Servlet中处理。  </p>
<h2 id="1-格式"><a href="#1-格式" class="headerlink" title="1.格式"></a>1.格式</h2><p>首先调用request的getRequestDispatcher(“参数”)方法，获取到一个RequestDispatcher对象:  </p>
<pre><code>ResquestDispatcher rd=request.getRequestDispatcher(&quot;/MyServlet&quot;);  
</code></pre><p>参数为被包含或被转发的目标Servlet路径。  </p>
<a id="more"></a>
<p>若是请求转发，接下来输入  </p>
<pre><code>rd.forward(request,response);  
</code></pre><p>若是请求包含，接下来输入  </p>
<pre><code>rd.include(request,response);  
</code></pre><p>即可完成我们的请求转发和请求包含。二者的区别为:  </p>
<ul>
<li>请求转发:由当前Servlet设置响应头(不能设置响应体)，下一个Servlet既可设置响应头也可设置响应体。  </li>
<li>请求包含:当前Servlet和下一个Servlet共同完成相应头和响应体。  </li>
</ul>
<p>需要注意的是无论是请求转发还是请求包含，都在一个请求范围内，所以多个Servlet中使用的是同一个request和response。  </p>
<h2 id="2-请求转发"><a href="#2-请求转发" class="headerlink" title="2.请求转发"></a>2.请求转发</h2><p>OneServlet代码如下:<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91One.png" alt="">  </p>
<p>TwoServlet代码如下:<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E8%AF%B7%E6%B1%82%E5%8C%85%E5%90%ABtwo.png" alt="">  </p>
<p>网页响应结果为:<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E7%BB%93%E6%9E%9C.png" alt="">  </p>
<p>由响应结果我们可以看到OneServlet中设置的响应体没有在网页中显示出来，只有TwoServlet中设置的响应体显示出来了。  </p>
<h2 id="3-请求包含"><a href="#3-请求包含" class="headerlink" title="3.请求包含"></a>3.请求包含</h2><p>请求包含和请求转发中代码相比，只是在OneServlet中将forward()方法改为include()方法而已。  </p>
<p>OneServlet中代码:<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E8%AF%B7%E6%B1%82%E5%8C%85%E5%90%ABOne.png" alt="">  </p>
<p>TwoServlet中代码:<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E8%AF%B7%E6%B1%82%E5%8C%85%E5%90%ABtwo.png" alt="">  </p>
<p>网页响应结果为:<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E8%AF%B7%E6%B1%82%E5%8C%85%E5%90%AB%E5%93%8D%E5%BA%94%E7%BB%93%E6%9E%9C.png" alt="">  </p>
<p>从响应结果中我们可以看到在OneServlet和TwoServlet中设置的响应体都显示了出来。  </p>
<h2 id="4-请求转发和重定向的区别"><a href="#4-请求转发和重定向的区别" class="headerlink" title="4.请求转发和重定向的区别"></a>4.请求转发和重定向的区别</h2><ol>
<li>请求转发是一个请求一次响应，而重定向是两次请求两次响应。</li>
<li>请求转发地址栏不变化，而重定向会显示后一个请求的地址。 </li>
<li>请求转发智能转发到本项目其他Servlet，而重定向不只能重定向到本项目的其它Servlet，还能定向到其它项目。</li>
<li>请求转发是服务器端行为，只需各处转发的Servlet路径，而重定向需要给出requestURI,即包含项目名。</li>
<li>请求转发和重定向二者效率前者高，因为前者只发出一个请求。  <blockquote>
<p>很多时候我们需要地址栏发生变化，那时候必须使用重定向。<br>需要在下一个Servlet中获取到request域中的数据，必须用请求转发。  </p>
</blockquote>
</li>
</ol>
<p>既然请求转发和请求包含都是一个请求需要多个servlet协作完成，那么这些Servlet是如何传递数据的呢？见下文新概念。  </p>
<h2 id="5-request域"><a href="#5-request域" class="headerlink" title="5.request域"></a>5.request域</h2><p>何为域？上一篇文章中提到对ServletContext域对象(详见<a href="http://codingxiaxw.cn/2016/09/24/%E5%AE%9E%E7%8E%B0Servlet%E7%9A%84%E6%96%B9%E5%BC%8F/" target="_blank" rel="external">Servlet的实现方式</a>)的介绍时已经说过域的功能，即具有能存数据和取数据的功能。  </p>
<p>同一请求范围内使用request.setAttribute()来传值、使用request.getAttribute()方法来取值.即前一个Servlet使用request.setAttribute()来传值、后一个Servlet使用request.getAttribute()方法来取值。而当想清除request中的值时，调用request.removeAttribute()方法即可清除。如下图:</p>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/request%E5%9F%9F%E6%96%B9%E6%B3%95.png" alt="">  </p>
<p>上图中三大域对象的生命周期长度为:  </p>
<pre><code>request&lt;session&lt;application  
</code></pre><p><strong>扩展:</strong>&nbsp;&nbsp;注意上图中三个方法和请求参数方法的区别，请求参数是客户端传给服务器的，我们不能修改；而此处的setAttribute()是我们自己设置的属性与属性值。另外Servlet类中有上述三大域，而JSP中有四大域，多了一个pageContext域。  </p>
<hr>
<h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="http://codingxiaxw.cn" target="_blank" rel="external">blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Web中实现Servlet的方式]]></title>
      <url>http://codingxiaxw.com/2016/09/24/6-java-web%E5%AE%9E%E7%8E%B0Servlet%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="1-Servlet是什么"><a href="#1-Servlet是什么" class="headerlink" title="1.Servlet是什么?"></a>1.Servlet是什么?</h2><p>Servlet是Java Web三大组件之一，它属于动态资源。Servlet的作用是处理请求，服务器会把接收到的请求交给Servlet来处理，在Servlet中通常需要:  </p>
<ul>
<li>接受数据请求</li>
<li>处理请求</li>
<li><p>完成响应  </p>
<a id="more"></a>
</li>
</ul>
<p>例如客户端发出登录请求，或者输入注册请求，这些请求都应该由Servlet来完成处理。当然Servlet类需要我们自己来编写，每个Servlet类都必须实现javax.servlet.Servlet接口。  </p>
<h2 id="2-实现Servlet的方式-需要我们自己来写"><a href="#2-实现Servlet的方式-需要我们自己来写" class="headerlink" title="2.实现Servlet的方式(需要我们自己来写)"></a>2.实现Servlet的方式(需要我们自己来写)</h2><ol>
<li>实现javax.servlet.Servlet接口;</li>
<li>继承javax.servlet.GenericServlet类;</li>
<li>继承javax.servlet.http.HttpServlet类;  </li>
</ol>
<p>一般来说我们都选择实现HttpServlet类来完成我们的Servlet，但学习Servlet还要从javax.servlet.Servlet接口来学起。  </p>
<h3 id="2-1实现javax-servlet-Servlet接口"><a href="#2-1实现javax-servlet-Servlet接口" class="headerlink" title="2.1实现javax.servlet.Servlet接口"></a>2.1实现javax.servlet.Servlet接口</h3><p>实现该接口的代码如下，需要实现该接口中的5个方法(各个方法的作用见注释)。  </p>
<p>   <img src="http://od2xrf8gr.bkt.clouddn.com/%E5%AE%9E%E7%8E%B0Servlet%E6%8E%A5%E5%8F%A3.png" alt="">  </p>
<p>其中只有三个生命周期的方法是由服务器(例如我用的Tomcat)在认为需要调用的时候自动调用的(即我们自己是无法调用的)，另外的两个方法由我们自己需要的时候调用。   </p>
<h3 id="2-2继承javax-servlet-GenericServlet类"><a href="#2-2继承javax-servlet-GenericServlet类" class="headerlink" title="2.2继承javax.servlet.GenericServlet类"></a>2.2继承javax.servlet.GenericServlet类</h3><p>有人会说，那我每次实现Servlet接口都要重写这5个方法岂不是很麻烦？那肯定麻烦！所以GenericServlet类派上用场了。  </p>
<p>GenericServlet类实现了Servlet接口，所以在GenericServlet类中实现了Servlet接口中的5个抽象方法，另外在GenerecServlet类中还定义了自己的方法，将其作为我们要定义的xxxServlet类的父类，这样我们在自己定义的xxxServlet类中便可以不用<strong>全部</strong>实现Servlet接口中的方法。  </p>
<p>GenericServlet类中的方法如下:<br><img src="http://od2xrf8gr.bkt.clouddn.com/GenericServlet%E7%B1%BB%E4%B8%AD%E7%9A%84%E5%85%A8%E9%83%A8%E6%96%B9%E6%B3%95.png" alt="">  </p>
<p>由图可知，GenericServlet类除了实现Servlet接口中的四个方法外，还定义了getInitParameter()返回Servlet的参数值、getInitParameterNames()返回Servlet的参数名、getServletName()返回Servlet名、getServletContext()返回Servlet上下文、不带参数的init()、log()等方法。这些自己定义的方法中，前面四个是ServletConfig接口中的方法，不带参数的init()方法跟Servlet接口中的init(ServletConfig config)方法要区别，在init()方法中，我们可以添加当xxxServlet被初始化的操作，此方法在初始化方法init(ServletConfig config)中被调用(若是文字解析看不懂见下图GenericServlet源代码中注释)。  </p>
<p>另外不知道你们发现了没有，图中只有service()方法属于抽象方法，所以当我们定义的xxxServlet类去继承GenericServlet类时我们只需重写这一个方法即可，其他方法可重写可不重写。  </p>
<p>另外附上GenericServlet类的源代码:<br><img src="http://od2xrf8gr.bkt.clouddn.com/GenericServlet%E7%B1%BB%E6%BA%90%E4%BB%A3%E7%A0%81.jpg" alt="">  </p>
<p>代码中的xxxServlet类即是我们自己定义的servlet类。  </p>
<p>扩展:<strong>对ServletContext的解释</strong>:  </p>
<p>服务器会为每个应用创建一个ServletContext对象，一个应用只有一个ServletContext对象！我们可以在N多个Servlet中来获取这个唯一的对象，使用它可以给多个Servlet传递数据。此对象在Tomcat(服务器)启动时就创建，在服务器关闭时就销毁。  </p>
<p>ServletContext是Java Web四大域对象(PageContext、ServletRequest、HttpSession、ServletContext)之一，域对象所具有的特点是:  </p>
<ul>
<li>能够存数据</li>
<li>能够取数据  </li>
</ul>
<p>所有的域对象都有存取数据的功能，因为域对象内部有一个Map，用来存储数据，下面是ServletContext对象用来操作数据的方法:  </p>
<p><img src="http://od2xrf8gr.bkt.clouddn.com/ServletContext%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95.png" alt="">  </p>
<p>扩展:<strong>Servlet类三大域:</strong>  </p>
<ul>
<li>request:在Servlet中直接用，因为实现的doPost()方法中有request这个参数。</li>
<li>session:在Servlet中通过<code>HttpSession session=request.getSession();</code>得到。</li>
<li>application:在Servlet中通过<code>ServletContext application=this.getServletContext();</code>得到。</li>
</ul>
<p>扩展:<strong>JSP中四大域</strong></p>
<ul>
<li>page域:即9大内置对象中的pageContext，为PageContext的实例。注意:“page域”不同于9大内置对象中“page”。</li>
<li>request域:即9大内置对象中的request，为HttpServletRequest的实例。</li>
<li>session域:即9大内置对象中的session,为HttpSession的实例。</li>
<li>application:即9大内置对象中的ServletContext的实例。</li>
</ul>
<h3 id="2-3-继承HttpServlet类"><a href="#2-3-继承HttpServlet类" class="headerlink" title="2.3.继承HttpServlet类"></a>2.3.继承HttpServlet类</h3><p>HttpServlet类是我们用到次数最多的，也是最简单的。由类名可知，该类总是跟http协议相关的。  </p>
<p>HttpServlet类中的方法如下图:<br><img src="http://od2xrf8gr.bkt.clouddn.com/httpservlet%E7%B1%BB%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95.png" alt=""><br>方法中值得我们注意的有doGet()、doPost()、还有两个service()方法。其中doGet()和doPost()方法是需要我们重写的，我来解释下两个service()方法的区别。  </p>
<p>估计你们从方法中的参数就知道他们的区别了吧，其中一个service()方法是Serlvet接口中的生命周期方法，另外一个是跟http协议有关的方法。二者方法的解释见下两站图的说明(图1中指出HttpServlet类是继承自GenderServlet类):<br><img src="http://od2xrf8gr.bkt.clouddn.com/httpServlet%E4%B8%AD%E5%AF%B9service%E6%96%B9%E6%B3%95%E7%9A%84%E8%A7%A3%E9%87%8A.png" alt=""><br>uml(时序图)如下:<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt=""><br>图中405的含义是说服务器不支持客户端(即浏览器)用此种方法访问。因为HttpServlet类的源代码中的doGet()和doPost()方法体里面就是这样写的，你在定义的xxxservlet中如果不重新重写这两个方法就会出现405的响应状态码。接下来我们看看如何继承HttpServlet类:<br><img src="http://od2xrf8gr.bkt.clouddn.com/%E5%AE%9E%E7%8E%B0httpservlet%E7%B1%BB.png" alt=""><br>FServlet即为我们自己定义的servlet类，在doGet()方法和doPost()方法中即可写具体要进行的操作。  </p>
<p>如上三种方式便可实现我们自己定义的Servlet类。  </p>
<hr>
<h2 id="3-联系"><a href="#3-联系" class="headerlink" title="3.联系"></a>3.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="http://codingxiaxw.cn" target="_blank" rel="external">blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从Android开发转战Java Web]]></title>
      <url>http://codingxiaxw.com/2016/09/12/5-%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
      <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>&emsp;&emsp;一个伟大事迹的诞生总要牺牲点什么，William Henry Gates大学时选择休学而去搞开发，最后成就了自己的 SoftWare；Steven Jobs因父母财务紧张不得不辍学，最后成就了自己的apple；而我，一个平凡的在校大三狗，在Andriod开发的世界里摸黑打滚了大半年之后，在仔细的思考过后，而今打算放弃Android去选择Web开发(你以为我也要辍学去搞开发吗)。<img src="http://od2xrf8gr.bkt.clouddn.com/%E5%9D%8F%E7%AC%91.jpg" alt="">希望在接下来的日子里，能学有所得。 </p>
<a id="more"></a>
<h2 id="2-细数这一年来自己的经历"><a href="#2-细数这一年来自己的经历" class="headerlink" title="2.细数这一年来自己的经历:"></a>2.细数这一年来自己的经历:</h2><h3 id="2-1开发过的app"><a href="#2-1开发过的app" class="headerlink" title="2.1开发过的app"></a>2.1开发过的app</h3><ul>
<li>计算器</li>
<li>记事本</li>
<li>智能聊天机器人</li>
<li>天气预报</li>
<li>2048小游戏</li>
<li>知乎日报  </li>
</ul>
<h3 id="2-2学习过的网站"><a href="#2-2学习过的网站" class="headerlink" title="2.2学习过的网站"></a>2.2学习过的网站</h3><ul>
<li><a href="http://www.imooc.com/" target="_blank" rel="external">慕课网</a>  </li>
<li><a href="http://www.jikexueyuan.com/" target="_blank" rel="external">极客学院</a>  </li>
<li><a href="http://study.163.com/" target="_blank" rel="external">网易云课堂</a></li>
</ul>
<h3 id="2-3看过的书籍"><a href="#2-3看过的书籍" class="headerlink" title="2.3看过的书籍"></a>2.3看过的书籍</h3><p>有关java:  </p>
<ul>
<li>《java从入门到精通》  </li>
<li>《java疯狂讲义》  </li>
</ul>
<p>有关Android：</p>
<ul>
<li>《第一行代码》</li>
<li>《Android群英传》</li>
<li>《Android开发艺术探索》  </li>
</ul>
<p>这一年，开发进行的真的格外辛苦，从最开始立下的向Web开发的flag转战Android开发。这一年里，经常遇到调了几天几夜都还调不出来的bug，很是难受；看着书上那一串串乏味的代码和解说，真的很让人犯困；特别是当你的编程能力过了初级工程师的编程能力想要进阶的时候，看到那些源码真的让人很难受；很多时候想过放弃，但还是坚持了下来；因为当你完成一个功能而设计出一个app的时候，那种自豪感真的很让人兴奋。 </p>
<h2 id="3-做的好好的为什么要转？"><a href="#3-做的好好的为什么要转？" class="headerlink" title="3.做的好好的为什么要转？"></a>3.做的好好的为什么要转？</h2><p>纯属兴趣。  </p>
<p>做就要做到最好，我会依旧保持自己对编程的热爱之情，向大牛发展，争取在2018年毕业之际顺利进入自己梦想的大公司(当然BAT是首选啊哈哈）。  </p>
<p>人若没有理想，跟咸鱼有什么区别呢？  </p>
<hr>
<h2 id="4-联系"><a href="#4-联系" class="headerlink" title="4.联系"></a>4.联系</h2><p> If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="http://codingxiaxw.cn" target="_blank" rel="external">blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android中Activity的生命周期]]></title>
      <url>http://codingxiaxw.com/2016/09/07/4-Android%E4%B8%ADActivity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<p>刚刚在stormzhang的一篇叫    <strong><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650661665&amp;idx=1&amp;sn=8127335085ce285473eb5ba53663fc29&amp;scene=21#wechat_redirect" target="_blank" rel="external">android学到哪种程度可以去找工作</a></strong>中看到张哥提了这么一个观点<strong>如果我问你Android中Activity生命周期你还支支吾吾的那我就对你没什么兴趣了</strong>。吓得我赶紧在脑海中回顾了下有关activity生命周期的知识，便打算趁热打铁写下自己对activity生命周期的理解。    </p>
<a id="more"></a>
<h2 id="1-Activity形态"><a href="#1-Activity形态" class="headerlink" title="1.Activity形态"></a>1.Activity形态</h2><p>Activity一个最大的特点就是拥有多种形态，它可以在多种形态间进行切换，以此来控制自己的生命周期。    </p>
<ul>
<li><strong>Active/Running</strong><br>这时候，Activity处于Activity栈的最顶层，可见，并与用户进行交互。  </li>
<li><strong>Paused</strong><br>当Activity失去焦点，被一个新的非全屏的Activity或者一个透明的Activity放置在栈顶时，Activity就转化为Paused形态。但它只是失去了与用户交互的能力，所有状态信息，成员变量都还保持着，只有在系统内存极低的情况下，才会被系统回收掉。</li>
<li><strong>Stopped</strong><br>如果一个Activity被另一个Activity完全覆盖，那么Activity就会进入Stopped形态。此时，它不再可见，但却依然保持了所有状态信息和成员变量。</li>
<li><strong>Killed</strong><br>当Activity被系统回收掉或者Activity从来没有创建过，Activity就处于Killed形态。<br>由此可见，用户的不同动作，会让activity在这四种形态间切换。而开发者，虽然可以控制Activity如何“生”，却无法控制Activity何时“死”。  </li>
</ul>
<h2 id="2-Activity生命周期"><a href="#2-Activity生命周期" class="headerlink" title="2.Activity生命周期"></a>2.Activity生命周期</h2><p>Google给了我们一张图来揭示Activity生命周期，如图。<br><img src="http://od2xrf8gr.bkt.clouddn.com/android%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt=""><br>程序启动运行并结束上述生命周期的方法执行顺序是这样的：<br>onCreate()–&gt;onStart()–&gt;onResume()–&gt;onPause()–&gt;onStop()–&gt;onDestroy()，这张经典图众所周知，开发者当然不必实现所有的生命周期方法，但知道每一个生命周期状态的含义，可以让我们更好地掌控Activity，让它能更好地完成你所期望的效果。 </p>
<ul>
<li>onCreate():创建基本的UI元素。 </li>
<li>onPause与onStop:清除Activity的资源，避免浪费。</li>
<li>onResume():需要重新初始化在onPause()中释放的资源。</li>
<li>onStart():每当Activity由不可见到可见时，都会调用该方法。</li>
<li>onRestart():需要初始化在onStop()中释放的资源。</li>
<li>onDestroy():当活动完成或者被系统销毁的时候会调用该方法。  </li>
</ul>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><ol>
<li>在系统调用onCreate()方法之后，就会马上调用onStart()方法，然后继续调用onResume()方法以进入Resumed状态(也就是前面说的Active/Running形态),最后就会停在Resumed状态，完成启动。  </li>
<li>当栈顶的Activity部分不可见后，就会导致Activity进入Pause形态，此时就会调用onPause()方法，当结束阻塞后，就会调用onResume()方法来恢复到Resume形态。  </li>
<li>当栈顶的Activity由部分不可见(调用onPause())到完全不可见(调用OnStop())或者从可见(调用onResume())到完全不可见时，也就是停止过程，此时系统会调用onPause()方法和onStop()方法。  </li>
</ol>
<p>另外，由图可知，从可见到不可见中间一定会经过部分不可见也就是一定会调用onPause()方法，而不能直接从可见跳到完全不可见，可见系统在Activity不可见的时候一定会调用onPause()方法;而当Activity由不可见到可见时，系统会通过顺序依次调用onStoped()–&gt;onRestart()–&gt;onStart()。  </p>
<p>以上便是我对Android 中Activity生命周期的理解。  </p>
<hr>
<h2 id="4-联系"><a href="#4-联系" class="headerlink" title="4.联系"></a>4.联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="http://codingxiaxw.cn" target="_blank" rel="external">blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a> </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中String、StringBuilder和StringBuffer的区别]]></title>
      <url>http://codingxiaxw.com/2016/09/06/3-java%E4%B8%ADstring%E3%80%81StringBuffer%E5%92%8CStringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>  在网上查找知识点时很容易产生当时看了就会，下次又遇到这个知识点时却不得不再次上网查看这个知识点的毛病。于是打算以后将自己领悟不清的知识点写下来（相信这也是大多数人喜欢写博客的原因吧），一方面为了给后来者借鉴，另一方面也是为了自己加深印象和自己对知识的总结。  </p>
<p>  今天就来谈谈自己对java中String、StringBuilder和StringBuffer知识点的理解。  </p>
<ul>
<li><strong>String字符串常量</strong>  </li>
<li><strong>StringBuffer字符串变量(线程安全）</strong>  </li>
<li><p><strong>StringBuilder字符串变量（非线程安全）</strong>  </p>
<a id="more"></a>
</li>
</ul>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>所谓常量，即该对象的值已经被赋予了，不能再更改。若非要更改，则只能再重新创建另一个对象，在这个新创建的对象上再进行赋值。因此，每次在对String类型的对象进行改变的时候其实都等同于生成了一个新的String对象，然后将指针指向新的String对象，所以经常改变内容的字符串最好不要用String，因为每次生成对象都会对系统性能产生影响，特别当内存中无引用对象多了以后，JVM的GC就会开始工作，那速度是一定会相当慢的。  </p>
<h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>所谓变量，即是可以随时变化的量。如果对StringBuffer对象进行改变，每次结果都会对StringBuffer对象进行操作，而不是生成新的对象。所以一般字符串要经常变化的话我推荐使用StringBuffer。  </p>
<h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>StringBuilder和StringBuffer类功能基本相似，方法也差不多，主要区别在于StringBuffer类的方法是多线程安全的，而StringBuilder不是线程安全的，相比而言StringBuilder类会略微快一点。  </p>
<p><strong>题外话:</strong>现在很多互联网公司面试java的面试官都喜欢问这样一个问题,</p>
<blockquote>
<p>请你谈谈StringBuffer和StringBuilder的区别。  </p>
</blockquote>
<p>大多数人肯定会直接说前者是线程安全的而后者是非线程安全的。其实这个时候才是面试官真正想问的，他会顺着你的回答又问你，那请你谈谈什么是线程…balabalabala。哈哈，要想顺利通过面试，所以对知识的了解还是全面点吧～！  </p>
<hr>
<h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>  If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="http://codingxiaxw.cn" target="_blank" rel="external">blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac用户如何将自己的代码上传至github托管]]></title>
      <url>http://codingxiaxw.com/2016/04/09/2-mac%E7%94%A8%E6%88%B7%E5%A6%82%E4%BD%95%E5%B0%86%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%A3%E7%A0%81%E4%B8%8A%E4%BC%A0%E8%87%B3github%E6%89%98%E7%AE%A1/</url>
      <content type="html"><![CDATA[<p>  楼主刚开始试着想将自己的代码上传至github上的时候真的是个小白，google上面到处搜到处找资源。后来云里雾里的成功上传后，发现网络上介绍的大致有两种方法，一种方法是通过git命令行，另一种方法是通过下载github客户端。两种方法都很简单，也许你觉得我接下来介绍的很繁琐，但这是详细的表现，下面将详细介绍<strong>通过git命令行来上传自己的代码</strong>。</p>
<a id="more"></a>
<h2 id="通过git命令行。"><a href="#通过git命令行。" class="headerlink" title="通过git命令行。"></a>通过git命令行。</h2><p>其实git命令不用学太多，会基本的5、6个命令就好，经常用的有  </p>
<ol>
<li><strong>git init;</strong>(作用:初始化你的文件夹)</li>
<li><strong>git add;</strong>(作用：将你的仓库添加至远程)</li>
<li><strong>git commit -m “你想输入的信息”;</strong>(作用:将你的仓库提交至远程)</li>
<li><strong>git push origin master;</strong>(作用:将你的仓库推至github)<br>其实将你的代码上传至github上，按照这四个步骤便可以完成了，是不是很简单呢？  </li>
</ol>
<p><strong>请见详细步骤:</strong></p>
<p>首先，你想使用git总得在网页上下载个git吧？打开终端，输入以下命令并回车:  </p>
<table width="100%"><tr><td bgcolor="black"><font color="ffffff">ruby -e “$(curl -fsSL   <a href="https://raw.githubusercontent.com/Homebrew/install/master/install" target="_blank" rel="external">https://raw.githubusercontent.com/Homebrew/install/master/install</a>)”<br>brew install git</font></td></tr></table><br>如何看你是否安装好git了呢？打开你的终端，并输入如下命令<br> <table width="100%"><tr><td bgcolor="black"><font color="ffffff">git –version</font></td></tr></table><br>若出现类似下面的代码则代表你的git客户端安装成功。<br><table width="100%"><tr><td bgcolor="black"><font color="ffffff">zjcs-MacBook-Pro:zjc_HexoBlog zjc $ git –version<br>  git version 2.1.3.36.g8e36a6d</font></td></tr></table>   

<p>  接下来分别通过下面两个步骤即可完成将你的代码上传至github上。  </p>
<p>  1.克隆你github上面的项目到本地仓库，在命令行输入以下代码：git clone url 然后回车。 这时你就可以看到你的电脑上多了一个以你仓库命名的文件夹啦。（其中url指你github上面仓库的地址，点开你的仓库就可以看到你仓库的地址啦。）<br>  如我的仓库名称是: <img src="http://od2xrf8gr.bkt.clouddn.com/%E4%BB%93%E5%BA%93%E5%90%8D%E7%A7%B0.png" alt=""><br>  我的project仓库的地址是 <img src="http://od2xrf8gr.bkt.clouddn.com/%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.png" alt=""><br>  点击这个图标可以复制你仓库的url<br>  <img src="http://od2xrf8gr.bkt.clouddn.com/%E5%9B%BE%E6%A0%87.png" alt="">   </p>
<p>  2.首先要将你想上传的代码文件夹拖至这个新出现的仓库文件夹，然后在命令行输入:<br>  <table width="100%"><tr><td bgcolor="black"><font color="ffffff">cd 你的仓库文件夹名称</font></td></tr></table></p>
<p>  如我的就在命令行中输入:  </p>
  <table width="100%"><tr><td bgcolor="black"><font color="ffffff">cd projects</font></td></tr></table>


<p>  这时你命令行中的目录就会出现在你的仓库目录下。  </p>
<p>  接下来输入:  </p>
   <table width="100%"><tr><td bgcolor="black"><font color="ffffff">git add 你想上传的代码文件夹名称</font></td></tr></table>


<p>  或者是输入:<br>  <table width="100%"><tr><td bgcolor="black"><font color="ffffff">git add .</font></td></tr></table><br>(add后面的‘.’代表你仓库中的所有内容)   </p>
<p>  然后输入:  </p>
   <table width="100%"><tr><td bgcolor="black"><font color="ffffff">git commit -m “你想交代的内容”</font></td></tr></table>

<p>  最后输入:<br>  <table width="100%"><tr><td bgcolor="black"><font color="ffffff">git push origin master</font></td></tr></table>  </p>
<p>  一会儿后你就会在你github的仓库中看到你上传的代码文件夹啦。是不是都很简单呢！  </p>
<hr>
<h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p> If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by clicking  these links.</p>
<ul>
<li><p><a href="http://codingxiaxw.cn" target="_blank" rel="external">blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><a href="https://github.com/codingXiaxw" target="_blank" rel="external">github@codingXiaxw</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[开启我的博客之旅]]></title>
      <url>http://codingxiaxw.com/2016/03/31/1-%E5%86%99%E5%8D%9A%E5%AE%A2%E4%B9%9F%E6%98%AF%E4%B8%80%E7%A7%8D%E7%94%9F%E6%B4%BB%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>hello guys,I’m codingXiaxw,who decide to write my own blog while I’m coding.As far as I’m concerned, writing blog is also a part of life.Everytime I felt tired,I would stop coding to play macdown,and then writed my feelings and reviews in it.In this way can I deepen the knowledges in my brain and can also make me relaxing.  </p>
<p>Welcome to <a href="https://codingxiaxw.cn" target="_blank" rel="external">codingXiaxw’s blog</a> website!Thank for you coming,and thank for your support.They are the energy to encourage me to move forward.  </p>
<p>Today I will begin my blog journey，and I will update it frequently.   </p>
<a id="more"></a>
<h3 id="为什么要写博客"><a href="#为什么要写博客" class="headerlink" title="为什么要写博客:"></a>为什么要写博客:</h3><p>在网上查找资料时，各种博客内容参差不齐，等自己了解透了便将自己的见解写出来，供自己以后的学习，也供他人日后的参考。</p>
<h3 id="现阶段"><a href="#现阶段" class="headerlink" title="现阶段:"></a>现阶段:</h3><p>研习 <strong>Android开发</strong>，正朝着进阶的方法加以奋斗。</p>
<h3 id="个性签名"><a href="#个性签名" class="headerlink" title="个性签名:"></a>个性签名:</h3><p>Life is shot, just coding.</p>
<h3 id="坚信"><a href="#坚信" class="headerlink" title="坚信:"></a>坚信:</h3><ul>
<li>付出总会有回报</li>
</ul>
<h3 id="愿望"><a href="#愿望" class="headerlink" title="愿望:"></a>愿望:</h3><ul>
<li>写好代码</li>
<li>学好算法</li>
<li>顺利进入BAT</li>
</ul>
<h3 id="我的朋友们"><a href="#我的朋友们" class="headerlink" title="我的朋友们"></a>我的朋友们</h3><ul>
<li><a href="http://blog.csdn.net/laymat?viewmode=contents" target="_blank" rel="external">方正浩（laymat）</a></li>
</ul>
<h3 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h3><p> If you have some questions after you see this article,you can tell your doubts in the comments area or you can find some info by  clicking these links.</p>
<ul>
<li><p><a href="http://codingxiaxw.cn" target="_blank" rel="external">Blog@codingXiaxw’s blog</a></p>
</li>
<li><p><a href="http://weibo.com/u/5023661572?from=hissimilar_home&amp;refer_flag=1005050003_" target="_blank" rel="external">Weibo@codingXiaxw</a></p>
</li>
<li><p><a href="http://www.zhihu.com/people/e9f78fa34b8002652811ac348da3f671" target="_blank" rel="external">Zhihu@codingXiaxw</a>  </p>
</li>
<li><p><a href="https://github.com/codingXiaxw" target="_blank" rel="external">Github@codingXiaxw</a></p>
</li>
<li><p>微信号：wu19961017</p>
</li>
<li><p>微信公众号：codingxiaxw</p>
</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
